{"version":3,"file":"ballpen.min.js","sources":["../src/ballpen.js"],"sourcesContent":["class Ballpen {\r\n\r\n    constructor(el, dataModel) { \r\n        // Init EventList\r\n        this.init(el, dataModel);\r\n        // Scan directives\r\n        this.scan(this.el);\r\n    };\r\n\r\n    init(el, dataModel) {\r\n        this.el = document.querySelector(el);\r\n        // Hide before render\r\n        this.el.style.display = 'none';\r\n\r\n        // Handle invalid root element\r\n        if (!this.el) {\r\n            throw new Error('[Ballpen] Invalid root element!');    \r\n        }\r\n\r\n        this.dataModel = dataModel;\r\n\r\n        if (dataModel.event) {\r\n            this.eventList = {};\r\n            this.initEventList(dataModel.event);\r\n        }\r\n\r\n        if (dataModel.data) {\r\n            // Set proxy to global data payload\r\n            this.dataListPure = dataModel.data;\r\n            this.dataList = Ballpen.clone(dataModel.data);\r\n            this.modelList = {};\r\n        }\r\n\r\n        if (dataModel.watchers) {\r\n            this.watchersHook = new Map();\r\n\r\n            let _watchers = dataModel.watchers;\r\n\r\n            for (let watcher in _watchers) {\r\n                const _dataPath = watcher;\r\n                const _dataHook = _watchers[watcher].handler;\r\n\r\n                this.watchersHook.set(_dataPath, _dataHook);\r\n            }\r\n\r\n            this.watchersHook.forEach((watcherFn, path) => {\r\n                Ballpen.renderObjectValueByPath(this.dataList, path, this.setProxy(Ballpen.parseData(path, this.dataList).data, path, watcherFn, watcherFn));\r\n            });\r\n        }\r\n\r\n        // Other initializations\r\n        this.registers = [];\r\n        this.removedChildNodes = [];\r\n    };\r\n\r\n    setProxy(dataList, path, fnSet = false, fnGet = false) {\r\n        let handler = {\r\n            get: (target, property) => {\r\n                // Run callback\r\n                fnGet && fnGet.call(this, Ballpen.parseData(path, this.dataListPure).data, Ballpen.parseData(path, this.dataList).data);\r\n                return target[property];\r\n            },\r\n            set: (target, property, value, receiver) => {\r\n                let realProperty;\r\n                if (/^\\$/ig.test(property)) {\r\n                    realProperty = property.substring(1);\r\n                } else {\r\n                    realProperty = property;\r\n                }\r\n\r\n                target[realProperty] = value;\r\n                // Run callback\r\n                if (realProperty === property) {\r\n                    fnSet && fnSet.call(this, Ballpen.parseData(path, this.dataListPure).data, Ballpen.parseData(path, this.dataList).data);\r\n                }\r\n                \r\n                // Return true to accept the changes\r\n                return true;\r\n            },\r\n            defineProperty: (target, prop, descriptor) => {\r\n                return Reflect.defineProperty(target, prop, descriptor);\r\n            }\r\n        };\r\n\r\n        // Can not set a proxy on a single value (!! need to be fixed !!)\r\n        return new Proxy(dataList, handler);\r\n    };\r\n\r\n    initEventList(eventList) {\r\n        if (eventList) {\r\n            let _thisEventObject = eventList;\r\n            for (let item in _thisEventObject) {\r\n                this.eventList[item]      = {};\r\n                this.eventList[item].type = '';\r\n                this.eventList[item].fn   = _thisEventObject[item];\r\n            }\r\n        }\r\n    };\r\n\r\n    scan(el, init = true) {\r\n        for (let i = 0; i < el.children.length; i++) {\r\n            let _thisNode = el.children[i];\r\n            let innerText = el.innerHTML;\r\n     \r\n            // Bind\r\n            this.bind(_thisNode);\r\n\r\n            // Recursion\r\n            if (_thisNode.children.length > 0) {\r\n                this.scan(_thisNode, false);\r\n            }\r\n        }\r\n\r\n        if (init) {\r\n            // Update view\r\n            this.update();\r\n            // Attach observers\r\n            this.attach();\r\n            // Show rendered view\r\n            (this.el.style.removeProperty ? this.el.style.removeProperty('display') : this.el.style.removeAttribute('display'));\r\n        }   \r\n    };\r\n\r\n    update() {\r\n        this.removedChildNodes.forEach((node) => {\r\n            node.remove();\r\n        });\r\n    }\r\n\r\n    bind(el) {\r\n        if (!el.hasAttributes()) {\r\n            return;\r\n        }\r\n\r\n        let _attrs = el.attributes;\r\n\r\n        for (let i = 0; i < _attrs.length; i++) {\r\n            const _attr = _attrs.item(i);\r\n\r\n            if (_attr.name === 'bp-model') {\r\n                this.bindModel(el);\r\n            }\r\n\r\n            if (_attr.name === 'bp-class') {\r\n                this.bindClass(el);\r\n            }\r\n\r\n            if (/bp-event:/ig.test(_attr.name)) {\r\n                let _fnType = _attr.name.split(':')[1];\r\n                let _fnName = _attr.value;\r\n                this.bindEvent(el, _fnName, _fnType, this.dataList);\r\n            }\r\n\r\n            if (/bp-bind:/ig.test(_attr.name)) {\r\n                let _bindKey   = _attr.name.split(':')[1];\r\n                let _bindValue = _attr.value;\r\n                this.bindBind(el, _bindValue, _bindKey);\r\n            }\r\n\r\n            if (_attr.name === 'bp-for') {\r\n                this.bindFor(el);\r\n            }\r\n\r\n            if (_attr.name === 'bp-show') {\r\n                this.bindShow(el);\r\n            }\r\n        }\r\n    };\r\n\r\n    static isHTMLCollection(obj) {\r\n        return Object.prototype.toString.call(obj) === '[object HTMLCollection]';\r\n    };\r\n\r\n    static isArray(arr) {\r\n        return Array.isArray(arr) || Object.prototype.toString.call(arr) === '[object Array]';\r\n    };\r\n\r\n    static isObject(obj) {\r\n        return Object.prototype.toString.call(obj) === '[object Object]';\r\n    };\r\n\r\n    static renderObjectValueByPath(obj, path, val) {\r\n        let _pathes = path.split('.');\r\n\r\n        if (typeof Ballpen.parseData(path, obj).data === 'undefined') {\r\n            throw new Error('[Ballpen] \"' + path + '\" is an invalid watch path.');\r\n        }\r\n\r\n        if (_pathes.length === 1) {\r\n            obj[_pathes[0]] = val;\r\n        } else {\r\n            for (let i = 0; i < _pathes.length - 1; i++) {\r\n                obj = obj[_pathes[i]];\r\n                if (!obj) {\r\n                    throw new Error('[Ballpen] \"' + path + '\" is an invalid watch path.');\r\n                }\r\n\r\n                if (i === _pathes.length - 2) {\r\n                    obj[_pathes[_pathes.length - 1]] = val;\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    static parseData(str, dataObj) {\r\n        const _list = str.split('.');\r\n        let _data = dataObj;\r\n        let p = [];\r\n\r\n        _list.forEach((key, index) => {\r\n            if (index === 0) {\r\n                _data = dataObj[key];\r\n                p.push(key);\r\n            } else {\r\n                _data = _data[key];\r\n                p.push(key);\r\n            }\r\n        });\r\n\r\n        return {\r\n            path: p,\r\n            data: _data\r\n        };\r\n    };\r\n\r\n    static ignoreInnerDirectives(directiveValue, exceptList, fn, ...args) {\r\n        exceptList.forEach((regexp) => {\r\n            if (regexp.test(directiveValue)) {\r\n                fn && fn.call(this, ...args);\r\n            }\r\n        });\r\n\r\n        if (!/^@/ig.test(directiveValue)) {\r\n            fn && fn.call(this, ...args);\r\n        }\r\n    };\r\n\r\n    static clone(obj) {\r\n        let copy;\r\n\r\n        if (obj === null || typeof obj !== 'object') return obj;\r\n\r\n        if (obj instanceof Date) {\r\n            copy = new Date();\r\n            copy.setTime(obj.getTime());\r\n            return copy;\r\n        }\r\n\r\n        if (obj instanceof Array) {\r\n            copy = [];\r\n            for (var i = 0, len = obj.length; i < len; i++) {\r\n                copy[i] = Ballpen.clone(obj[i]);\r\n            }\r\n            return copy;\r\n        }\r\n\r\n        if (obj instanceof Object) {\r\n            copy = {};\r\n            for (var attr in obj) {\r\n                if (obj.hasOwnProperty(attr)) copy[attr] = Ballpen.clone(obj[attr]);\r\n            }\r\n            return copy;\r\n        }\r\n\r\n        throw new Error('[Ballpen] Unable to copy object, type is not supported.');\r\n    };\r\n\r\n    bindShow(el) {\r\n        const modelName = el.getAttribute('bp-show');\r\n\r\n        Ballpen.ignoreInnerDirectives(modelName, [], (el) => {\r\n            const model = Ballpen.parseData(modelName, this.dataList);\r\n\r\n            const elStyle = el.style;\r\n \r\n            (!model.data ? elStyle.display = 'none' : (elStyle.removeProperty ? elStyle.removeProperty('display') : elStyle.removeAttribute('display')));\r\n\r\n            this.register(this.dataList, this.dataListPure, model.path, (yetVal, nowVal) => {\r\n                (!nowVal ? elStyle.display = 'none' : (elStyle.removeProperty ? elStyle.removeProperty('display') : elStyle.removeAttribute('display')));\r\n            });\r\n        }, el);\r\n    };\r\n\r\n    bindModel(el) {\r\n        const modelName = el.getAttribute('bp-model');\r\n\r\n        Ballpen.ignoreInnerDirectives(modelName, [/^@{([\\d]+)}$/ig], (el) => {\r\n            // Handel 'for' list index\r\n            if (/^@{([\\d]+)}$/ig.test(modelName)) {\r\n                let index = modelName.match(/^@{([\\d]+)}$/)[1];\r\n\r\n                (el.tagName === 'INPUT' ? el.value = index : el.innerText = index);\r\n            } else {\r\n                const model = Ballpen.parseData(modelName, this.dataList);\r\n\r\n                (el.tagName === 'INPUT' ? el.value = model.data : el.innerText = model.data);\r\n\r\n                this.register(this.dataList, this.dataListPure, model.path, (yetVal, nowVal) => {\r\n                    (el.tagName === 'INPUT' ? el.value = nowVal : el.innerText = nowVal);\r\n                });\r\n            }\r\n        }, el);\r\n    };\r\n\r\n    bindClass(el) {\r\n        const modelName = el.getAttribute('bp-class');\r\n\r\n        Ballpen.ignoreInnerDirectives(modelName, [], (el) => {\r\n            const model = Ballpen.parseData(modelName, this.dataList);\r\n\r\n            if (!el.classList.contains(model.data)) {\r\n                el.classList.add(model.data);\r\n            }\r\n\r\n            this.register(this.dataList, this.dataListPure, model.path, (yetVal, nowVal) => {\r\n                if (!el.classList.contains(nowVal)) {\r\n                    el.classList.add(nowVal);\r\n                }\r\n            });\r\n        }, el);\r\n    };\r\n\r\n    bindEvent(el, _fnName, _fnType, context, args = {}) {\r\n        Ballpen.ignoreInnerDirectives(_fnName, [], (el, _fnName, _fnType, context) => {\r\n            // Update global event list\r\n            this.eventList[_fnName]['type'] = _fnType;\r\n            \r\n            // Bind listener, set callback fn to global data context\r\n            el.addEventListener(_fnType, () => {\r\n                this.eventList[_fnName]['fn'].call(this.dataList, el, context, args);\r\n            });\r\n        }, el, _fnName, _fnType, context, args);\r\n    };\r\n\r\n    bindBind(el, _bindValue, _bindKey) {\r\n        Ballpen.ignoreInnerDirectives(_bindValue, [], (el, _bindValue, _bindKey) => {\r\n            const model = Ballpen.parseData(_bindValue, this.dataList);\r\n\r\n            // Set customized attribute\r\n            el.setAttribute(_bindKey, model.data);\r\n            \r\n            // Bind listener, set callback fn to global data context\r\n            this.register(this.dataList, this.dataListPure, model.path, (yetVal, nowVal) => {\r\n                el.setAttribute(_bindKey, nowVal);\r\n            });\r\n        }, el, _bindValue, _bindKey);\r\n    };\r\n\r\n    bindFor(el) {\r\n        const modelName = el.getAttribute('bp-for');\r\n        const model = Ballpen.parseData(modelName, this.dataList);\r\n\r\n        let parentNode = el.parentNode;\r\n        let virtualDiv = document.createDocumentFragment();\r\n\r\n        for (let i = 0; i < model.data.length; i++) {\r\n            let div = el.cloneNode(true);\r\n            let _dataPath = `${modelName}.${i}`;\r\n\r\n            div.removeAttribute('bp-for');\r\n\r\n            virtualDiv.appendChild(this.bindForItems(div, _dataPath, i));\r\n        }\r\n\r\n        parentNode.appendChild(virtualDiv);\r\n\r\n        // Set register\r\n        this.register(this.dataList, this.dataListPure, model.path, (yetVal, nowVal) => {\r\n            let virtualDiv = document.createDocumentFragment();\r\n\r\n            for (let i = 0; i < nowVal.length; i++) {\r\n                let div = el.cloneNode(true);\r\n                let _dataPath = `${modelName}.${i}`;\r\n\r\n                virtualDiv.appendChild(this.bindForItems(div, _dataPath, i));\r\n            }\r\n\r\n            while (parentNode.firstChild) {\r\n                parentNode.removeChild(parentNode.firstChild);\r\n            }\r\n\r\n            parentNode.appendChild(virtualDiv);\r\n        });\r\n\r\n        this.removedChildNodes.push(el);\r\n    };\r\n\r\n    bindForItemsRecursion(el, data, itemIndex) {\r\n        let child = !!Ballpen.isHTMLCollection(el);\r\n\r\n        for (let j = 0; j < (child ? el.length : 1); j++) {\r\n            const _thisNode = (child ? el[j] : el);\r\n\r\n            if (!_thisNode.hasAttributes() && child) {\r\n                continue;\r\n            }\r\n\r\n            // Bind normal render tag\r\n            let _attrsMain = _thisNode.attributes;\r\n            \r\n            for (let i = 0; i < _attrsMain.length; i++) {\r\n                const _attr = _attrsMain.item(i);\r\n\r\n                if (_attr.name === 'bp-class') {\r\n                    let _thisSubModel = _thisNode.getAttribute('bp-class');\r\n                    let _thisSubModelAbs = _thisSubModel;\r\n\r\n                    if (/^@\\./ig.test(_thisSubModel)) {\r\n                        let _subModel = _thisSubModel.split('.')[1];\r\n                        _thisSubModelAbs = data + `.${_subModel}`;\r\n                    } else if (/^@$/ig.test(_thisSubModel)) {\r\n                        _thisSubModelAbs = data;\r\n                    } \r\n\r\n                    if (_thisSubModelAbs !== _thisSubModel) {\r\n                        _thisNode.setAttribute('bp-class', _thisSubModelAbs);\r\n                    }\r\n\r\n                    this.bindClass(_thisNode);\r\n                }\r\n\r\n                if (/bp-event:/ig.test(_attr.name)) {\r\n                    let _fnType = _attr.name.split(':')[1];\r\n                    let _fnName = _attr.value;\r\n\r\n                    if (/^@:/ig.test(_fnName)) {\r\n                        this.bindEvent(_thisNode, _fnName.split(':')[1], _fnType, this.dataList, {\r\n                            index: itemIndex\r\n                        });\r\n                    }\r\n                }\r\n\r\n                if (_attr.name === 'bp-model') {\r\n                    let _thisSubModel = _thisNode.getAttribute('bp-model');\r\n                    let _thisSubModelAbs = _thisSubModel;\r\n\r\n                    if (/^@\\./ig.test(_thisSubModel)) {\r\n                        let _subModel = _thisSubModel.split('.')[1];\r\n                        _thisSubModelAbs = data + `.${_subModel}`;\r\n                    } else if (/^@$/ig.test(_thisSubModel)) {\r\n                        _thisSubModelAbs = data;\r\n                    } else if (/^@{index}$/ig.test(_thisSubModel)) {\r\n                        _thisSubModelAbs = `@{${itemIndex}}`;\r\n                    }\r\n\r\n                    if (_thisSubModelAbs !== _thisSubModel) {\r\n                        _thisNode.setAttribute('bp-model', _thisSubModelAbs);\r\n                    }\r\n\r\n                    this.bindModel(_thisNode);\r\n                }\r\n\r\n                if (_attr.name === 'bp-show') {\r\n                    let _thisSubModel = _thisNode.getAttribute('bp-show');\r\n                    let _thisSubModelAbs = _thisSubModel;\r\n\r\n                    if (/^@\\./ig.test(_thisSubModel)) {\r\n                        let _subModel = _thisSubModel.split('.')[1];\r\n                        _thisSubModelAbs = data + `.${_subModel}`;\r\n                    } else if (/^@$/ig.test(_thisSubModel)) {\r\n                        _thisSubModelAbs = data;\r\n                    } \r\n\r\n                    if (_thisSubModelAbs !== _thisSubModel) {\r\n                        _thisNode.setAttribute('bp-show', _thisSubModelAbs);\r\n                    }\r\n\r\n                    this.bindShow(_thisNode);\r\n                }\r\n\r\n                // Render 'for' list in another 'for' had not been implemented yet\r\n            }\r\n\r\n            if (_thisNode.children.length > 0) {\r\n                this.bindForItemsRecursion(_thisNode.children, data, itemIndex);\r\n            }\r\n        }\r\n    };\r\n\r\n    bindForItems(el, data, itemIndex) {\r\n        this.bindForItemsRecursion(el, data, itemIndex);\r\n        return el;\r\n    };\r\n\r\n    observePath(obj, rootPath, paths, fns) {\r\n        if (Ballpen.isArray(paths)) {\r\n            let _path = obj;\r\n            let _key;\r\n\r\n            paths.forEach((key, index) => {\r\n                if (/^\\d+$/.test(key)) {\r\n                    key = parseInt(key);\r\n                }\r\n\r\n                if (index < paths.length - 1) {\r\n                    _path = _path[key];\r\n                } else {    \r\n                    _key = key;\r\n                }\r\n            });\r\n\r\n            rootPath = paths.join('.');\r\n\r\n            this.observeKey(_path, rootPath, _key, fns);\r\n        }\r\n    };\r\n\r\n    observeKey(obj, rootPath, key, fns = false) {            \r\n        if (Ballpen.isArray(key)) {\r\n            this.observePath(obj, rootPath, key, fns);\r\n        } else {\r\n            let yetVal = obj[key];\r\n            const currentPath = rootPath;\r\n           \r\n            if (Ballpen.isObject(yetVal)) {\r\n                Object.defineProperty(obj, key, {\r\n                    get: () => {\r\n                        return yetVal;\r\n                    },\r\n                    set: (nowVal) => {  \r\n                        if (nowVal !== yetVal) {\r\n                            fns && fns.forEach((fn) => {\r\n                                fn.call(this, yetVal, nowVal);\r\n                            });\r\n\r\n                            yetVal = nowVal;\r\n\r\n                            Ballpen.renderObjectValueByPath(this.dataListPure, currentPath, nowVal);\r\n                        }\r\n                    },\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n\r\n                Object.keys(yetVal).forEach((key) => {\r\n                    this.observeKey(yetVal, currentPath + '.' + key, key, fns);\r\n                });\r\n            } else if (Ballpen.isArray(yetVal)) {\r\n                Object.defineProperty(obj, key, {\r\n                    get: () => {\r\n                        return yetVal;\r\n                    },\r\n                    set: (nowVal) => {  \r\n                        if (nowVal !== yetVal) {\r\n                            fns && fns.forEach((fn) => {\r\n                                fn.call(this, yetVal, nowVal);\r\n                            });\r\n\r\n                            yetVal = nowVal;\r\n\r\n                            Ballpen.renderObjectValueByPath(this.dataListPure, currentPath, nowVal);\r\n                        }\r\n                    },\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n\r\n                this.observeArray(yetVal, currentPath, fns);\r\n            } else {\r\n                Object.defineProperty(obj, key, {\r\n                    get: () => {\r\n                        return yetVal;\r\n                    },\r\n                    set: (nowVal) => {  \r\n                        if (nowVal !== yetVal) {\r\n                            fns && fns.forEach((fn) => {\r\n                                fn.call(this, yetVal, nowVal);\r\n                            });\r\n\r\n                            yetVal = nowVal;\r\n\r\n                            Ballpen.renderObjectValueByPath(this.dataListPure, currentPath, nowVal);\r\n                        }\r\n                    },\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n            }\r\n        }\r\n    };\r\n    \r\n    observeArray(arr, rootPath, fns = false) {\r\n        const mutatorMethods = ['copyWithin', 'fill', 'pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'];\r\n        const arrayProto = Array.prototype;\r\n\r\n        // Prevent from polluting the global 'Array.prototype'\r\n        const hijackProto = Object.create(arrayProto);\r\n\r\n        const currentPath = rootPath;\r\n\r\n        mutatorMethods.forEach((method) => {\r\n            Object.defineProperty(hijackProto, method, {\r\n                enumerable: true,\r\n                configurable: true,\r\n                writable: true,\r\n                value: (...args) => {\r\n                    let yetVal = arr.slice();\r\n                    let resultVal = arrayProto[method].call(arr, ...args);\r\n                    let nowVal = arr;\r\n\r\n                    Ballpen.renderObjectValueByPath(this.dataListPure, currentPath, nowVal);\r\n                    // Callback\r\n                    fns && fns.forEach((fn) => {\r\n                        fn.call(this, yetVal, nowVal);\r\n                    }); \r\n\r\n                    return resultVal;\r\n                } \r\n            });\r\n        });\r\n        /* eslint-disable */\r\n        arr.__proto__ = hijackProto;\r\n        // arr.__proto__.__proto__ === Array.prototype; // true\r\n    };\r\n\r\n    register(obj, objPure, key, fn) {\r\n        const register = this.registers.find((item) => {\r\n            if (Object.is(item.obj, obj) && (item.key === key || item.key.toString() === key.toString())) {\r\n                return item;\r\n            }\r\n        });\r\n\r\n        if (register) {\r\n            register.fns.push(fn);\r\n        } else {\r\n            this.registers.push({\r\n                obj: obj,\r\n                rootPath: [],\r\n                key: key,\r\n                fns: [fn]\r\n            });\r\n        }\r\n    };\r\n\r\n    attach() {\r\n        this.registers.forEach((register) => {\r\n            this.observeKey(register.obj, register.rootPath, register.key, register.fns);\r\n        });\r\n    };\r\n\r\n}\r\n\r\nexport default Ballpen;\r\n"],"names":["Ballpen","el","dataModel","init","scan","this","document","querySelector","style","display","Error","event","eventList","initEventList","data","dataListPure","dataList","clone","modelList","watchers","watchersHook","Map","_watchers","watcher","_dataPath","_dataHook","handler","set","forEach","watcherFn","path","renderObjectValueByPath","_this","setProxy","parseData","registers","removedChildNodes","fnSet","fnGet","target","property","call","_this2","value","receiver","realProperty","test","substring","prop","descriptor","Reflect","defineProperty","Proxy","_thisEventObject","item","type","fn","i","children","length","_thisNode","innerHTML","bind","update","attach","removeProperty","removeAttribute","node","remove","hasAttributes","_attrs","attributes","_attr","name","bindModel","bindClass","_fnType","split","_fnName","bindEvent","_bindKey","_bindValue","bindBind","bindFor","bindShow","modelName","getAttribute","ignoreInnerDirectives","model","_this3","elStyle","register","yetVal","nowVal","index","match","tagName","innerText","_this4","_this5","classList","contains","add","context","args","addEventListener","_this6","_this7","setAttribute","parentNode","virtualDiv","createDocumentFragment","div","cloneNode","appendChild","bindForItems","_this8","firstChild","removeChild","push","itemIndex","child","isHTMLCollection","j","_attrsMain","_thisSubModel","_thisSubModelAbs","_subModel","bindForItemsRecursion","obj","rootPath","paths","fns","isArray","_path","_key","key","parseInt","join","observeKey","observePath","currentPath","isObject","_this10","keys","observeArray","arr","mutatorMethods","arrayProto","Array","prototype","hijackProto","Object","create","method","slice","resultVal","_this11","__proto__","objPure","find","is","toString","val","_pathes","str","dataObj","_list","_data","p","directiveValue","exceptList","regexp","copy","Date","setTime","getTime","len","attr","hasOwnProperty"],"mappings":"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"}