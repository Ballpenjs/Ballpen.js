{"version":3,"file":"ballpen.min.js","sources":["../src/ballpen.js"],"sourcesContent":["class Ballpen {\r\n\r\n    constructor(el, dataModel) { \r\n        // Init EventList\r\n        this.init(el, dataModel);\r\n        // Scan directives\r\n        this.scan(this.el);\r\n    };\r\n\r\n    init(el, dataModel) {\r\n        this.el = document.querySelector(el);\r\n\r\n        // Handle invalid root element\r\n        if (!this.el) {\r\n            throw new Error('[Ballpen] Invalid root element!');    \r\n        }\r\n\r\n        this.dataModel = dataModel;\r\n\r\n        if (dataModel.event) {\r\n            this.eventList = {};\r\n            this.initEventList(dataModel.event);\r\n        }\r\n\r\n        if (dataModel.data) {\r\n            this.dataList = dataModel.data;\r\n            this.modelList = {};\r\n        }\r\n\r\n        if (dataModel.watchers) {\r\n            this.watchersHook = [];\r\n\r\n            let _watchers = dataModel.watchers;\r\n\r\n            for (let watcher in _watchers) {\r\n                const _dataPath = watcher;\r\n                const _dataHook = _watchers[watcher];\r\n\r\n                this.watchersHook.push({\r\n                    _dataPath, _dataHook\r\n                });\r\n            }\r\n        }\r\n\r\n        // Other initializations\r\n        this.registers = [];\r\n        this.removedChildNodes = [];\r\n    };\r\n\r\n    initEventList(eventList) {\r\n        if (eventList) {\r\n            let _thisEventObject = eventList;\r\n            for (let item in _thisEventObject) {\r\n                this.eventList[item]      = {};\r\n                this.eventList[item].type = '';\r\n                this.eventList[item].fn   = _thisEventObject[item];\r\n            }\r\n        }\r\n    };\r\n\r\n    scan(el, init = true) {\r\n        for (let i = 0; i < el.children.length; i++) {\r\n            let _thisNode = el.children[i];\r\n            let innerText = el.innerHTML;\r\n     \r\n            // Bind\r\n            this.bind(_thisNode);\r\n\r\n            // Recursion\r\n            if (_thisNode.children.length > 0) {\r\n                this.scan(_thisNode, false);\r\n            }\r\n        }\r\n\r\n        if (init) {\r\n            // Update view\r\n            this.update();\r\n            // Attach observers\r\n            this.attach();\r\n        }   \r\n    };\r\n\r\n    update() {\r\n        this.removedChildNodes.forEach((node) => {\r\n            node.remove();\r\n        });\r\n    }\r\n\r\n    bind(el) {\r\n        if (!el.hasAttributes()) {\r\n            return;\r\n        }\r\n\r\n        let _attrs = el.attributes;\r\n\r\n        for (let i = 0; i < _attrs.length; i++) {\r\n            const _attr = _attrs.item(i);\r\n\r\n            if (_attr.name === 'bp-model') {\r\n                this.bindModel(el);\r\n            }\r\n\r\n            if (_attr.name === 'bp-class') {\r\n                this.bindClass(el);\r\n            }\r\n\r\n            if (/bp-event:/ig.test(_attr.name)) {\r\n                let _fnType = _attr.name.split(':')[1];\r\n                let _fnName = _attr.value;\r\n                this.bindEvent(el, _fnName, _fnType, this.dataList);\r\n            }\r\n\r\n            if (/bp-bind:/ig.test(_attr.name)) {\r\n                let _bindKey   = _attr.name.split(':')[1];\r\n                let _bindValue = _attr.value;\r\n                this.bindBind(el, _bindValue, _bindKey);\r\n            }\r\n\r\n            if (_attr.name === 'bp-for') {\r\n                this.bindFor(el);\r\n            }\r\n\r\n            if (_attr.name === 'bp-show') {\r\n                this.bindShow(el);\r\n            }\r\n        }\r\n    };\r\n\r\n    static isHTMLCollection(obj) {\r\n        return Object.prototype.toString.call(obj) === '[object HTMLCollection]';\r\n    };\r\n\r\n    static isArray(arr) {\r\n        return Array.isArray(arr) || Object.prototype.toString.call(arr) === '[object Array]';\r\n    };\r\n\r\n    static isObject(obj) {\r\n        return Object.prototype.toString.call(obj) === '[object Object]';\r\n    };\r\n\r\n    static parseData(str, dataObj) {\r\n        const _list = str.split('.');\r\n        let _data;\r\n        let p = [];\r\n\r\n        _list.forEach((key, index) => {\r\n            if (index === 0) {\r\n                _data = dataObj[key];\r\n                p.push(key);\r\n            } else {\r\n                _data = _data[key];\r\n                p.push(key);\r\n            }\r\n        });\r\n\r\n        return {\r\n            path: p,\r\n            data: _data\r\n        };\r\n    };\r\n\r\n    static ignoreInnerDirectives(directiveValue, exceptList, fn, ...args) {\r\n        exceptList.forEach((regexp) => {\r\n            if (regexp.test(directiveValue)) {\r\n                fn && fn.call(this, ...args);\r\n            }\r\n        });\r\n\r\n        if (!/^@/ig.test(directiveValue)) {\r\n            fn && fn.call(this, ...args);\r\n        }\r\n    }\r\n\r\n    bindShow(el) {\r\n        const modelName = el.getAttribute('bp-show');\r\n\r\n        Ballpen.ignoreInnerDirectives(modelName, [], (el) => {\r\n            const model = Ballpen.parseData(modelName, this.dataList);\r\n\r\n            const elStyle = el.style;\r\n \r\n            (!model.data ? elStyle.display = 'none' : (elStyle.removeProperty ? elStyle.removeProperty('display') : elStyle.removeAttribute('display')));\r\n\r\n            this.register(this.dataList, model.path, (yetVal, nowVal) => {\r\n                (!nowVal ? elStyle.display = 'none' : (elStyle.removeProperty ? elStyle.removeProperty('display') : elStyle.removeAttribute('display')));\r\n            });\r\n        }, el);\r\n    };\r\n\r\n    bindModel(el) {\r\n        const modelName = el.getAttribute('bp-model');\r\n\r\n        Ballpen.ignoreInnerDirectives(modelName, [/^@{([\\d]+)}$/ig], (el) => {\r\n            // Handel 'for' list index\r\n            if (/^@{([\\d]+)}$/ig.test(modelName)) {\r\n                let index = modelName.match(/^@{([\\d]+)}$/)[1];\r\n\r\n                (el.tagName === 'INPUT' ? el.value = index : el.innerText = index);\r\n            } else {\r\n                const model = Ballpen.parseData(modelName, this.dataList);\r\n\r\n                (el.tagName === 'INPUT' ? el.value = model.data : el.innerText = model.data);\r\n\r\n                this.register(this.dataList, model.path, (yetVal, nowVal) => {\r\n                    (el.tagName === 'INPUT' ? el.value = nowVal : el.innerText = nowVal);\r\n                });\r\n            }\r\n        }, el);\r\n    };\r\n\r\n    bindClass(el) {\r\n        const modelName = el.getAttribute('bp-class');\r\n\r\n        Ballpen.ignoreInnerDirectives(modelName, [], (el) => {\r\n            const model = Ballpen.parseData(modelName, this.dataList);\r\n\r\n            if (!el.classList.contains(model.data)) {\r\n                el.classList.add(model.data);\r\n            }\r\n\r\n            this.register(this.dataList, model.path, (yetVal, nowVal) => {\r\n                if (!el.classList.contains(nowVal)) {\r\n                    el.classList.add(nowVal);\r\n                }\r\n            });\r\n        }, el);\r\n    };\r\n\r\n    bindEvent(el, _fnName, _fnType, context) {\r\n        Ballpen.ignoreInnerDirectives(_fnName, [], (el, _fnName, _fnType, context) => {\r\n            // Update global event list\r\n            this.eventList[_fnName]['type'] = _fnType;\r\n            \r\n            // Bind listener, set callback fn to global data context\r\n            el.addEventListener(_fnType, () => {\r\n                this.eventList[_fnName]['fn'].call(this.dataList, el, context);\r\n            });\r\n        }, el, _fnName, _fnType, context);\r\n    };\r\n\r\n    bindBind(el, _bindValue, _bindKey) {\r\n        Ballpen.ignoreInnerDirectives(_bindValue, [], (el, _bindValue, _bindKey) => {\r\n            const model = Ballpen.parseData(_bindValue, this.dataList);\r\n\r\n            // Set customized attribute\r\n            el.setAttribute(_bindKey, model.data);\r\n            \r\n            // Bind listener, set callback fn to global data context\r\n            this.register(this.dataList, model.path, (yetVal, nowVal) => {\r\n                el.setAttribute(_bindKey, nowVal);\r\n            });\r\n        }, el, _bindValue, _bindKey);\r\n    }\r\n\r\n    bindFor(el) {\r\n        const modelName = el.getAttribute('bp-for');\r\n        const model = Ballpen.parseData(modelName, this.dataList);\r\n\r\n        let parentNode = el.parentNode;\r\n        let virtualDiv = document.createDocumentFragment();\r\n\r\n        for (let i = 0; i < model.data.length; i++) {\r\n            let div = el.cloneNode(true);\r\n            let _dataPath = `${modelName}.${i}`;\r\n\r\n            div.removeAttribute('bp-for');\r\n\r\n            virtualDiv.appendChild(this.bindForItems(div, _dataPath, i));\r\n        }\r\n\r\n        parentNode.appendChild(virtualDiv);\r\n\r\n        // Set register\r\n        this.register(this.dataList, model.path, (yetVal, nowVal) => {\r\n            let virtualDiv = document.createDocumentFragment();\r\n\r\n            for (let i = 0; i < nowVal.length; i++) {\r\n                let div = el.cloneNode(true);\r\n                let _dataPath = `${modelName}.${i}`;\r\n\r\n                virtualDiv.appendChild(this.bindForItems(div, _dataPath, i));\r\n            }\r\n\r\n            while (parentNode.firstChild) {\r\n                parentNode.removeChild(parentNode.firstChild);\r\n            }\r\n\r\n            parentNode.appendChild(virtualDiv);\r\n        });\r\n\r\n        this.removedChildNodes.push(el);\r\n    };\r\n\r\n    bindForItemsRecursion(el, data, itemIndex) {\r\n        let child = true;\r\n\r\n        if (!Ballpen.isHTMLCollection(el)) {\r\n            child = false;\r\n        }\r\n\r\n        for (let j = 0; j < (child ? el.length : 1); j++) {\r\n            const _thisNode = (child ? el[j] : el);\r\n\r\n            if (!_thisNode.hasAttributes() && child) {\r\n                continue;\r\n            }\r\n\r\n            // Bind normal render tag\r\n            let _attrsMain = _thisNode.attributes;\r\n            \r\n            for (let i = 0; i < _attrsMain.length; i++) {\r\n                const _attr = _attrsMain.item(i);\r\n\r\n                if (_attr.name === 'bp-class') {\r\n                    let _thisSubModel = _thisNode.getAttribute('bp-class');\r\n                    let _thisSubModelAbs = _thisSubModel;\r\n\r\n                    if (/^@\\./ig.test(_thisSubModel)) {\r\n                        let _subModel = _thisSubModel.split('.')[1];\r\n                        _thisSubModelAbs = data + `.${_subModel}`;\r\n                    } else if (/^@$/ig.test(_thisSubModel)) {\r\n                        _thisSubModelAbs = data;\r\n                    } \r\n\r\n                    if (_thisSubModelAbs !== _thisSubModel) {\r\n                        _thisNode.setAttribute('bp-class', _thisSubModelAbs);\r\n                    }\r\n\r\n                    this.bindClass(_thisNode);\r\n                }\r\n\r\n                if (/bp-event:/ig.test(_attr.name)) {\r\n                    let _fnType = _attr.name.split(':')[1];\r\n                    let _fnName = _attr.value;\r\n\r\n                    if (/^@:/ig.test(_fnName)) {\r\n                        this.bindEvent(_thisNode, _fnName.split(':')[1], _fnType, Ballpen.parseData(data, this.dataList).data);\r\n                    }\r\n                }\r\n\r\n                if (_attr.name === 'bp-model') {\r\n                    let _thisSubModel = _thisNode.getAttribute('bp-model');\r\n                    let _thisSubModelAbs = _thisSubModel;\r\n\r\n                    if (/^@\\./ig.test(_thisSubModel)) {\r\n                        let _subModel = _thisSubModel.split('.')[1];\r\n                        _thisSubModelAbs = data + `.${_subModel}`;\r\n                    } else if (/^@$/ig.test(_thisSubModel)) {\r\n                        _thisSubModelAbs = data;\r\n                    } else if (/^@{index}$/ig.test(_thisSubModel)) {\r\n                        _thisSubModelAbs = `@{${itemIndex}}`;\r\n                    }\r\n\r\n                    if (_thisSubModelAbs !== _thisSubModel) {\r\n                        _thisNode.setAttribute('bp-model', _thisSubModelAbs);\r\n                    }\r\n\r\n                    this.bindModel(_thisNode);\r\n                }\r\n\r\n                if (_attr.name === 'bp-show') {\r\n                    let _thisSubModel = _thisNode.getAttribute('bp-show');\r\n                    let _thisSubModelAbs = _thisSubModel;\r\n\r\n                    if (/^@\\./ig.test(_thisSubModel)) {\r\n                        let _subModel = _thisSubModel.split('.')[1];\r\n                        _thisSubModelAbs = data + `.${_subModel}`;\r\n                    } else if (/^@$/ig.test(_thisSubModel)) {\r\n                        _thisSubModelAbs = data;\r\n                    } \r\n\r\n                    if (_thisSubModelAbs !== _thisSubModel) {\r\n                        _thisNode.setAttribute('bp-show', _thisSubModelAbs);\r\n                    }\r\n\r\n                    this.bindShow(_thisNode);\r\n                }\r\n\r\n                // Render 'for' list in another 'for' had not been implemented yet\r\n            }\r\n\r\n            if (_thisNode.children.length > 0) {\r\n                this.bindForItemsRecursion(_thisNode.children, data, itemIndex);\r\n            }\r\n        }\r\n    };\r\n\r\n    bindForItems(el, data, itemIndex) {\r\n        this.bindForItemsRecursion(el, data, itemIndex);\r\n        return el;\r\n    };\r\n\r\n    observePath(obj, paths, fns, deep = false) {\r\n        if (Ballpen.isArray(paths)) {\r\n            let _path = obj;\r\n            let _key;\r\n\r\n            paths.forEach((key, index) => {\r\n                if (/^\\d+$/.test(key)) {\r\n                    key = parseInt(key);\r\n                }\r\n\r\n                if (index < paths.length - 1) {\r\n                    _path = _path[key];\r\n                } else {    \r\n                    _key = key;\r\n                }\r\n            });\r\n\r\n            this.observeKey(_path, _key, fns, deep);\r\n        }\r\n    };\r\n\r\n    observeKey(obj, key, fns = false, deep = false) {\r\n        if (Ballpen.isArray(key)) {\r\n            this.observePath(obj, key, fns, deep);\r\n        } else {\r\n            let yetVal = obj[key];\r\n            if (Ballpen.isObject(yetVal)) {\r\n                Object.defineProperty(obj, key, {\r\n                    get: () => {\r\n                        return yetVal;\r\n                    },\r\n                    set: (nowVal) => {  \r\n                        if (nowVal !== yetVal) {\r\n                            fns && fns.forEach((fn) => {\r\n                                fn.call(this, yetVal, nowVal);\r\n                            });\r\n                        }\r\n\r\n                        yetVal = nowVal;\r\n                    },\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n\r\n                Object.keys(yetVal).forEach((key) => {\r\n                    this.observeKey(yetVal, key, fns, deep);\r\n                });\r\n            } else if (Ballpen.isArray(yetVal)) {\r\n                this.observeArray(yetVal, fns, deep);\r\n            } else {\r\n                Object.defineProperty(obj, key, {\r\n                    get: () => {\r\n                        return yetVal;\r\n                    },\r\n                    set: (nowVal) => {  \r\n                        if (nowVal !== yetVal) {\r\n                            fns && fns.forEach((fn) => {\r\n                                fn.call(this, yetVal, nowVal);\r\n                            });\r\n                        }\r\n\r\n                        yetVal = nowVal;\r\n                    },\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n            }\r\n        }\r\n    };\r\n    \r\n    observeArray(arr, fns = false, deep = false) {\r\n        const mutatorMethods = ['copyWithin', 'fill', 'pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'];\r\n        const arrayProto = Array.prototype;\r\n\r\n        // Prevent from polluting the global 'Array.prototype'\r\n        const hijackProto = Object.create(arrayProto);\r\n\r\n        mutatorMethods.forEach((method) => {\r\n            Object.defineProperty(hijackProto, method, {\r\n                enumerable: true,\r\n                configurable: true,\r\n                writable: true,\r\n                value: (...args) => {\r\n                    let yetVal = arr.slice();\r\n                    let resultVal = arrayProto[method].call(arr, ...args);\r\n                    let nowVal = arr;\r\n                    // Callback\r\n                    fns && fns.forEach((fn) => {\r\n                        fn.call(this, yetVal, nowVal);\r\n                    }); \r\n\r\n                    return resultVal;\r\n                } \r\n            });\r\n        });\r\n        /* eslint-disable */\r\n        arr.__proto__ = hijackProto;\r\n        // arr.__proto__.__proto__ === Array.prototype; // true\r\n\r\n        if (deep) {\r\n            arr.forEach((item, index, arr) => {\r\n                this.observeKey(arr, index, fns, true);\r\n            });\r\n        }\r\n    };\r\n\r\n    // key: [\"todoList\", 2]\r\n    register(obj, key, fn, deep = false) {\r\n        const register = this.registers.find((item) => {\r\n            if (Object.is(item.obj, obj) && (item.key === key || item.key.toString() === key.toString())) {\r\n                return item;\r\n            }\r\n        });\r\n\r\n        if (register) {\r\n            register.fns.push(fn);\r\n        } else {\r\n            this.registers.push({\r\n                obj: obj,\r\n                key: key,\r\n                fns: [fn],\r\n                deep: deep\r\n            });\r\n        }\r\n    };\r\n\r\n    attach() {\r\n        this.watchersHook.forEach((watcher) => {\r\n            let model = Ballpen.parseData(watcher._dataPath, this.dataList);\r\n            // Bind watchers\r\n            this.register(this.dataList, model.path, (...args) => {\r\n                watcher._dataHook.call(this, ...args);\r\n            }, {\r\n                root: model.path.join('.')\r\n            });\r\n        });\r\n\r\n        this.registers.forEach((register) => {\r\n            this.observeKey(register.obj, register.key, register.fns, register.deep);\r\n        });\r\n    };\r\n\r\n}\r\n\r\nexport default Ballpen;\r\n"],"names":["Ballpen","el","dataModel","init","scan","this","document","querySelector","Error","event","eventList","initEventList","data","dataList","modelList","watchers","watchersHook","_watchers","watcher","_dataPath","_dataHook","push","registers","removedChildNodes","_thisEventObject","item","type","fn","i","children","length","_thisNode","innerHTML","bind","update","attach","forEach","node","remove","hasAttributes","_attrs","attributes","_attr","name","bindModel","bindClass","test","_fnType","split","_fnName","value","bindEvent","_bindKey","_bindValue","bindBind","bindFor","bindShow","modelName","getAttribute","ignoreInnerDirectives","model","parseData","_this","elStyle","style","removeProperty","removeAttribute","display","register","path","yetVal","nowVal","index","match","tagName","innerText","_this2","_this3","classList","contains","add","context","addEventListener","call","_this4","_this5","setAttribute","parentNode","virtualDiv","createDocumentFragment","div","cloneNode","appendChild","bindForItems","_this6","firstChild","removeChild","itemIndex","child","isHTMLCollection","j","_attrsMain","_thisSubModel","_thisSubModelAbs","_subModel","bindForItemsRecursion","obj","paths","fns","deep","isArray","_path","_key","key","parseInt","observeKey","observePath","isObject","defineProperty","keys","observeArray","arr","mutatorMethods","arrayProto","Array","prototype","hijackProto","Object","create","method","args","slice","resultVal","__proto__","find","is","toString","_this10","join","str","dataObj","_list","_data","p","directiveValue","exceptList","regexp"],"mappings":"0gBAAMA,wBAEUC,EAAIC,kBAEPC,KAAKF,EAAIC,QAETE,KAAKC,KAAKJ,2CAGdA,EAAIC,WACAD,GAAKK,SAASC,cAAcN,IAG5BI,KAAKJ,QACA,IAAIO,OAAM,2CAGfN,UAAYA,EAEbA,EAAUO,aACLC,kBACAC,cAAcT,EAAUO,QAG7BP,EAAUU,YACLC,SAAWX,EAAUU,UACrBE,cAGLZ,EAAUa,SAAU,MACfC,mBAEDC,GAAYf,EAAUa,aAErB,GAAIG,KAAWD,GAAW,IACrBE,GAAYD,EACZE,EAAYH,EAAUC,QAEvBF,aAAaK,kBACHD,oBAMlBE,kBACAC,2DAGKb,MACNA,EAAW,IACPc,GAAmBd,MAClB,GAAIe,KAAQD,QACRd,UAAUe,WACVf,UAAUe,GAAMC,KAAO,QACvBhB,UAAUe,GAAME,GAAOH,EAAiBC,iCAKpDxB,OACI,GADAE,8DACIyB,EAAI,EAAGA,EAAI3B,EAAG4B,SAASC,OAAQF,IAAK,IACrCG,GAAY9B,EAAG4B,SAASD,EACZ3B,GAAG+B,eAGdC,KAAKF,GAGNA,EAAUF,SAASC,OAAS,QACvB1B,KAAK2B,GAAW,GAIzB5B,SAEK+B,cAEAC,gDAKJZ,kBAAkBa,QAAQ,SAACC,KACvBC,wCAIRrC,MACIA,EAAGsC,oBAMH,GAFDC,GAASvC,EAAGwC,WAEPb,EAAI,EAAGA,EAAIY,EAAOV,OAAQF,IAAK,IAC9Bc,GAAQF,EAAOf,KAAKG,MAEP,aAAfc,EAAMC,WACDC,UAAU3C,GAGA,aAAfyC,EAAMC,WACDE,UAAU5C,GAGf,cAAc6C,KAAKJ,EAAMC,MAAO,IAC5BI,GAAUL,EAAMC,KAAKK,MAAM,KAAK,GAChCC,EAAUP,EAAMQ,WACfC,UAAUlD,EAAIgD,EAASF,EAAS1C,KAAKQ,aAG1C,aAAaiC,KAAKJ,EAAMC,MAAO,IAC3BS,GAAaV,EAAMC,KAAKK,MAAM,KAAK,GACnCK,EAAaX,EAAMQ,WAClBI,SAASrD,EAAIoD,EAAYD,GAGf,WAAfV,EAAMC,WACDY,QAAQtD,GAGE,YAAfyC,EAAMC,WACDa,SAASvD,qCAkDjBA,cACCwD,EAAYxD,EAAGyD,aAAa,aAE1BC,sBAAsBF,KAAe,SAACxD,MACpC2D,GAAQ5D,EAAQ6D,UAAUJ,EAAWK,EAAKjD,UAE1CkD,EAAU9D,EAAG+D,KAEjBJ,GAAMhD,KAAmCmD,EAAQE,eAAiBF,EAAQE,eAAe,WAAaF,EAAQG,gBAAgB,WAAjHH,EAAQI,QAAU,SAE5BC,SAASN,EAAKjD,SAAU+C,EAAMS,KAAM,SAACC,EAAQC,GAC5CA,EAAqCR,EAAQE,eAAiBF,EAAQE,eAAe,WAAaF,EAAQG,gBAAgB,WAAjHH,EAAQI,QAAU,UAElClE,qCAGGA,cACAwD,EAAYxD,EAAGyD,aAAa,cAE1BC,sBAAsBF,GAAY,kBAAmB,SAACxD,MAEtD,iBAAiB6C,KAAKW,GAAY,IAC9Be,GAAQf,EAAUgB,MAAM,gBAAgB,EAE5B,aAAZC,QAAsBzE,EAAGiD,MAAQsB,EAAQvE,EAAG0E,UAAYH,MACzD,IACGZ,GAAQ5D,EAAQ6D,UAAUJ,EAAWmB,EAAK/D,SAEhC,aAAZ6D,QAAsBzE,EAAGiD,MAAQU,EAAMhD,KAAOX,EAAG0E,UAAYf,EAAMhD,OAElEwD,SAASQ,EAAK/D,SAAU+C,EAAMS,KAAM,SAACC,EAAQC,GAC9B,YAAZG,QAAsBzE,EAAGiD,MAAQqB,EAAStE,EAAG0E,UAAYJ,MAGtEtE,qCAGGA,cACAwD,EAAYxD,EAAGyD,aAAa,cAE1BC,sBAAsBF,KAAe,SAACxD,MACpC2D,GAAQ5D,EAAQ6D,UAAUJ,EAAWoB,EAAKhE,SAE3CZ,GAAG6E,UAAUC,SAASnB,EAAMhD,SAC1BkE,UAAUE,IAAIpB,EAAMhD,QAGtBwD,SAASS,EAAKhE,SAAU+C,EAAMS,KAAM,SAACC,EAAQC,GACzCtE,EAAG6E,UAAUC,SAASR,MACpBO,UAAUE,IAAIT,MAG1BtE,qCAGGA,EAAIgD,EAASF,EAASkC,gBACpBtB,sBAAsBV,KAAa,SAAChD,EAAIgD,EAASF,EAASkC,KAEzDvE,UAAUuC,GAAf,KAAkCF,IAG/BmC,iBAAiBnC,EAAS,aACpBrC,UAAUuC,GAAf,GAA8BkC,KAAKC,EAAKvE,SAAUZ,EAAIgF,MAE3DhF,EAAIgD,EAASF,EAASkC,oCAGpBhF,EAAIoD,EAAYD,gBACbO,sBAAsBN,KAAgB,SAACpD,EAAIoD,EAAYD,MACrDQ,GAAQ5D,EAAQ6D,UAAUR,EAAYgC,EAAKxE,YAG9CyE,aAAalC,EAAUQ,EAAMhD,QAG3BwD,SAASiB,EAAKxE,SAAU+C,EAAMS,KAAM,SAACC,EAAQC,KAC3Ce,aAAalC,EAAUmB,MAE/BtE,EAAIoD,EAAYD,mCAGfnD,OAOC,WANCwD,EAAYxD,EAAGyD,aAAa,UAC5BE,EAAQ5D,EAAQ6D,UAAUJ,EAAWpD,KAAKQ,UAE5C0E,EAAatF,EAAGsF,WAChBC,EAAalF,SAASmF,yBAEjB7D,EAAI,EAAGA,EAAIgC,EAAMhD,KAAKkB,OAAQF,IAAK,IACpC8D,GAAMzF,EAAG0F,WAAU,GACnBxE,EAAesC,MAAa7B,IAE5BsC,gBAAgB,YAET0B,YAAYvF,KAAKwF,aAAaH,EAAKvE,EAAWS,MAGlDgE,YAAYJ,QAGlBpB,SAAS/D,KAAKQ,SAAU+C,EAAMS,KAAM,SAACC,EAAQC,OAGzC,GAFDiB,GAAalF,SAASmF,yBAEjB7D,EAAI,EAAGA,EAAI2C,EAAOzC,OAAQF,IAAK,IAChC8D,GAAMzF,EAAG0F,WAAU,GACnBxE,EAAesC,MAAa7B,IAErBgE,YAAYE,EAAKD,aAAaH,EAAKvE,EAAWS,SAGtD2D,EAAWQ,cACHC,YAAYT,EAAWQ,cAG3BH,YAAYJ,UAGtBjE,kBAAkBF,KAAKpB,iDAGVA,EAAIW,EAAMqF,MACxBC,IAAQ,CAEPlG,GAAQmG,iBAAiBlG,QAClB,OAGP,GAAImG,GAAI,EAAGA,GAAKF,EAAQjG,EAAG6B,OAAS,GAAIsE,IAAK,IACxCrE,GAAamE,EAAQjG,EAAGmG,GAAKnG,KAE9B8B,EAAUQ,kBAAmB2D,OAO7B,GAFDG,GAAatE,EAAUU,WAElBb,EAAI,EAAGA,EAAIyE,EAAWvE,OAAQF,IAAK,IAClCc,GAAQ2D,EAAW5E,KAAKG,MAEX,aAAfc,EAAMC,KAAqB,IACvB2D,GAAgBvE,EAAU2B,aAAa,YACvC6C,EAAmBD,KAEnB,SAASxD,KAAKwD,GAAgB,IAC1BE,GAAYF,EAActD,MAAM,KAAK,KACtBpC,OAAW4F,OACvB,QAAQ1D,KAAKwD,OACD1F,EAGnB2F,KAAqBD,KACXhB,aAAa,WAAYiB,QAGlC1D,UAAUd,MAGf,cAAce,KAAKJ,EAAMC,MAAO,IAC5BI,GAAUL,EAAMC,KAAKK,MAAM,KAAK,GAChCC,EAAUP,EAAMQ,KAEhB,SAAQJ,KAAKG,SACRE,UAAUpB,EAAWkB,EAAQD,MAAM,KAAK,GAAID,EAAS/C,EAAQ6D,UAAUjD,EAAMP,KAAKQ,UAAUD,SAItF,aAAf8B,EAAMC,KAAqB,IACvB2D,GAAgBvE,EAAU2B,aAAa,YACvC6C,EAAmBD,KAEnB,SAASxD,KAAKwD,GAAgB,IAC1BE,GAAYF,EAActD,MAAM,KAAK,KACtBpC,OAAW4F,OACvB,QAAQ1D,KAAKwD,KACD1F,EACZ,eAAekC,KAAKwD,YACHL,MAGxBM,KAAqBD,KACXhB,aAAa,WAAYiB,QAGlC3D,UAAUb,MAGA,YAAfW,EAAMC,KAAoB,IACtB2D,GAAgBvE,EAAU2B,aAAa,WACvC6C,EAAmBD,KAEnB,SAASxD,KAAKwD,GAAgB,IAC1BE,GAAYF,EAActD,MAAM,KAAK,KACtBpC,OAAW4F,OACvB,QAAQ1D,KAAKwD,OACD1F,EAGnB2F,KAAqBD,KACXhB,aAAa,UAAWiB,QAGjC/C,SAASzB,IAMlBA,EAAUF,SAASC,OAAS,QACvB2E,sBAAsB1E,EAAUF,SAAUjB,EAAMqF,0CAKpDhG,EAAIW,EAAMqF,eACdQ,sBAAsBxG,EAAIW,EAAMqF,GAC9BhG,sCAGCyG,EAAKC,EAAOC,cAAKC,yDACrB7G,GAAQ8G,QAAQH,mBACZI,GAAQL,EACRM,WAEE5E,QAAQ,SAAC6E,EAAKzC,GACZ,QAAQ1B,KAAKmE,OACPC,SAASD,IAGfzC,EAAQmC,EAAM7E,OAAS,IACfiF,EAAME,KAEPA,MAIVE,WAAWJ,EAAOC,EAAMJ,EAAKC,yCAI/BH,EAAKO,cAAKL,0DAAaC,yDAC1B7G,GAAQ8G,QAAQG,QACXG,YAAYV,EAAKO,EAAKL,EAAKC,kBAE5BvC,GAASoC,EAAIO,EACbjH,GAAQqH,SAAS/C,WACVgD,eAAeZ,EAAKO,OAClB,iBACM3C,QAEN,SAACC,GACEA,IAAWD,MACJsC,EAAIxE,QAAQ,SAACT,KACbwD,OAAWb,EAAQC,OAIrBA,eAED,gBACE,WAGXgD,KAAKjD,GAAQlC,QAAQ,SAAC6E,KACpBE,WAAW7C,EAAQ2C,EAAKL,EAAKC,MAE/B7G,EAAQ8G,QAAQxC,KAClBkD,aAAalD,EAAQsC,EAAKC,UAExBS,eAAeZ,EAAKO,OAClB,iBACM3C,QAEN,SAACC,GACEA,IAAWD,MACJsC,EAAIxE,QAAQ,SAACT,KACbwD,OAAWb,EAAQC,OAIrBA,eAED,gBACE,4CAMjBkD,cAAKb,0DAAaC,0DACrBa,GAAkB,aAAc,OAAQ,MAAO,OAAQ,UAAW,QAAS,OAAQ,SAAU,WAC7FC,EAAaC,MAAMC,UAGnBC,EAAcC,OAAOC,OAAOL,KAEnBvF,QAAQ,SAAC6F,UACbX,eAAeQ,EAAaG,eACnB,gBACE,YACJ,QACH,wCAAIC,4CACH5D,GAASmD,EAAIU,QACbC,OAAuBH,IAAQ9C,cAAKsC,UAAQS,IAC5C3D,EAASkD,YAENb,EAAIxE,QAAQ,SAACT,KACbwD,OAAWb,EAAQC,KAGnB6D,SAKfC,UAAYP,EAGZjB,KACIzE,QAAQ,SAACX,EAAM+C,EAAOiD,KACjBN,WAAWM,EAAKjD,EAAOoC,GAAK,wCAMpCF,EAAKO,EAAKtF,MAAIkF,2DACbzC,EAAW/D,KAAKiB,UAAUgH,KAAK,SAAC7G,MAC9BsG,OAAOQ,GAAG9G,EAAKiF,IAAKA,KAASjF,EAAKwF,MAAQA,GAAOxF,EAAKwF,IAAIuB,aAAevB,EAAIuB,kBACtE/G,IAIX2C,KACSwC,IAAIvF,KAAKM,QAEbL,UAAUD,UACNqF,MACAO,OACCtF,QACAkF,qDAMT7F,aAAaoB,QAAQ,SAAClB,MACnB0C,GAAQ5D,EAAQ6D,UAAU3C,EAAQC,UAAWsH,EAAK5H,YAEjDuD,SAASqE,EAAK5H,SAAU+C,EAAMS,KAAM,wCAAI6D,8CACjC9G,WAAU+D,wBAAc+C,WAE1BtE,EAAMS,KAAKqE,KAAK,cAIzBpH,UAAUc,QAAQ,SAACgC,KACf+C,WAAW/C,EAASsC,IAAKtC,EAAS6C,IAAK7C,EAASwC,IAAKxC,EAASyC,mDAlZnDH,SAC2B,4BAAxCqB,OAAOF,UAAUW,SAASrD,KAAKuB,mCAG3Be,SACJG,OAAMd,QAAQW,IAAgD,mBAAxCM,OAAOF,UAAUW,SAASrD,KAAKsC,oCAGhDf,SACmC,oBAAxCqB,OAAOF,UAAUW,SAASrD,KAAKuB,qCAGzBiC,EAAKC,MACZC,GAAQF,EAAI3F,MAAM,KACpB8F,SACAC,cAEE3G,QAAQ,SAAC6E,EAAKzC,GACF,IAAVA,KACQoE,EAAQ3B,KACd5F,KAAK4F,OAEC6B,EAAM7B,KACZ5F,KAAK4F,YAKL8B,OACAD,iDAIeE,EAAgBC,EAAYtH,8BAAOuG,gEACjD9F,QAAQ,SAAC8G,GACZA,EAAOpG,KAAKkG,OACNrH,EAAGwD,wBAAc+C,MAI1B,OAAOpF,KAAKkG,OACPrH,EAAGwD,cAAK9E,aAAS6H"}