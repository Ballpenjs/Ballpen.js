{"version":3,"file":"ballpen.min.js","sources":["../src/ballpen.js"],"sourcesContent":["class Ballpen {\r\n\r\n    constructor(el, dataModel) { \r\n        // Init EventList\r\n        this.init(el, dataModel);\r\n        // Scan directives\r\n        this.scan(this.el);\r\n    };\r\n\r\n    init(el, dataModel) {\r\n        this.el = document.querySelector(el);\r\n\r\n        // Handle invalid root element\r\n        if (!this.el) {\r\n            throw new Error('[Ballpen] Invalid root element!');    \r\n        }\r\n\r\n        this.dataModel = dataModel;\r\n\r\n        if (dataModel.event) {\r\n            this.eventList = {};\r\n            this.initEventList(dataModel.event);\r\n        }\r\n\r\n        if (dataModel.data) {\r\n            this.dataList = dataModel.data;\r\n            this.modelList = {};\r\n        }\r\n\r\n        if (dataModel.watchers) {\r\n            this.watchersHook = [];\r\n\r\n            let _watchers = dataModel.watchers;\r\n\r\n            for (let watcher in _watchers) {\r\n                const _dataPath = watcher;\r\n                const _dataHook = _watchers[watcher].handler;\r\n\r\n                this.watchersHook.push({\r\n                    _dataPath, _dataHook\r\n                });\r\n            }\r\n        }\r\n\r\n        // Other initializations\r\n        this.registers = [];\r\n        this.removedChildNodes = [];\r\n\r\n\r\n                var arrayChangeHandler = {\r\n              get: function(target, property) {\r\n                console.log('getting ' + property + ' for ' + target);\r\n                // property is index in this case\r\n                return target[property];\r\n              },\r\n              set: function(target, property, value, receiver) {\r\n                console.log('setting ' + property + ' for ' + target + ' with value ' + value);\r\n                target[property] = value;\r\n                // you have to return true to accept the changes\r\n                return true;\r\n              },\r\n              defineProperty: function(target, prop, descriptor) {\r\n                console.log('called: ' + prop);\r\n                return Reflect.defineProperty(target, prop, descriptor);\r\n              }\r\n            };\r\n\r\n            this.dataList = new Proxy(this.dataList, arrayChangeHandler);\r\n    };\r\n\r\n    initEventList(eventList) {\r\n        if (eventList) {\r\n            let _thisEventObject = eventList;\r\n            for (let item in _thisEventObject) {\r\n                this.eventList[item]      = {};\r\n                this.eventList[item].type = '';\r\n                this.eventList[item].fn   = _thisEventObject[item];\r\n            }\r\n        }\r\n    };\r\n\r\n    scan(el, init = true) {\r\n        for (let i = 0; i < el.children.length; i++) {\r\n            let _thisNode = el.children[i];\r\n            let innerText = el.innerHTML;\r\n     \r\n            // Bind\r\n            this.bind(_thisNode);\r\n\r\n            // Recursion\r\n            if (_thisNode.children.length > 0) {\r\n                this.scan(_thisNode, false);\r\n            }\r\n        }\r\n\r\n        if (init) {\r\n            // Update view\r\n            this.update();\r\n            // Attach observers\r\n            this.attach();\r\n        }   \r\n    };\r\n\r\n    update() {\r\n        this.removedChildNodes.forEach((node) => {\r\n            node.remove();\r\n        });\r\n    }\r\n\r\n    bind(el) {\r\n        if (!el.hasAttributes()) {\r\n            return;\r\n        }\r\n\r\n        let _attrs = el.attributes;\r\n\r\n        for (let i = 0; i < _attrs.length; i++) {\r\n            const _attr = _attrs.item(i);\r\n\r\n            if (_attr.name === 'bp-model') {\r\n                this.bindModel(el);\r\n            }\r\n\r\n            if (_attr.name === 'bp-class') {\r\n                this.bindClass(el);\r\n            }\r\n\r\n            if (/bp-event:/ig.test(_attr.name)) {\r\n                let _fnType = _attr.name.split(':')[1];\r\n                let _fnName = _attr.value;\r\n                this.bindEvent(el, _fnName, _fnType, this.dataList);\r\n            }\r\n\r\n            if (/bp-bind:/ig.test(_attr.name)) {\r\n                let _bindKey   = _attr.name.split(':')[1];\r\n                let _bindValue = _attr.value;\r\n                this.bindBind(el, _bindValue, _bindKey);\r\n            }\r\n\r\n            if (_attr.name === 'bp-for') {\r\n                this.bindFor(el);\r\n            }\r\n\r\n            if (_attr.name === 'bp-show') {\r\n                this.bindShow(el);\r\n            }\r\n        }\r\n    };\r\n\r\n    static isHTMLCollection(obj) {\r\n        return Object.prototype.toString.call(obj) === '[object HTMLCollection]';\r\n    };\r\n\r\n    static isArray(arr) {\r\n        return Array.isArray(arr) || Object.prototype.toString.call(arr) === '[object Array]';\r\n    };\r\n\r\n    static isObject(obj) {\r\n        return Object.prototype.toString.call(obj) === '[object Object]';\r\n    };\r\n\r\n    static parseData(str, dataObj) {\r\n        const _list = str.split('.');\r\n        let _data = dataObj;\r\n        let p = [];\r\n\r\n        _list.forEach((key, index) => {\r\n            if (index === 0) {\r\n                _data = dataObj[key];\r\n                p.push(key);\r\n            } else {\r\n                _data = _data[key];\r\n                p.push(key);\r\n            }\r\n        });\r\n\r\n        return {\r\n            path: p,\r\n            data: _data\r\n        };\r\n    };\r\n\r\n    static ignoreInnerDirectives(directiveValue, exceptList, fn, ...args) {\r\n        exceptList.forEach((regexp) => {\r\n            if (regexp.test(directiveValue)) {\r\n                fn && fn.call(this, ...args);\r\n            }\r\n        });\r\n\r\n        if (!/^@/ig.test(directiveValue)) {\r\n            fn && fn.call(this, ...args);\r\n        }\r\n    }\r\n\r\n    bindShow(el) {\r\n        const modelName = el.getAttribute('bp-show');\r\n\r\n        Ballpen.ignoreInnerDirectives(modelName, [], (el) => {\r\n            const model = Ballpen.parseData(modelName, this.dataList);\r\n\r\n            const elStyle = el.style;\r\n \r\n            (!model.data ? elStyle.display = 'none' : (elStyle.removeProperty ? elStyle.removeProperty('display') : elStyle.removeAttribute('display')));\r\n\r\n            this.register(this.dataList, model.path, (yetVal, nowVal) => {\r\n                (!nowVal ? elStyle.display = 'none' : (elStyle.removeProperty ? elStyle.removeProperty('display') : elStyle.removeAttribute('display')));\r\n            });\r\n        }, el);\r\n    };\r\n\r\n    bindModel(el) {\r\n        const modelName = el.getAttribute('bp-model');\r\n\r\n        Ballpen.ignoreInnerDirectives(modelName, [/^@{([\\d]+)}$/ig], (el) => {\r\n            // Handel 'for' list index\r\n            if (/^@{([\\d]+)}$/ig.test(modelName)) {\r\n                let index = modelName.match(/^@{([\\d]+)}$/)[1];\r\n\r\n                (el.tagName === 'INPUT' ? el.value = index : el.innerText = index);\r\n            } else {\r\n                const model = Ballpen.parseData(modelName, this.dataList);\r\n\r\n                (el.tagName === 'INPUT' ? el.value = model.data : el.innerText = model.data);\r\n\r\n                this.register(this.dataList, model.path, (yetVal, nowVal) => {\r\n                    (el.tagName === 'INPUT' ? el.value = nowVal : el.innerText = nowVal);\r\n                });\r\n            }\r\n        }, el);\r\n    };\r\n\r\n    bindClass(el) {\r\n        const modelName = el.getAttribute('bp-class');\r\n\r\n        Ballpen.ignoreInnerDirectives(modelName, [], (el) => {\r\n            const model = Ballpen.parseData(modelName, this.dataList);\r\n\r\n            if (!el.classList.contains(model.data)) {\r\n                el.classList.add(model.data);\r\n            }\r\n\r\n            this.register(this.dataList, model.path, (yetVal, nowVal) => {\r\n                if (!el.classList.contains(nowVal)) {\r\n                    el.classList.add(nowVal);\r\n                }\r\n            });\r\n        }, el);\r\n    };\r\n\r\n    bindEvent(el, _fnName, _fnType, context, args = {}) {\r\n        Ballpen.ignoreInnerDirectives(_fnName, [], (el, _fnName, _fnType, context) => {\r\n            // Update global event list\r\n            this.eventList[_fnName]['type'] = _fnType;\r\n            \r\n            // Bind listener, set callback fn to global data context\r\n            el.addEventListener(_fnType, () => {\r\n                this.eventList[_fnName]['fn'].call(this.dataList, el, context, args);\r\n            });\r\n        }, el, _fnName, _fnType, context, args);\r\n    };\r\n\r\n    bindBind(el, _bindValue, _bindKey, ...args) {\r\n        Ballpen.ignoreInnerDirectives(_bindValue, [], (el, _bindValue, _bindKey) => {\r\n            const model = Ballpen.parseData(_bindValue, this.dataList);\r\n\r\n            // Set customized attribute\r\n            el.setAttribute(_bindKey, model.data);\r\n            \r\n            // Bind listener, set callback fn to global data context\r\n            this.register(this.dataList, model.path, (yetVal, nowVal) => {\r\n                el.setAttribute(_bindKey, nowVal);\r\n            });\r\n        }, el, _bindValue, _bindKey);\r\n    }\r\n\r\n    bindFor(el) {\r\n        const modelName = el.getAttribute('bp-for');\r\n        const model = Ballpen.parseData(modelName, this.dataList);\r\n\r\n        let parentNode = el.parentNode;\r\n        let virtualDiv = document.createDocumentFragment();\r\n\r\n        for (let i = 0; i < model.data.length; i++) {\r\n            let div = el.cloneNode(true);\r\n            let _dataPath = `${modelName}.${i}`;\r\n\r\n            div.removeAttribute('bp-for');\r\n\r\n            virtualDiv.appendChild(this.bindForItems(div, _dataPath, i));\r\n        }\r\n\r\n        parentNode.appendChild(virtualDiv);\r\n\r\n        // Set register\r\n        this.register(this.dataList, model.path, (yetVal, nowVal) => {\r\n            let virtualDiv = document.createDocumentFragment();\r\n\r\n            for (let i = 0; i < nowVal.length; i++) {\r\n                let div = el.cloneNode(true);\r\n                let _dataPath = `${modelName}.${i}`;\r\n\r\n                virtualDiv.appendChild(this.bindForItems(div, _dataPath, i));\r\n            }\r\n\r\n            while (parentNode.firstChild) {\r\n                parentNode.removeChild(parentNode.firstChild);\r\n            }\r\n\r\n            parentNode.appendChild(virtualDiv);\r\n        });\r\n\r\n        this.removedChildNodes.push(el);\r\n    };\r\n\r\n    bindForItemsRecursion(el, data, itemIndex) {\r\n        let child = true;\r\n\r\n        if (!Ballpen.isHTMLCollection(el)) {\r\n            child = false;\r\n        }\r\n\r\n        for (let j = 0; j < (child ? el.length : 1); j++) {\r\n            const _thisNode = (child ? el[j] : el);\r\n\r\n            if (!_thisNode.hasAttributes() && child) {\r\n                continue;\r\n            }\r\n\r\n            // Bind normal render tag\r\n            let _attrsMain = _thisNode.attributes;\r\n            \r\n            for (let i = 0; i < _attrsMain.length; i++) {\r\n                const _attr = _attrsMain.item(i);\r\n\r\n                if (_attr.name === 'bp-class') {\r\n                    let _thisSubModel = _thisNode.getAttribute('bp-class');\r\n                    let _thisSubModelAbs = _thisSubModel;\r\n\r\n                    if (/^@\\./ig.test(_thisSubModel)) {\r\n                        let _subModel = _thisSubModel.split('.')[1];\r\n                        _thisSubModelAbs = data + `.${_subModel}`;\r\n                    } else if (/^@$/ig.test(_thisSubModel)) {\r\n                        _thisSubModelAbs = data;\r\n                    } \r\n\r\n                    if (_thisSubModelAbs !== _thisSubModel) {\r\n                        _thisNode.setAttribute('bp-class', _thisSubModelAbs);\r\n                    }\r\n\r\n                    this.bindClass(_thisNode);\r\n                }\r\n\r\n                if (/bp-event:/ig.test(_attr.name)) {\r\n                    let _fnType = _attr.name.split(':')[1];\r\n                    let _fnName = _attr.value;\r\n\r\n                    if (/^@:/ig.test(_fnName)) {\r\n                        this.bindEvent(_thisNode, _fnName.split(':')[1], _fnType, this.dataList, {\r\n                            index: itemIndex\r\n                        });\r\n                    }\r\n                }\r\n\r\n                if (_attr.name === 'bp-model') {\r\n                    let _thisSubModel = _thisNode.getAttribute('bp-model');\r\n                    let _thisSubModelAbs = _thisSubModel;\r\n\r\n                    if (/^@\\./ig.test(_thisSubModel)) {\r\n                        let _subModel = _thisSubModel.split('.')[1];\r\n                        _thisSubModelAbs = data + `.${_subModel}`;\r\n                    } else if (/^@$/ig.test(_thisSubModel)) {\r\n                        _thisSubModelAbs = data;\r\n                    } else if (/^@{index}$/ig.test(_thisSubModel)) {\r\n                        _thisSubModelAbs = `@{${itemIndex}}`;\r\n                    }\r\n\r\n                    if (_thisSubModelAbs !== _thisSubModel) {\r\n                        _thisNode.setAttribute('bp-model', _thisSubModelAbs);\r\n                    }\r\n\r\n                    this.bindModel(_thisNode);\r\n                }\r\n\r\n                if (_attr.name === 'bp-show') {\r\n                    let _thisSubModel = _thisNode.getAttribute('bp-show');\r\n                    let _thisSubModelAbs = _thisSubModel;\r\n\r\n                    if (/^@\\./ig.test(_thisSubModel)) {\r\n                        let _subModel = _thisSubModel.split('.')[1];\r\n                        _thisSubModelAbs = data + `.${_subModel}`;\r\n                    } else if (/^@$/ig.test(_thisSubModel)) {\r\n                        _thisSubModelAbs = data;\r\n                    } \r\n\r\n                    if (_thisSubModelAbs !== _thisSubModel) {\r\n                        _thisNode.setAttribute('bp-show', _thisSubModelAbs);\r\n                    }\r\n\r\n                    this.bindShow(_thisNode);\r\n                }\r\n\r\n                // Render 'for' list in another 'for' had not been implemented yet\r\n            }\r\n\r\n            if (_thisNode.children.length > 0) {\r\n                this.bindForItemsRecursion(_thisNode.children, data, itemIndex);\r\n            }\r\n        }\r\n    };\r\n\r\n    bindForItems(el, data, itemIndex) {\r\n        this.bindForItemsRecursion(el, data, itemIndex);\r\n        return el;\r\n    };\r\n\r\n    observePath(obj, paths, fns) {\r\n        if (Ballpen.isArray(paths)) {\r\n            let _path = obj;\r\n            let _key;\r\n\r\n            paths.forEach((key, index) => {\r\n                if (/^\\d+$/.test(key)) {\r\n                    key = parseInt(key);\r\n                }\r\n\r\n                if (index < paths.length - 1) {\r\n                    _path = _path[key];\r\n                } else {    \r\n                    _key = key;\r\n                }\r\n            });\r\n\r\n            this.observeKey(_path, _key, fns);\r\n        }\r\n    };\r\n\r\n    observeKey(obj, key, fns = false) {\r\n        if (Ballpen.isArray(key)) {\r\n            this.observePath(obj, key, fns);\r\n        } else {\r\n            let yetVal = obj[key];\r\n            if (Ballpen.isObject(yetVal)) {\r\n                Object.defineProperty(obj, key, {\r\n                    get: () => {\r\n                        return yetVal;\r\n                    },\r\n                    set: (nowVal) => {  \r\n                        if (nowVal !== yetVal) {\r\n                            fns && fns.forEach((fn) => {\r\n                                fn.call(this, yetVal, nowVal);\r\n                            });\r\n                        }\r\n\r\n                        yetVal = nowVal;\r\n                    },\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n\r\n                Object.keys(yetVal).forEach((key) => {\r\n                    this.observeKey(yetVal, key, fns);\r\n                });\r\n            } else if (Ballpen.isArray(yetVal)) {\r\n                Object.defineProperty(obj, key, {\r\n                    get: () => {\r\n                        return yetVal;\r\n                    },\r\n                    set: (nowVal) => {  \r\n                        if (nowVal !== yetVal) {\r\n                            fns && fns.forEach((fn) => {\r\n                                fn.call(this, yetVal, nowVal);\r\n                            });\r\n                        }\r\n\r\n                        yetVal = nowVal;\r\n                    },\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n\r\n                this.observeArray(yetVal, fns);\r\n            } else {\r\n                Object.defineProperty(obj, key, {\r\n                    get: () => {\r\n                        return yetVal;\r\n                    },\r\n                    set: (nowVal) => {  \r\n                        if (nowVal !== yetVal) {\r\n                            fns && fns.forEach((fn) => {\r\n                                fn.call(this, yetVal, nowVal);\r\n                            });\r\n                        }\r\n\r\n                        yetVal = nowVal;\r\n                    },\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n            }\r\n        }\r\n    };\r\n    \r\n    observeArray(arr, fns = false) {\r\n        const mutatorMethods = ['copyWithin', 'fill', 'pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'];\r\n        const arrayProto = Array.prototype;\r\n\r\n        // Prevent from polluting the global 'Array.prototype'\r\n        const hijackProto = Object.create(arrayProto);\r\n\r\n        mutatorMethods.forEach((method) => {\r\n            Object.defineProperty(hijackProto, method, {\r\n                enumerable: true,\r\n                configurable: true,\r\n                writable: true,\r\n                value: (...args) => {\r\n                    let yetVal = arr.slice();\r\n                    let resultVal = arrayProto[method].call(arr, ...args);\r\n                    let nowVal = arr;\r\n                    // Callback\r\n                    fns && fns.forEach((fn) => {\r\n                        fn.call(this, yetVal, nowVal);\r\n                    }); \r\n\r\n                    return resultVal;\r\n                } \r\n            });\r\n        });\r\n        /* eslint-disable */\r\n        arr.__proto__ = hijackProto;\r\n        // arr.__proto__.__proto__ === Array.prototype; // true\r\n    };\r\n\r\n    register(obj, key, fn) {\r\n        const register = this.registers.find((item) => {\r\n            if (Object.is(item.obj, obj) && (item.key === key || item.key.toString() === key.toString())) {\r\n                return item;\r\n            }\r\n        });\r\n\r\n        if (register) {\r\n            register.fns.push(fn);\r\n        } else {\r\n            this.registers.push({\r\n                obj: obj,\r\n                key: key,\r\n                fns: [fn]\r\n            });\r\n        }\r\n    };\r\n\r\n    attach() {\r\n        this.watchersHook.forEach((watcher) => {\r\n            let model = Ballpen.parseData(watcher._dataPath, this.dataList);\r\n\r\n            \r\n            console.log(this.dataList);\r\n            // let cb = function(...args) {\r\n            //     watcher._dataHook.call(this, ...args);\r\n            // };\r\n\r\n            // cb.prototype.mappedPath = model.path.join('.');\r\n\r\n            // // Bind watchers\r\n            // this.register(this.dataList, model.path, cb);\r\n        });\r\n\r\n        this.registers.forEach((register) => {\r\n            this.observeKey(register.obj, register.key, register.fns);\r\n        });\r\n    };\r\n\r\n}\r\n\r\nexport default Ballpen;\r\n"],"names":["Ballpen","el","dataModel","init","scan","this","document","querySelector","Error","event","eventList","initEventList","data","dataList","modelList","watchers","watchersHook","_watchers","watcher","_dataPath","_dataHook","handler","push","registers","removedChildNodes","arrayChangeHandler","target","property","log","value","receiver","prop","descriptor","Reflect","defineProperty","Proxy","_thisEventObject","item","type","fn","i","children","length","_thisNode","innerHTML","bind","update","attach","forEach","node","remove","hasAttributes","_attrs","attributes","_attr","name","bindModel","bindClass","test","_fnType","split","_fnName","bindEvent","_bindKey","_bindValue","bindBind","bindFor","bindShow","modelName","getAttribute","ignoreInnerDirectives","model","parseData","_this","elStyle","style","removeProperty","removeAttribute","display","register","path","yetVal","nowVal","index","match","tagName","innerText","_this2","_this3","classList","contains","add","context","args","addEventListener","call","_this4","_this5","setAttribute","parentNode","virtualDiv","createDocumentFragment","div","cloneNode","appendChild","bindForItems","_this6","firstChild","removeChild","itemIndex","child","isHTMLCollection","j","_attrsMain","_thisSubModel","_thisSubModelAbs","_subModel","bindForItemsRecursion","obj","paths","fns","isArray","_path","_key","key","parseInt","observeKey","observePath","isObject","keys","observeArray","arr","mutatorMethods","arrayProto","Array","prototype","hijackProto","Object","create","method","slice","resultVal","__proto__","find","is","toString","_this10","str","dataObj","_list","_data","p","directiveValue","exceptList","regexp"],"mappings":"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"}