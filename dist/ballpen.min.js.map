{"version":3,"file":"ballpen.min.js","sources":["../src/ballpen.js"],"sourcesContent":["class Ballpen {\r\n\r\n    constructor(el, dataModel) { \r\n        // Init EventList\r\n        this.init(el, dataModel);\r\n        // Scan directives\r\n        this.scan(this.el);\r\n    };\r\n\r\n    init(el, dataModel) {\r\n        this.el = document.querySelector(el);\r\n        // Hide before render\r\n        this.el.style.display = 'none';\r\n\r\n        // Handle invalid root element\r\n        if (!this.el) {\r\n            throw new Error('[Ballpen] Invalid root element!');    \r\n        }\r\n\r\n        this.dataModel = dataModel;\r\n\r\n        if (dataModel.event) {\r\n            this.eventList = {};\r\n            this.initEventList(dataModel.event);\r\n        }\r\n\r\n        if (dataModel.data) {\r\n            // Set proxy to global data payload\r\n            this.dataListPure = dataModel.data;\r\n            this.dataList = Ballpen.clone(dataModel.data);\r\n            this.modelList = {};\r\n        }\r\n\r\n        if (dataModel.watchers) {\r\n            this.watchersHook = new Map();\r\n\r\n            let _watchers = dataModel.watchers;\r\n\r\n            for (let watcher in _watchers) {\r\n                const _dataPath = watcher;\r\n                const _dataHook = _watchers[watcher].handler;\r\n\r\n                this.watchersHook.set(_dataPath, _dataHook);\r\n            }\r\n\r\n            this.watchersHook.forEach((watcherFn, path) => {\r\n                Ballpen.renderObjectValueByPath(this.dataList, path, this.setProxy(Ballpen.parseData(path, this.dataList).data, path, watcherFn, watcherFn));\r\n            });\r\n        }\r\n\r\n        // Other initializations\r\n        this.registers = [];\r\n        this.removedChildNodes = [];\r\n    };\r\n\r\n    setProxy(dataList, path, fnSet = false, fnGet = false) {\r\n        let handler = {\r\n            get: (target, property) => {\r\n                // Run callback\r\n                fnGet && fnGet.call(this, Ballpen.parseData(path, this.dataListPure).data, Ballpen.parseData(path, this.dataList).data);\r\n                return target[property];\r\n            },\r\n            set: (target, property, value, receiver) => {\r\n                let realProperty;\r\n                if (/^\\$/ig.test(property)) {\r\n                    realProperty = property.substring(1);\r\n                } else {\r\n                    realProperty = property;\r\n                }\r\n\r\n                target[realProperty] = value;\r\n                // Run callback\r\n                if (realProperty === property) {\r\n                    fnSet && fnSet.call(this, Ballpen.parseData(path, this.dataListPure).data, Ballpen.parseData(path, this.dataList).data);\r\n                }\r\n                \r\n                // Return true to accept the changes\r\n                return true;\r\n            },\r\n            defineProperty: (target, prop, descriptor) => {\r\n                return Reflect.defineProperty(target, prop, descriptor);\r\n            }\r\n        };\r\n\r\n        // Can not set a proxy on a single value (!! need to be fixed !!)\r\n        return new Proxy(dataList, handler);\r\n    };\r\n\r\n    initEventList(eventList) {\r\n        if (eventList) {\r\n            let _thisEventObject = eventList;\r\n            for (let item in _thisEventObject) {\r\n                this.eventList[item]      = {};\r\n                this.eventList[item].type = '';\r\n                this.eventList[item].fn   = _thisEventObject[item];\r\n            }\r\n        }\r\n    };\r\n\r\n    scan(el, init = true) {\r\n        for (let i = 0; i < el.children.length; i++) {\r\n            let _thisNode = el.children[i];\r\n     \r\n            // Bind\r\n            if (_thisNode.hasAttributes()) {\r\n                let _attrs = _thisNode.attributes;\r\n                let _attrsArr = [];\r\n\r\n                for (let i = 0; i < _attrs.length; i++) {\r\n                    const _attr = _attrs.item(i);\r\n                    _attrsArr.push(_attr.name);\r\n\r\n                    if (/bp-event:/ig.test(_attr.name)) {\r\n                        let _fnType = _attr.name.split(':')[1];\r\n                        let _fnName = _attr.value;\r\n                        this.bindEvent(_thisNode, _fnName, _fnType, this.dataList);\r\n                    }\r\n\r\n                    if (/bp-bind:/ig.test(_attr.name)) {\r\n                        let _bindKey   = _attr.name.split(':')[1];\r\n                        let _bindValue = _attr.value;\r\n                        this.bindBind(_thisNode, _bindValue, _bindKey);\r\n                    }\r\n                }\r\n\r\n                if (_attrsArr.includes('bp-for')) {\r\n                    this.bindFor(_thisNode);\r\n                    continue;\r\n                }\r\n\r\n                if (_attrsArr.includes('bp-model')) {\r\n                    this.bindModel(_thisNode);\r\n                }\r\n\r\n                if (_attrsArr.includes('bp-class')) {\r\n                    this.bindClass(_thisNode);\r\n                }\r\n\r\n                if (_attrsArr.includes('bp-show')) {\r\n                    this.bindShow(_thisNode);\r\n                }\r\n\r\n                // Moustache binding\r\n                if (/{{.*}}/ig.test(_thisNode.innerText)) {\r\n                    this.bindMoustache(_thisNode);\r\n                }\r\n            }\r\n\r\n            // Recursion\r\n            if (_thisNode.children.length > 0) {\r\n                this.scan(_thisNode, false);\r\n            }\r\n        }\r\n\r\n        if (init) {\r\n            // Update view\r\n            this.update();\r\n            // Attach observers\r\n            this.attach();\r\n            // Show rendered view\r\n            (this.el.style.removeProperty ? this.el.style.removeProperty('display') : this.el.style.removeAttribute('display'));\r\n        }   \r\n    };\r\n\r\n    update() {\r\n        this.removedChildNodes.forEach((node) => {\r\n            node.remove();\r\n        });\r\n    }\r\n\r\n    static isHTMLCollection(obj) {\r\n        return Object.prototype.toString.call(obj) === '[object HTMLCollection]';\r\n    };\r\n\r\n    static isArray(arr) {\r\n        return Array.isArray(arr) || Object.prototype.toString.call(arr) === '[object Array]';\r\n    };\r\n\r\n    static isObject(obj) {\r\n        return Object.prototype.toString.call(obj) === '[object Object]';\r\n    };\r\n\r\n    static renderObjectValueByPath(obj, path, val) {\r\n        let _paths = path.split('.');\r\n\r\n        if (typeof Ballpen.parseData(path, obj).data === 'undefined') {\r\n            throw new Error('[Ballpen] \"' + path + '\" is an invalid watch path.');\r\n        }\r\n\r\n        if (_paths.length === 1) {\r\n            obj[_paths[0]] = val;\r\n        } else {\r\n            for (let i = 0; i < _paths.length - 1; i++) {\r\n                obj = obj[_paths[i]];\r\n                if (!obj) {\r\n                    throw new Error('[Ballpen] \"' + path + '\" is an invalid watch path.');\r\n                }\r\n\r\n                if (i === _paths.length - 2) {\r\n                    obj[_paths[_paths.length - 1]] = val;\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    static parseData(str, dataObj) {\r\n        const _list = str.split('.');\r\n        let _data = dataObj;\r\n        let p = [];\r\n\r\n        _list.forEach((key, index) => {\r\n            if (index === 0) {\r\n                _data = dataObj[key];\r\n                p.push(key);\r\n            } else {\r\n                _data = _data[key];\r\n                p.push(key);\r\n            }\r\n        });\r\n\r\n        return {\r\n            path: p,\r\n            data: _data\r\n        };\r\n    };\r\n\r\n    static ignoreInnerDirectives(directiveValue, exceptList, fn, ...args) {\r\n        exceptList.forEach((regexp) => {\r\n            if (regexp.test(directiveValue)) {\r\n                fn && fn.call(this, ...args);\r\n            }\r\n        });\r\n\r\n        if (!/^@/ig.test(directiveValue)) {\r\n            fn && fn.call(this, ...args);\r\n        }\r\n    };\r\n\r\n    static clone(obj) {\r\n        let copy;\r\n\r\n        if (obj === null || typeof obj !== 'object') return obj;\r\n\r\n        if (obj instanceof Date) {\r\n            copy = new Date();\r\n            copy.setTime(obj.getTime());\r\n            return copy;\r\n        }\r\n\r\n        if (obj instanceof Array) {\r\n            copy = [];\r\n            for (var i = 0, len = obj.length; i < len; i++) {\r\n                copy[i] = Ballpen.clone(obj[i]);\r\n            }\r\n            return copy;\r\n        }\r\n\r\n        if (obj instanceof Object) {\r\n            copy = {};\r\n            for (var attr in obj) {\r\n                if (obj.hasOwnProperty(attr)) copy[attr] = Ballpen.clone(obj[attr]);\r\n            }\r\n            return copy;\r\n        }\r\n\r\n        throw new Error('[Ballpen] Unable to copy object, type is not supported.');\r\n    };\r\n\r\n    static wrapAbsPath(rootPath, relPath) {\r\n        return (Ballpen.isArray(rootPath) && rootPath.length > 0 ? (rootPath.join('.') + '.') : (rootPath.toString().length > 0 ? (rootPath.toString() + '.') : '')) + \r\n        (Ballpen.isArray(relPath) && relPath.length > 0 ? relPath.join('.') : (relPath.toString().length > 0 ? relPath.toString() : ''));\r\n    };\r\n\r\n    bindShow(el, rootPath = []) {\r\n        const modelName = Ballpen.wrapAbsPath(rootPath, el.getAttribute('bp-show')); \r\n\r\n        Ballpen.ignoreInnerDirectives(modelName, [], (el) => {\r\n            const model = Ballpen.parseData(modelName, this.dataList);\r\n\r\n            const elStyle = el.style;\r\n \r\n            (!model.data ? elStyle.display = 'none' : (elStyle.removeProperty ? elStyle.removeProperty('display') : elStyle.removeAttribute('display')));\r\n\r\n            this.register(this.dataList, this.dataListPure, model.path, (yetVal, nowVal) => {\r\n                (!nowVal ? elStyle.display = 'none' : (elStyle.removeProperty ? elStyle.removeProperty('display') : elStyle.removeAttribute('display')));\r\n            });\r\n        }, el);\r\n    };\r\n\r\n    bindModel(el, rootPath = []) {\r\n        const modelName = Ballpen.wrapAbsPath(rootPath, el.getAttribute('bp-model'));\r\n\r\n        Ballpen.ignoreInnerDirectives(modelName, [/^@{([\\d]+)}$/ig], (el) => {\r\n            // Handel 'for' list index\r\n            if (/^@{([\\d]+)}$/ig.test(modelName)) {\r\n                let index = modelName.match(/^@{([\\d]+)}$/)[1];\r\n\r\n                (el.tagName === 'INPUT' ? el.value = index : el.innerText = index);\r\n            } else {\r\n                const model = Ballpen.parseData(modelName, this.dataList);\r\n\r\n                (el.tagName === 'INPUT' ? el.value = model.data : el.innerText = model.data);\r\n\r\n                this.register(this.dataList, this.dataListPure, model.path, (yetVal, nowVal) => {\r\n                    (el.tagName === 'INPUT' ? el.value = nowVal : el.innerText = nowVal);\r\n                });\r\n            }\r\n        }, el);\r\n    };\r\n\r\n    bindMoustache(el) {\r\n\r\n    };\r\n\r\n    bindClass(el, rootPath = []) {\r\n        const modelName = Ballpen.wrapAbsPath(rootPath, el.getAttribute('bp-class'));\r\n\r\n        Ballpen.ignoreInnerDirectives(modelName, [], (el) => {\r\n            const model = Ballpen.parseData(modelName, this.dataList);\r\n\r\n            if (!el.classList.contains(model.data)) {\r\n                el.classList.add(model.data);\r\n            }\r\n\r\n            this.register(this.dataList, this.dataListPure, model.path, (yetVal, nowVal) => {\r\n                el.classList.remove(yetVal);\r\n                if (!el.classList.contains(nowVal)) {\r\n                    el.classList.add(nowVal);\r\n                }\r\n            });\r\n        }, el);\r\n    };\r\n\r\n    bindEvent(el, _fnName, _fnType, context, args = {}) {\r\n        Ballpen.ignoreInnerDirectives(_fnName, [], (el, _fnName, _fnType, context) => {\r\n            // Update global event list\r\n            this.eventList[_fnName]['type'] = _fnType;\r\n            \r\n            // Bind listener, set callback fn to global data context\r\n            el.addEventListener(_fnType, () => {\r\n                this.eventList[_fnName]['fn'].call(this.dataList, el, context, args);\r\n            });\r\n        }, el, _fnName, _fnType, context, args);\r\n    };\r\n\r\n    bindBind(el, _bindValue, _bindKey, rootPath = []) {\r\n        Ballpen.ignoreInnerDirectives(_bindValue, [], (el, _bindValue, _bindKey) => {\r\n            const modelName = Ballpen.wrapAbsPath(rootPath, _bindValue);\r\n            const model = Ballpen.parseData(modelName, this.dataList);\r\n\r\n            // Set customized attribute\r\n            el.setAttribute(_bindKey, model.data);\r\n            \r\n            // Bind listener, set callback fn to global data context\r\n            this.register(this.dataList, this.dataListPure, model.path, (yetVal, nowVal) => {\r\n                el.setAttribute(_bindKey, nowVal);\r\n            });\r\n        }, el, _bindValue, _bindKey);\r\n    };\r\n\r\n    bindFor(el, scope = {}, indexStack = {}) {\r\n        console.trace(scope);\r\n        const modelPaths = el.getAttribute('bp-for').split(/\\s+in\\s+/);\r\n        const _pScope = modelPaths[1];\r\n        const _cScope = modelPaths[0];\r\n        \r\n        // Update scope array\r\n        if (/\\./ig.test(_pScope)) {\r\n            const _t = _pScope.split('.');\r\n            scope[_pScope] = scope[_t[0]] + '.' + _t[1];\r\n        } else {\r\n            scope[_pScope] = _pScope;\r\n        }\r\n        console.log(scope);\r\n        console.log(_pScope);\r\n        console.trace(scope[_pScope]);\r\n        const model = Ballpen.parseData(scope[_pScope], this.dataList);\r\n        \r\n        let parentNode = el.parentNode;\r\n        console.log(parentNode);\r\n        let virtualDiv = document.createDocumentFragment();\r\n\r\n        for (let i = 0; i < model.data.length; i++) {\r\n            let _div = el.cloneNode(true);\r\n            let _dataPath = `${scope[_pScope]}.${i}`;\r\n\r\n            // Update current scope chain\r\n            scope[_cScope] = _dataPath;\r\n\r\n            // Update current index chain\r\n            indexStack[_cScope] = i;\r\n\r\n            _div.removeAttribute('bp-for');\r\n\r\n            this.bindForItemsRecursion(_div, scope, indexStack, _dataPath, i, true, (el) => {\r\n                virtualDiv.appendChild(el);\r\n            });\r\n        }\r\n\r\n        parentNode.appendChild(virtualDiv);\r\n        console.log(indexStack);\r\n        // Set register\r\n        this.register(this.dataList, this.dataListPure, model.path, (yetVal, nowVal) => {\r\n            let virtualDiv = document.createDocumentFragment();\r\n\r\n            for (let i = 0; i < nowVal.length; i++) {\r\n                let _div = el.cloneNode(true);\r\n                let _dataPath = `${scope[_pScope]}.${i}`;\r\n\r\n                // Update current scope chain\r\n                scope[_cScope] = _dataPath;\r\n\r\n                // Update current index chain\r\n                indexStack[_cScope] = i;\r\n\r\n                this.bindForItemsRecursion(_div, scope, indexStack, _dataPath, i, true, (el) => {\r\n                    virtualDiv.appendChild(el);\r\n                });\r\n            }\r\n\r\n            while (parentNode.firstChild) {\r\n                parentNode.removeChild(parentNode.firstChild);\r\n            }\r\n\r\n            parentNode.appendChild(virtualDiv);\r\n        });\r\n\r\n        this.removedChildNodes.push(el);\r\n    };\r\n\r\n    bindForItemsRecursion(el, scope, indexStack, data, itemIndex, isInit = false, fn = false) {\r\n        let child = !!Ballpen.isHTMLCollection(el);\r\n\r\n        for (let j = 0; j < (child ? el.length : 1); j++) {\r\n            const _thisNode = (child ? el[j] : el);\r\n\r\n            if (!_thisNode.hasAttributes() && child) {\r\n                if (_thisNode.children.length > 0) {\r\n                    this.bindForItemsRecursion(_thisNode.children, scope, indexStack, data, itemIndex);\r\n                }\r\n                continue;\r\n            }\r\n\r\n            // Bind normal render tag\r\n            let _attrsMain = _thisNode.attributes;\r\n            let _attrsArr = [];\r\n\r\n            for (let i = 0; i < _attrsMain.length; i++) {\r\n                let _i = _attrsMain.item(i);\r\n                _attrsArr.push(_i.name);\r\n\r\n                // Bind event\r\n                if (/bp-event:/ig.test(_i.name)) {\r\n                    let _fnType = _i.name.split(':')[1];\r\n                    let _fnName = _i.value;\r\n\r\n                    if (/^@:/ig.test(_fnName)) {\r\n                        this.bindEvent(_thisNode, _fnName.split(':')[1], _fnType, this.dataList, {\r\n                            index: itemIndex\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Render 'for' list in another 'for' list\r\n            if (_attrsArr.includes('bp-for')) {\r\n                console.log(111);\r\n                this.bindFor(_thisNode, scope, indexStack);\r\n                continue;\r\n            }\r\n\r\n            if (_attrsArr.includes('bp-class')) {\r\n                let _thisSubModel = _thisNode.getAttribute('bp-class');  \r\n                let _thisSubModelAbs = _thisSubModel;\r\n\r\n                if (/^@/ig.test(_thisSubModel)) {\r\n                    _thisSubModelAbs = _thisSubModel.replace(/^@[a-z0-9A-Z_]*/, scope[_thisSubModel.split('.')[0]]);\r\n                }\r\n\r\n                if (_thisSubModelAbs !== _thisSubModel) {\r\n                    _thisNode.setAttribute('bp-class', _thisSubModelAbs);\r\n                }\r\n\r\n                this.bindClass(_thisNode);\r\n            }\r\n\r\n            if (_attrsArr.includes('bp-model')) {\r\n                let _thisSubModel = _thisNode.getAttribute('bp-model');\r\n                let _thisSubModelAbs = _thisSubModel;\r\n\r\n                if (/^@/ig.test(_thisSubModel)) {\r\n                    // Get index\r\n                    if (/\\[\\[index\\]\\]/ig.test(_thisSubModel)) {\r\n                        console.log(_thisSubModel);\r\n                        _thisSubModelAbs = `@{${indexStack[_thisSubModel.match(/^(.*)\\[\\[index\\]\\]$/)[1]]}}`;\r\n\r\n                    } else {\r\n                        _thisSubModelAbs = _thisSubModel.replace(/^@[a-z0-9A-Z_]*/, scope[_thisSubModel.split('.')[0]]);  \r\n                    }\r\n                }\r\n\r\n                if (_thisSubModelAbs !== _thisSubModel) {\r\n                    _thisNode.setAttribute('bp-model', _thisSubModelAbs);\r\n                }\r\n\r\n                this.bindModel(_thisNode);\r\n            }\r\n\r\n            if (_attrsArr.includes('bp-show')) {\r\n                let _thisSubModel = _thisNode.getAttribute('bp-show');\r\n                let _thisSubModelAbs = _thisSubModel;\r\n\r\n                if (/^@/ig.test(_thisSubModel)) {\r\n                    _thisSubModelAbs = _thisSubModel.replace(/^@[a-z0-9A-Z_]*/, scope[_thisSubModel.split('.')[0]]);\r\n                }\r\n\r\n                if (_thisSubModelAbs !== _thisSubModel) {\r\n                    _thisNode.setAttribute('bp-show', _thisSubModelAbs);\r\n                }\r\n\r\n                this.bindShow(_thisNode);\r\n            }\r\n\r\n            if (_thisNode.children.length > 0) {\r\n                this.bindForItemsRecursion(_thisNode.children, scope, indexStack, data, itemIndex);\r\n            }\r\n        }\r\n\r\n        if (isInit) {\r\n            fn && fn.call(this, el);\r\n        }\r\n    };\r\n\r\n    observePath(obj, rootPath, paths, fns) {\r\n        if (Ballpen.isArray(paths)) {\r\n            let _path = obj;\r\n            let _key;\r\n\r\n            paths.forEach((key, index) => {\r\n                if (/^\\d+$/.test(key)) {\r\n                    key = parseInt(key);\r\n                }\r\n\r\n                if (index < paths.length - 1) {\r\n                    _path = _path[key];\r\n                } else {    \r\n                    _key = key;\r\n                }\r\n            });\r\n\r\n            rootPath = paths.join('.');\r\n\r\n            this.observeKey(_path, rootPath, _key, fns);\r\n        }\r\n    };\r\n\r\n    observeKey(obj, rootPath, key, fns = false) {            \r\n        if (Ballpen.isArray(key)) {\r\n            this.observePath(obj, rootPath, key, fns);\r\n        } else {\r\n            let yetVal = obj[key];\r\n            const currentPath = rootPath;\r\n           \r\n            if (Ballpen.isObject(yetVal)) {\r\n                Object.defineProperty(obj, key, {\r\n                    get: () => {\r\n                        return yetVal;\r\n                    },\r\n                    set: (nowVal) => {  \r\n                        if (nowVal !== yetVal) {\r\n                            fns && fns.forEach((fn) => {\r\n                                fn.call(this, yetVal, nowVal);\r\n                            });\r\n\r\n                            yetVal = nowVal;\r\n\r\n                            Ballpen.renderObjectValueByPath(this.dataListPure, currentPath, nowVal);\r\n                        }\r\n                    },\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n\r\n                Object.keys(yetVal).forEach((key) => {\r\n                    this.observeKey(yetVal, currentPath + '.' + key, key, fns);\r\n                });\r\n            } else if (Ballpen.isArray(yetVal)) {\r\n                Object.defineProperty(obj, key, {\r\n                    get: () => {\r\n                        return yetVal;\r\n                    },\r\n                    set: (nowVal) => {  \r\n                        if (nowVal !== yetVal) {\r\n                            fns && fns.forEach((fn) => {\r\n                                fn.call(this, yetVal, nowVal);\r\n                            });\r\n\r\n                            yetVal = nowVal;\r\n\r\n                            Ballpen.renderObjectValueByPath(this.dataListPure, currentPath, nowVal);\r\n                        }\r\n                    },\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n\r\n                this.observeArray(yetVal, currentPath, fns);\r\n            } else {\r\n                Object.defineProperty(obj, key, {\r\n                    get: () => {\r\n                        return yetVal;\r\n                    },\r\n                    set: (nowVal) => {  \r\n                        if (nowVal !== yetVal) {\r\n                            fns && fns.forEach((fn) => {\r\n                                fn.call(this, yetVal, nowVal);\r\n                            });\r\n\r\n                            yetVal = nowVal;\r\n\r\n                            Ballpen.renderObjectValueByPath(this.dataListPure, currentPath, nowVal);\r\n                        }\r\n                    },\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n            }\r\n        }\r\n    };\r\n    \r\n    observeArray(arr, rootPath, fns = false) {\r\n        const mutatorMethods = ['copyWithin', 'fill', 'pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'];\r\n        const arrayProto = Array.prototype;\r\n\r\n        // Prevent from polluting the global 'Array.prototype'\r\n        const hijackProto = Object.create(arrayProto);\r\n\r\n        const currentPath = rootPath;\r\n\r\n        mutatorMethods.forEach((method) => {\r\n            Object.defineProperty(hijackProto, method, {\r\n                enumerable: true,\r\n                configurable: true,\r\n                writable: true,\r\n                value: (...args) => {\r\n                    let yetVal = arr.slice();\r\n                    let resultVal = arrayProto[method].call(arr, ...args);\r\n                    let nowVal = arr;\r\n\r\n                    Ballpen.renderObjectValueByPath(this.dataListPure, currentPath, nowVal);\r\n                    // Callback\r\n                    fns && fns.forEach((fn) => {\r\n                        fn.call(this, yetVal, nowVal);\r\n                    }); \r\n\r\n                    return resultVal;\r\n                } \r\n            });\r\n        });\r\n        /* eslint-disable */\r\n        arr.__proto__ = hijackProto;\r\n        // arr.__proto__.__proto__ === Array.prototype; // true\r\n    };\r\n\r\n    register(obj, objPure, key, fn) {\r\n        const register = this.registers.find((item) => {\r\n            if (Object.is(item.obj, obj) && (item.key === key || item.key.toString() === key.toString())) {\r\n                return item;\r\n            }\r\n        });\r\n\r\n        if (register) {\r\n            register.fns.push(fn);\r\n        } else {\r\n            this.registers.push({\r\n                obj: obj,\r\n                rootPath: [],\r\n                key: key,\r\n                fns: [fn]\r\n            });\r\n        }\r\n    };\r\n\r\n    attach() {\r\n        this.registers.forEach((register) => {\r\n            this.observeKey(register.obj, register.rootPath, register.key, register.fns);\r\n        });\r\n    };\r\n\r\n}\r\n\r\nexport default Ballpen;\r\n"],"names":["Ballpen","el","dataModel","init","scan","this","document","querySelector","style","display","Error","event","eventList","initEventList","data","dataListPure","dataList","clone","modelList","watchers","watchersHook","Map","_watchers","watcher","_dataPath","_dataHook","handler","set","forEach","watcherFn","path","renderObjectValueByPath","_this","setProxy","parseData","registers","removedChildNodes","fnSet","fnGet","target","property","call","_this2","value","receiver","realProperty","test","substring","prop","descriptor","Reflect","defineProperty","Proxy","_thisEventObject","item","type","fn","i","children","length","_thisNode","hasAttributes","_attrs","attributes","_attrsArr","_attr","push","name","_fnType","split","_fnName","bindEvent","_bindKey","_bindValue","bindBind","includes","bindFor","bindModel","bindClass","bindShow","innerText","bindMoustache","update","attach","removeProperty","removeAttribute","node","remove","rootPath","modelName","wrapAbsPath","getAttribute","ignoreInnerDirectives","model","_this3","elStyle","register","yetVal","nowVal","index","match","tagName","_this4","_this5","classList","contains","add","context","args","addEventListener","_this6","_this7","setAttribute","scope","indexStack","trace","modelPaths","_pScope","_cScope","_t","log","parentNode","virtualDiv","createDocumentFragment","_div","cloneNode","bindForItemsRecursion","appendChild","firstChild","removeChild","itemIndex","isInit","child","isHTMLCollection","j","_attrsMain","_i","_thisSubModel","_thisSubModelAbs","replace","obj","paths","fns","isArray","_path","_key","key","parseInt","join","observeKey","observePath","currentPath","isObject","_this10","keys","observeArray","arr","mutatorMethods","arrayProto","Array","prototype","hijackProto","Object","create","method","slice","resultVal","_this11","__proto__","objPure","find","is","toString","val","_paths","str","dataObj","_list","_data","p","directiveValue","exceptList","regexp","copy","Date","setTime","getTime","len","attr","hasOwnProperty","relPath"],"mappings":"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"}