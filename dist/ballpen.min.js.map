{"version":3,"file":"ballpen.min.js","sources":["../src/ballpen.js"],"sourcesContent":["class Ballpen {\r\n\r\n    constructor(el, dataModel) { \r\n        // Init EventList\r\n        this.init(el, dataModel);\r\n        // Scan directives\r\n        this.scan(this.$el);\r\n    };\r\n\r\n    init(el, dataModel) {\r\n        this.$el = document.querySelector(el);\r\n\r\n        // Handle invalid root element\r\n        if (!this.$el) {\r\n            Ballpen.throwError(`Find an invalid root element when initializing Ballpen.js -> \"${el}\"`, 'Well, you should set a valid root element for Ballpen.js first constructor parameter, eg: \"#app\", \"#container\".');  \r\n        }\r\n\r\n        if (dataModel.events) {\r\n            this.$eventList = {};\r\n            this.initEventList(dataModel.events);\r\n        }\r\n\r\n        if (dataModel.data) {\r\n            // Set proxy to global data payload\r\n            this.$dataListPure = dataModel.data;\r\n            this.$dataList = Ballpen.clone(dataModel.data);\r\n        }\r\n\r\n        if (dataModel.watchers) {\r\n            // Find every reference node in datalist\r\n            this.watchersHook = Ballpen.findReferenceNode(this.$dataList);\r\n\r\n            let _watchers = dataModel.watchers;\r\n\r\n            for (let _watcher in _watchers) {\r\n                const _watcherEntity = {\r\n                    root: _watcher,\r\n                    handler: _watchers[_watcher].handler\r\n                };\r\n\r\n                this.watchersHook.forEach((watcherQueue, path) => {\r\n                    if (new RegExp(\"^\" + _watcher, \"ig\").test(path)) {\r\n                        watcherQueue.push(_watcherEntity);\r\n                    }\r\n                });\r\n            }\r\n\r\n            // Mount watchers\r\n            this.watchersHook.forEach((watcherQueue, path) => {\r\n                Ballpen.renderObjectValueByPath(this.$dataList, path, this.setProxy(path, watcherQueue));\r\n            });\r\n        }\r\n\r\n        // Other initializations\r\n        this.$registers = [];\r\n    };\r\n\r\n    setProxy(path, watcherQueue) {\r\n        let _dist = Ballpen.parseData(path, this.$dataList).data;\r\n\r\n        let _oldVal = Ballpen.parseData(path, this.$dataListPure).data;\r\n\r\n        let handler = {\r\n            get: (_target, _property) => {\r\n                // Run callback\r\n                watcherQueue.forEach((entity) => {\r\n                    let _fn = entity.handler;\r\n                    let _path = entity.root;\r\n\r\n                    _fn && _fn.call(this, Ballpen.parseData(_path, this.$dataListPure).data, Ballpen.parseData(_path, this.$dataList).data);\r\n                });\r\n                \r\n                return _target[_property];\r\n            },\r\n            set: (_target, _property, _value, receiver) => {\r\n                // Run callback\r\n                if (_value !== _oldVal[_property]) {\r\n                    _oldVal[_property] = _value;\r\n                    _target[_property] = _value;\r\n\r\n                    watcherQueue.forEach((entity) => {\r\n                        let _fn = entity.handler;\r\n                        let _path = entity.root;\r\n\r\n                        _fn && _fn.call(this, Ballpen.parseData(_path, this.$dataListPure).data, Ballpen.parseData(_path, this.$dataList).data);\r\n                    });\r\n                }\r\n\r\n                // Return true to accept the changes\r\n                return true;\r\n            },\r\n            defineProperty: (target, prop, descriptor) => {\r\n                return Reflect.defineProperty(target, prop, descriptor);\r\n            }\r\n        };\r\n\r\n        // Can not set a proxy on a single value (!! need to be fixed !!)\r\n        return new Proxy(_dist, handler);\r\n    };\r\n\r\n    initEventList(eventList) {\r\n        if (eventList) {\r\n            let _thisEventObject = eventList;\r\n            for (let item in _thisEventObject) {\r\n                this.$eventList[item]      = {};\r\n                this.$eventList[item].type = '';\r\n                this.$eventList[item].fn   = _thisEventObject[item];\r\n            }\r\n        }\r\n    };\r\n\r\n    scan(el, init = true) {\r\n        for (let i = 0; i < el.children.length; i++) {\r\n            let _thisNode = el.children[i];\r\n     \r\n            // Bind\r\n            if (_thisNode.hasAttributes()) {\r\n                let _attrs = _thisNode.attributes;\r\n                let _attrsArr = [];\r\n\r\n                for (let i = 0; i < _attrs.length; i++) {\r\n                    const _attr = _attrs.item(i);\r\n                    _attrsArr.push(_attr.name);\r\n\r\n                    if (/bp-event:/ig.test(_attr.name)) {\r\n                        let _fnType = _attr.name.split(':')[1];\r\n                        let _fnName = _attr.value;\r\n                        this.bindEvent(_thisNode, _fnName, _fnType, this.$dataList);\r\n                    }\r\n\r\n                    if (/bp-bind:/ig.test(_attr.name)) {\r\n                        let _bindKey   = _attr.name.split(':')[1];\r\n                        let _bindValue = _attr.value;\r\n                        this.bindBind(_thisNode, _bindValue, _bindKey);\r\n                    }\r\n                }\r\n\r\n                if (_attrsArr.includes('bp-pre')) {\r\n                    continue;\r\n                }\r\n\r\n                if (_attrsArr.includes('bp-for')) {\r\n                    this.bindFor(_thisNode);\r\n                    continue;\r\n                }\r\n\r\n                if (_attrsArr.includes('bp-model')) {\r\n                    this.bindModel(_thisNode);\r\n                }\r\n\r\n                if (_attrsArr.includes('bp-class')) {\r\n                    this.bindClass(_thisNode);\r\n                }\r\n\r\n                if (_attrsArr.includes('bp-show')) {\r\n                    this.bindShow(_thisNode);\r\n                }\r\n            }\r\n\r\n            // Moustache binding\r\n            let childNodes = _thisNode.childNodes;\r\n            childNodes.forEach((item, key) => {\r\n                if (item.nodeType === Node.TEXT_NODE) {\r\n                    this.bindMoustache(_thisNode, item);\r\n                }\r\n            });\r\n\r\n            // Recursion\r\n            if (_thisNode.children.length > 0) {\r\n                this.scan(_thisNode, false);\r\n            }\r\n        }\r\n\r\n        if (init) {\r\n            // Attach observers\r\n            this.attach();\r\n            // Show rendered view\r\n            this.$el.removeAttribute('bp-shade');\r\n        }   \r\n    };\r\n\r\n    static findReferenceNode(obj, map = new Map(), root = '') {\r\n        let _root = root;\r\n\r\n        if (Ballpen.isObject(obj)) {\r\n            for (let _i in obj) {\r\n                if (Ballpen.isObject(obj[_i]) || Ballpen.isArray(obj[_i])) {\r\n                    _root += `${_i}.`;\r\n\r\n                    map.set(_root.slice(0, -1), []);\r\n\r\n                    Ballpen.findReferenceNode(obj[_i], map, _root);\r\n                }\r\n            }\r\n        } else if (Ballpen.isArray(obj)) {\r\n            obj.forEach((_i, _index) => {\r\n                if (Ballpen.isObject(_i) || Ballpen.isArray(_i)) {\r\n                    _root += `${_index}.`;\r\n\r\n                    map.set(_root.slice(0, -1), []);\r\n\r\n                    Ballpen.findReferenceNode(_i, map, _root);\r\n                }\r\n            });\r\n        }\r\n\r\n        return map;\r\n    }\r\n\r\n    static isHTMLCollection(obj) {\r\n        return Object.prototype.toString.call(obj) === '[object HTMLCollection]';\r\n    };\r\n\r\n    static isArray(arr) {\r\n        return Array.isArray(arr) || Object.prototype.toString.call(arr) === '[object Array]';\r\n    };\r\n\r\n    static toArray(collection) {\r\n        return Array.prototype.slice.call(collection);\r\n    }\r\n\r\n    static isObject(obj) {\r\n        return Object.prototype.toString.call(obj) === '[object Object]';\r\n    };\r\n\r\n    static renderObjectValueByPath(obj, path, val) {\r\n        let _paths = path.split('.');\r\n\r\n        if (typeof Ballpen.parseData(path, obj).data === 'undefined') {\r\n            Ballpen.throwError(`Find an invalid watcher path when initializing Ballpen.js -> \"${path}\"`, 'Please make sure the watcher path you set is exist and valid.');  \r\n        }\r\n\r\n        if (_paths.length === 1) {\r\n            obj[_paths[0]] = val;\r\n        } else {\r\n            for (let i = 0; i < _paths.length - 1; i++) {\r\n                obj = obj[_paths[i]];\r\n                if (!obj) {\r\n                    Ballpen.throwError(`Find an invalid watcher path when initializing Ballpen.js -> \"${path}\"`, 'Please make sure the watcher path you set is exist and valid.');  \r\n                }\r\n\r\n                if (i === _paths.length - 2) {\r\n                    obj[_paths[_paths.length - 1]] = val;\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    static parseData(str, dataObj) {\r\n        const _list = str.split('.');\r\n        let _data = dataObj;\r\n        let p = [];\r\n\r\n        _list.forEach((key, index) => {\r\n            if (index === 0) {\r\n                _data = dataObj[key];\r\n                p.push(key);\r\n            } else {\r\n                _data = _data[key];\r\n                p.push(key);\r\n            }\r\n        });\r\n\r\n        return {\r\n            path: p,\r\n            data: _data\r\n        };\r\n    };\r\n\r\n    static ignoreInnerDirectives(directiveValue, exceptList, fn, ...args) {\r\n        exceptList.forEach((regexp) => {\r\n            if (regexp.test(directiveValue)) {\r\n                fn && fn.call(this, ...args);\r\n            }\r\n        });\r\n\r\n        if (!/^@/ig.test(directiveValue)) {\r\n            fn && fn.call(this, ...args);\r\n        }\r\n    };\r\n\r\n    static clone(obj) {\r\n        let copy;\r\n\r\n        if (obj === null || typeof obj !== 'object') return obj;\r\n\r\n        if (obj instanceof Date) {\r\n            copy = new Date();\r\n            copy.setTime(obj.getTime());\r\n            return copy;\r\n        }\r\n\r\n        if (obj instanceof Array) {\r\n            copy = [];\r\n            for (var i = 0, len = obj.length; i < len; i++) {\r\n                copy[i] = Ballpen.clone(obj[i]);\r\n            }\r\n            return copy;\r\n        }\r\n\r\n        if (obj instanceof Object) {\r\n            copy = {};\r\n            for (var attr in obj) {\r\n                if (obj.hasOwnProperty(attr)) copy[attr] = Ballpen.clone(obj[attr]);\r\n            }\r\n            return copy;\r\n        }\r\n\r\n        Ballpen.throwError('Internal error, unable to copy object, type is not supported.', 'Please contact the author to fix this issue.');  \r\n    };\r\n\r\n    static wrapAbsPath(rootPath, relPath) {\r\n        return (Ballpen.isArray(rootPath) && rootPath.length > 0 ? (rootPath.join('.') + '.') : (rootPath.toString().length > 0 ? (rootPath.toString() + '.') : '')) + \r\n        (Ballpen.isArray(relPath) && relPath.length > 0 ? relPath.join('.') : (relPath.toString().length > 0 ? relPath.toString() : ''));\r\n    };\r\n\r\n    static throwError(err, desc) {\r\n        let _e = new Error(`[Ballpen Parser Error] \\n\\n [Message] \\n\\n - ${err} \\n\\n [Description] \\n\\n - ${desc} \\n`); \r\n        _e.name = 'BallpenError';     \r\n\r\n        throw _e;           \r\n    };\r\n    \r\n    static randomSequence(n) {\r\n        let chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\r\n        let res = '';\r\n\r\n        for (let i = 0; i < n; i++) {\r\n            let id = Math.ceil(Math.random() * 35);\r\n            res += chars[id];\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    bindShow(el, rootPath = []) {\r\n        const modelName = Ballpen.wrapAbsPath(rootPath, el.getAttribute('bp-show')); \r\n\r\n        Ballpen.ignoreInnerDirectives(modelName, [], (el) => {\r\n            const model = Ballpen.parseData(modelName, this.$dataList);\r\n\r\n            const elStyle = el.style;\r\n \r\n            (!model.data ? elStyle.display = 'none' : (elStyle.removeProperty ? elStyle.removeProperty('display') : elStyle.removeAttribute('display')));\r\n\r\n            this.register(this.$dataList, this.$dataListPure, model.path, (yetVal, nowVal) => {\r\n                (!nowVal ? elStyle.display = 'none' : (elStyle.removeProperty ? elStyle.removeProperty('display') : elStyle.removeAttribute('display')));\r\n            });\r\n        }, el);\r\n    };\r\n\r\n    bindModel(el, rootPath = []) {\r\n        const modelName = Ballpen.wrapAbsPath(rootPath, el.getAttribute('bp-model'));\r\n\r\n        Ballpen.ignoreInnerDirectives(modelName, [/^@{([\\d]+)}$/ig], (el) => {\r\n            // Handel 'for' list index\r\n            if (/^@{([\\d]+)}$/ig.test(modelName)) {\r\n                let index = modelName.match(/^@{([\\d]+)}$/)[1];\r\n\r\n                (el.tagName === 'INPUT' ? el.value = index : el.innerText = index);\r\n            } else {\r\n                const model = Ballpen.parseData(modelName, this.$dataList);\r\n\r\n                (el.tagName === 'INPUT' ? el.value = model.data : el.innerText = model.data);\r\n\r\n                this.register(this.$dataList, this.$dataListPure, model.path, (yetVal, nowVal) => {\r\n                    (el.tagName === 'INPUT' ? el.value = nowVal : el.innerText = nowVal);\r\n                });\r\n            }\r\n        }, el);\r\n    };\r\n\r\n    bindMoustache(el, subTextNode, rootPath = []) {\r\n        let subTextNodeValuePure = subTextNode.nodeValue;\r\n        let subTextNodeValueRendered = subTextNode.nodeValue;\r\n        let subPatterns = subTextNodeValueRendered.match(/{{.*?}}/ig);\r\n        let modelsMapper = {};\r\n\r\n        if (Ballpen.isArray(subPatterns) && subPatterns.length > 0) {\r\n            subPatterns.forEach((pattern) => {\r\n                let modelName = pattern.slice(2, -2).trim();\r\n\r\n                if (/^@{([\\d]+)}$/ig.test(modelName)) {\r\n                    modelsMapper[pattern] = modelName.match(/^@{([\\d]+)}$/)[1];\r\n                } else {\r\n                    let model = Ballpen.parseData(Ballpen.wrapAbsPath(rootPath, modelName), this.$dataList);\r\n                    modelsMapper[pattern] = model.data;\r\n\r\n                    this.register(this.$dataList, this.$dataListPure, model.path, (yetVal, nowVal) => {\r\n                        modelsMapper[`{{ ${model.path.join('.')} }}`] = nowVal;\r\n                        for (let pattern in modelsMapper) {\r\n                            subTextNodeValueRendered = subTextNodeValuePure.replace(pattern, modelsMapper[pattern]);\r\n                        }\r\n\r\n                        subTextNode.nodeValue = subTextNodeValueRendered;\r\n                    });\r\n                }\r\n            });\r\n            \r\n            for (let pattern in modelsMapper) {\r\n                subTextNodeValueRendered = subTextNodeValuePure.replace(pattern, modelsMapper[pattern]);\r\n            }      \r\n        }\r\n\r\n        subTextNode.nodeValue = subTextNodeValueRendered;\r\n    };\r\n\r\n    bindClass(el, rootPath = []) {\r\n        const modelName = Ballpen.wrapAbsPath(rootPath, el.getAttribute('bp-class'));\r\n\r\n        Ballpen.ignoreInnerDirectives(modelName, [], (el) => {\r\n            const model = Ballpen.parseData(modelName, this.$dataList);\r\n\r\n            if (!el.classList.contains(model.data)) {\r\n                el.classList.add(model.data);\r\n            }\r\n\r\n            this.register(this.$dataList, this.$dataListPure, model.path, (yetVal, nowVal) => {\r\n                el.classList.remove(yetVal);\r\n                if (!el.classList.contains(nowVal)) {\r\n                    el.classList.add(nowVal);\r\n                }\r\n            });\r\n        }, el);\r\n    };\r\n\r\n    bindEvent(el, _fnName, _fnType, context, args = {}) {\r\n        Ballpen.ignoreInnerDirectives(_fnName, [], (el, _fnName, _fnType, context) => {\r\n            // Update global event list\r\n            this.$eventList[_fnName]['type'] = _fnType;\r\n            \r\n            // Bind listener, set callback fn to global data context\r\n            el.addEventListener(_fnType, () => {\r\n                this.$eventList[_fnName]['fn'].call(this.$dataList, el, context, args);\r\n            });\r\n        }, el, _fnName, _fnType, context, args);\r\n    };\r\n\r\n    bindBind(el, _bindValue, _bindKey, rootPath = []) {\r\n        Ballpen.ignoreInnerDirectives(_bindValue, [], (el, _bindValue, _bindKey) => {\r\n            const modelName = Ballpen.wrapAbsPath(rootPath, _bindValue);\r\n            const model = Ballpen.parseData(modelName, this.$dataList);\r\n\r\n            // Set customized attribute\r\n            el.setAttribute(_bindKey, model.data);\r\n            \r\n            // Bind listener, set callback fn to global data context\r\n            this.register(this.$dataList, this.$dataListPure, model.path, (yetVal, nowVal) => {\r\n                el.setAttribute(_bindKey, nowVal);\r\n            });\r\n        }, el, _bindValue, _bindKey);\r\n    };\r\n\r\n    bindFor(el, scope = {}, indexStack = {}) {\r\n        const modelPaths = el.getAttribute('bp-for').split(/\\s+in\\s+/);\r\n        const _pScope = modelPaths[1];\r\n        const _cScope = modelPaths[0];\r\n        const _identifyKey = Ballpen.randomSequence(12);\r\n\r\n        if (!/^@/ig.test(_cScope)) {\r\n            Ballpen.throwError(`Invalid alias name when initializing a \"bp-for\" condition -> \"${_cScope}\".`, 'Please make sure the alias name is start with a \"@\" symbol.');  \r\n        }\r\n        \r\n        // Update scope array\r\n        if (/\\./ig.test(_pScope)) {\r\n            const _t = _pScope.split('.');\r\n            scope[_pScope] = scope[_t[0]] + '.' + _t[1];\r\n        } else {\r\n            scope[_pScope] = _pScope;\r\n        }\r\n\r\n        // Set closure variables\r\n        let closureScope = Ballpen.clone(scope);\r\n        let closureIndexStack = Ballpen.clone(indexStack);\r\n\r\n        const model = Ballpen.parseData(scope[_pScope], this.$dataList);\r\n        \r\n        let parentNode = el.parentNode;\r\n        let virtualDiv = document.createDocumentFragment();\r\n\r\n        for (let i = 0; i < model.data.length; i++) {\r\n            let _div = el.cloneNode(true);\r\n            let _dataPath = `${scope[_pScope]}.${i}`;\r\n\r\n            // Update current scope chain\r\n            scope[_cScope] = _dataPath;\r\n\r\n            // Update current index chain\r\n            indexStack[_cScope] = i;\r\n\r\n            _div.removeAttribute('bp-for');\r\n            _div.setAttribute('bp-for-rendered-id', _identifyKey);\r\n\r\n            this.bindForItemsRecursion(_div, scope, indexStack, _dataPath, i, true, (el) => {\r\n                virtualDiv.appendChild(el);\r\n            });\r\n        }\r\n\r\n        parentNode.replaceChild(virtualDiv, el);\r\n\r\n        // Set register\r\n        this.register(this.$dataList, this.$dataListPure, model.path, (yetVal, nowVal) => {\r\n            let virtualDiv = document.createDocumentFragment();\r\n\r\n            for (let i = 0; i < nowVal.length; i++) {\r\n                let _div = el.cloneNode(true);\r\n                let _dataPath = `${closureScope[_pScope]}.${i}`;\r\n\r\n                // Update current scope chain\r\n                closureScope[_cScope] = _dataPath;\r\n\r\n                // Update current index chain\r\n                closureIndexStack[_cScope] = i;\r\n\r\n                _div.removeAttribute('bp-for');\r\n                _div.setAttribute('bp-for-rendered-id', _identifyKey);\r\n\r\n                this.bindForItemsRecursion(_div, closureScope, closureIndexStack, _dataPath, i, true, (el) => {\r\n                    virtualDiv.appendChild(el);\r\n                });\r\n            }\r\n\r\n            let replaceChilds = parentNode.querySelectorAll(`[bp-for-rendered-id='${_identifyKey}']`);\r\n            for (let i = 0; i < replaceChilds.length; i++) {\r\n                if (i === 0) {\r\n                    parentNode.replaceChild(virtualDiv, replaceChilds.item(i));\r\n                } else {\r\n                    replaceChilds.item(i).remove();\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    bindForItemsRecursion(el, scope, indexStack, data, itemIndex, isInit = false, fn = false) {\r\n        let child = !!Ballpen.isHTMLCollection(el);\r\n\r\n        for (let j = 0; j < (child ? el.length : 1); j++) {\r\n            const _thisNode = (child ? el[j] : el);\r\n\r\n            // Render moustache\r\n            let childNodes = _thisNode.childNodes;\r\n            childNodes.forEach((item, key) => {\r\n                if (item.nodeType === Node.TEXT_NODE) {\r\n                    let subTextNodeValuePure = item.nodeValue;\r\n                    let subTextNodeValueRendered = item.nodeValue;\r\n\r\n                    let subPatterns = subTextNodeValueRendered.match(/{{.*?}}/ig);\r\n                    let modelsMapper = {};\r\n\r\n                    if (Ballpen.isArray(subPatterns) && subPatterns.length > 0) {\r\n                        subPatterns.forEach((pattern) => {\r\n                            let _thisSubModel = pattern.slice(2, -2).trim();\r\n                            let _thisSubModelAbs = _thisSubModel;\r\n\r\n                            if (/^@/ig.test(_thisSubModel)) {\r\n                            // Get index\r\n                                if (/\\[\\[index\\]\\]/ig.test(_thisSubModel)) {\r\n                                    _thisSubModelAbs = '@{' + `${indexStack[_thisSubModel.match(/^(.*)\\[\\[index\\]\\]$/)[1]]}` + '}';\r\n                                } else {\r\n                                    _thisSubModelAbs = _thisSubModel.replace(/^@[a-z0-9A-Z_]*/, scope[_thisSubModel.split('.')[0]]);  \r\n                                }\r\n                            }\r\n\r\n                            modelsMapper[pattern] = `{{ ${_thisSubModelAbs} }}`;\r\n                        });\r\n                        \r\n                        for (let pattern in modelsMapper) {\r\n                            subTextNodeValueRendered = subTextNodeValuePure.replace(pattern, modelsMapper[pattern]);\r\n                        }      \r\n                    }\r\n\r\n                    item.nodeValue = subTextNodeValueRendered;\r\n\r\n                    this.bindMoustache(_thisNode, item);\r\n                }\r\n            });\r\n\r\n            if (!_thisNode.hasAttributes() && child) {\r\n                if (_thisNode.children.length > 0) {\r\n                    this.bindForItemsRecursion(_thisNode.children, scope, indexStack, data, itemIndex);\r\n                }\r\n                continue;\r\n            }\r\n\r\n            // Bind normal render tag\r\n            let _attrsMain = _thisNode.attributes;\r\n            let _attrsArr = [];\r\n\r\n            for (let i = 0; i < _attrsMain.length; i++) {\r\n                let _i = _attrsMain.item(i);\r\n                _attrsArr.push(_i.name);\r\n\r\n                // Bind event\r\n                if (/bp-event:/ig.test(_i.name)) {\r\n                    let _fnType = _i.name.split(':')[1];\r\n                    let _fnName = _i.value;\r\n\r\n                    if (/^@:/ig.test(_fnName)) {\r\n                        this.bindEvent(_thisNode, _fnName.split(':')[1], _fnType, this.$dataList, {\r\n                            index: itemIndex\r\n                        });\r\n                    } else {\r\n                        this.bindEvent(_thisNode, _fnName, _fnType, this.$dataList, {});\r\n                    }\r\n                }\r\n\r\n                if (/bp-bind:/ig.test(_i.name)) {\r\n                    let _bindKey = _i.name.split(':')[1];\r\n                    let _thisSubModelAbs = _i.value;\r\n\r\n                    if (/^@/ig.test(_thisSubModelAbs)) {\r\n                        _thisSubModelAbs = _thisSubModelAbs.replace(/^@[a-z0-9A-Z_]*/, scope[_thisSubModelAbs.split('.')[0]]);\r\n                    }\r\n\r\n                    this.bindBind(_thisNode, _thisSubModelAbs, _bindKey);\r\n                }\r\n            }\r\n\r\n            // Render 'for' list in another 'for' list\r\n            if (_attrsArr.includes('bp-for')) {\r\n                this.bindFor(_thisNode, scope, indexStack);\r\n                continue;\r\n            }\r\n\r\n            if (_attrsArr.includes('bp-class')) {\r\n                let _thisSubModel = _thisNode.getAttribute('bp-class');  \r\n                let _thisSubModelAbs = _thisSubModel;\r\n\r\n                if (/^@/ig.test(_thisSubModel)) {\r\n                    _thisSubModelAbs = _thisSubModel.replace(/^@[a-z0-9A-Z_]*/, scope[_thisSubModel.split('.')[0]]);\r\n                }\r\n\r\n                if (_thisSubModelAbs !== _thisSubModel) {\r\n                    _thisNode.setAttribute('bp-class', _thisSubModelAbs);\r\n                }\r\n\r\n                this.bindClass(_thisNode);\r\n            }\r\n\r\n            if (_attrsArr.includes('bp-model')) {\r\n                let _thisSubModel = _thisNode.getAttribute('bp-model');\r\n                let _thisSubModelAbs = _thisSubModel;\r\n\r\n                if (/^@/ig.test(_thisSubModel)) {\r\n                    // Get index\r\n                    if (/\\[\\[index\\]\\]/ig.test(_thisSubModel)) {\r\n                        _thisSubModelAbs = '@{' + `${indexStack[_thisSubModel.match(/^(.*)\\[\\[index\\]\\]$/)[1]]}` + '}';\r\n                    } else if (/@{\\d+}/ig.test(_thisSubModel)) {\r\n                        _thisSubModelAbs = _thisSubModel;\r\n                    } else {\r\n                        _thisSubModelAbs = _thisSubModel.replace(/^@[a-z0-9A-Z_]*/, scope[_thisSubModel.split('.')[0]]);  \r\n                    }\r\n                }\r\n                \r\n                if (_thisSubModelAbs !== _thisSubModel) {\r\n                    _thisNode.setAttribute('bp-model', _thisSubModelAbs);\r\n                }\r\n\r\n                this.bindModel(_thisNode);\r\n            }\r\n\r\n            if (_attrsArr.includes('bp-show')) {\r\n                let _thisSubModel = _thisNode.getAttribute('bp-show');\r\n                let _thisSubModelAbs = _thisSubModel;\r\n\r\n                if (/^@/ig.test(_thisSubModel)) {\r\n                    _thisSubModelAbs = _thisSubModel.replace(/^@[a-z0-9A-Z_]*/, scope[_thisSubModel.split('.')[0]]);\r\n                }\r\n\r\n                if (_thisSubModelAbs !== _thisSubModel) {\r\n                    _thisNode.setAttribute('bp-show', _thisSubModelAbs);\r\n                }\r\n\r\n                this.bindShow(_thisNode);\r\n            }\r\n\r\n            if (_thisNode.children.length > 0) {\r\n                this.bindForItemsRecursion(_thisNode.children, scope, indexStack, data, itemIndex);\r\n            }\r\n        }\r\n\r\n        if (isInit) {\r\n            fn && fn.call(this, el);\r\n        }\r\n    };\r\n\r\n    observePath(obj, rootPath, paths, fns) {\r\n        if (Ballpen.isArray(paths)) {\r\n            let _path = obj;\r\n            let _key;\r\n\r\n            paths.forEach((key, index) => {\r\n                if (/^\\d+$/.test(key)) {\r\n                    key = parseInt(key);\r\n                }\r\n\r\n                if (index < paths.length - 1) {\r\n                    _path = _path[key];\r\n                } else {    \r\n                    _key = key;\r\n                }\r\n            });\r\n\r\n            rootPath = paths.join('.');\r\n\r\n            this.observeKey(_path, rootPath, _key, fns);\r\n        }\r\n    };\r\n\r\n    observeKey(obj, rootPath, key, fns = false) {            \r\n        if (Ballpen.isArray(key)) {\r\n            this.observePath(obj, rootPath, key, fns);\r\n        } else {\r\n            let yetVal = obj[key];\r\n            const currentPath = rootPath;\r\n           \r\n            if (Ballpen.isObject(yetVal)) {\r\n                Object.defineProperty(obj, key, {\r\n                    get: () => {\r\n                        return yetVal;\r\n                    },\r\n                    set: (nowVal) => {  \r\n                        if (nowVal !== yetVal) {\r\n                            fns && fns.forEach((fn) => {\r\n                                fn.call(this, yetVal, nowVal);\r\n                            });\r\n\r\n                            yetVal = nowVal;\r\n\r\n                            Ballpen.renderObjectValueByPath(this.$dataListPure, currentPath, nowVal);\r\n                        }\r\n                    },\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n\r\n                Object.keys(yetVal).forEach((key) => {\r\n                    this.observeKey(yetVal, currentPath + '.' + key, key, fns);\r\n                });\r\n            } else if (Ballpen.isArray(yetVal)) {\r\n                Object.defineProperty(obj, key, {\r\n                    get: () => {\r\n                        return yetVal;\r\n                    },\r\n                    set: (nowVal) => {  \r\n                        if (nowVal !== yetVal) {\r\n                            fns && fns.forEach((fn) => {\r\n                                fn.call(this, yetVal, nowVal);\r\n                            });\r\n\r\n                            yetVal = nowVal;\r\n\r\n                            Ballpen.renderObjectValueByPath(this.$dataListPure, currentPath, nowVal);\r\n                        }\r\n                    },\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n\r\n                this.observeArray(yetVal, currentPath, fns);\r\n            } else {\r\n                Object.defineProperty(obj, key, {\r\n                    get: () => {\r\n                        return yetVal;\r\n                    },\r\n                    set: (nowVal) => {  \r\n                        if (nowVal !== yetVal) {\r\n                            fns && fns.forEach((fn) => {\r\n                                fn.call(this, yetVal, nowVal);\r\n                            });\r\n\r\n                            yetVal = nowVal;\r\n\r\n                            Ballpen.renderObjectValueByPath(this.$dataListPure, currentPath, nowVal);\r\n                        }\r\n                    },\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n            }\r\n        }\r\n    };\r\n    \r\n    observeArray(arr, rootPath, fns = false) {\r\n        const mutatorMethods = ['copyWithin', 'fill', 'pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'];\r\n        const arrayProto = Array.prototype;\r\n\r\n        // Prevent from polluting the global 'Array.prototype'\r\n        const hijackProto = Object.create(arrayProto);\r\n\r\n        const currentPath = rootPath;\r\n\r\n        mutatorMethods.forEach((method) => {\r\n            Object.defineProperty(hijackProto, method, {\r\n                enumerable: true,\r\n                configurable: true,\r\n                writable: true,\r\n                value: (...args) => {\r\n                    let yetVal = arr.slice();\r\n                    let resultVal = arrayProto[method].call(arr, ...args);\r\n                    let nowVal = arr;\r\n\r\n                    Ballpen.renderObjectValueByPath(this.$dataListPure, currentPath, nowVal);\r\n                    // Callback\r\n                    fns && fns.forEach((fn) => {\r\n                        fn.call(this, yetVal, nowVal);\r\n                    }); \r\n\r\n                    return resultVal;\r\n                } \r\n            });\r\n        });\r\n        /* eslint-disable */\r\n        arr.__proto__ = hijackProto;\r\n        // arr.__proto__.__proto__ === Array.prototype; // true\r\n    };\r\n\r\n    register(obj, objPure, key, fn) {\r\n        const register = this.$registers.find((item) => {\r\n            if (Object.is(item.obj, obj) && (item.key === key || item.key.toString() === key.toString())) {\r\n                return item;\r\n            }\r\n        });\r\n\r\n        if (register) {\r\n            register.fns.push(fn);\r\n        } else {\r\n            this.$registers.push({\r\n                obj: obj,\r\n                rootPath: [],\r\n                key: key,\r\n                fns: [fn]\r\n            });\r\n        }\r\n    };\r\n\r\n    attach() {\r\n        this.$registers.forEach((register) => {\r\n            this.observeKey(register.obj, register.rootPath, register.key, register.fns);\r\n        });\r\n    };\r\n\r\n}\r\n\r\nexport default Ballpen;\r\n"],"names":["Ballpen","el","dataModel","init","scan","this","$el","document","querySelector","throwError","events","$eventList","initEventList","data","$dataListPure","$dataList","clone","watchers","watchersHook","findReferenceNode","_watchers","_watcher","_watcherEntity","handler","forEach","watcherQueue","path","RegExp","test","push","renderObjectValueByPath","_this","setProxy","$registers","_dist","parseData","_oldVal","_target","_property","entity","_fn","_path","root","call","_this2","_value","receiver","target","prop","descriptor","Reflect","defineProperty","Proxy","eventList","_thisEventObject","item","type","fn","i","_thisNode","children","hasAttributes","_attrs","attributes","_attrsArr","length","_attr","name","_fnType","split","_fnName","value","bindEvent","_this3","_bindKey","_bindValue","bindBind","includes","bindFor","bindModel","bindClass","bindShow","childNodes","key","nodeType","Node","TEXT_NODE","bindMoustache","attach","removeAttribute","rootPath","modelName","wrapAbsPath","getAttribute","ignoreInnerDirectives","model","_this4","elStyle","style","removeProperty","display","register","yetVal","nowVal","index","match","tagName","innerText","_this5","subTextNode","subTextNodeValuePure","nodeValue","subTextNodeValueRendered","subPatterns","modelsMapper","isArray","pattern","slice","trim","_this6","join","replace","_this7","classList","contains","add","remove","context","args","addEventListener","_this8","_this9","setAttribute","scope","indexStack","modelPaths","_pScope","_cScope","_identifyKey","randomSequence","_t","closureScope","closureIndexStack","parentNode","virtualDiv","createDocumentFragment","_div","cloneNode","_dataPath","bindForItemsRecursion","appendChild","replaceChild","replaceChilds","querySelectorAll","itemIndex","isInit","child","isHTMLCollection","j","_thisSubModel","_thisSubModelAbs","_attrsMain","_i","_this11","obj","paths","fns","_key","parseInt","observeKey","observePath","currentPath","isObject","_this13","keys","observeArray","arr","mutatorMethods","arrayProto","Array","prototype","hijackProto","Object","create","method","resultVal","_this14","__proto__","objPure","find","is","toString","map","Map","_root","set","_index","collection","val","_paths","str","dataObj","_list","_data","p","directiveValue","exceptList","regexp","copy","Date","setTime","getTime","len","attr","hasOwnProperty","relPath","err","desc","_e","Error","n","chars","res","id","Math","ceil","random"],"mappings":"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"}