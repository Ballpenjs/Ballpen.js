{"version":3,"file":"ballpen.min.js","sources":["../src/ballpen.js"],"sourcesContent":["class Ballpen {\r\n\r\n    constructor(el, dataModel) { \r\n        // Init EventList\r\n        this.init(el, dataModel);\r\n        // Scan lables\r\n        this.scan(this.el);\r\n    };\r\n\r\n    init(el, dataModel) {\r\n        this.el = document.querySelector(el);\r\n\r\n        // Handle invalid root element\r\n        if (!this.el) {\r\n            throw new Error('[Ballpen] Invalid root element!');    \r\n        }\r\n\r\n        this.dataModel = dataModel;\r\n\r\n        if (dataModel.event) {\r\n            this.eventList = {};\r\n            this.initEventList(dataModel.event);\r\n        }\r\n\r\n        if (dataModel.data) {\r\n            this.dataList = dataModel.data;\r\n            this.modelList = {};\r\n        }\r\n\r\n        // Others\r\n        this.registers = [];\r\n    };\r\n\r\n    initEventList(eventList) {\r\n        if (eventList) {\r\n            let _thisEventObject = eventList;\r\n            for (let item in _thisEventObject) {\r\n                this.eventList[item]      = {};\r\n                this.eventList[item].type = '';\r\n                this.eventList[item].fn   = _thisEventObject[item];\r\n            }\r\n        }\r\n    };\r\n\r\n    scan(el) {\r\n        for (let i = 0; i < el.children.length; i++) {\r\n            let _thisNode = el.children[i];\r\n            console.log(el.children.length);\r\n            // Bind\r\n            this.bind(_thisNode);\r\n\r\n            // Recursion\r\n            if (_thisNode.children.length > 0) {\r\n                this.scan(_thisNode);\r\n            }\r\n        }\r\n\r\n        this.attach();\r\n    };\r\n\r\n    bind(el) {\r\n        if (!el.hasAttributes()) {\r\n            return;\r\n        }\r\n\r\n        let _attrs = el.attributes;\r\n\r\n        for (let i = 0; i < _attrs.length; i++) {\r\n            const _attr = _attrs.item(i);\r\n\r\n            if (_attr.name === 'bp-model') {\r\n                this.bindModel(el);\r\n            }\r\n\r\n            if (_attr.name === 'bp-class') {\r\n                this.bindClass(el);\r\n            }\r\n\r\n            if (/bp-event:/ig.test(_attr.name)) {\r\n                let _fnType = _attr.name.split(':')[1];\r\n                let _fnName = _attr.value;\r\n                this.bindEvent(el, _fnName, _fnType);\r\n            }\r\n\r\n            if (_attr.name === 'bp-for') {\r\n                this.bindFor(el);\r\n            }\r\n\r\n            if (_attr.name === 'bp-show') {\r\n                this.bindShow(el);\r\n            }\r\n        }\r\n    };\r\n\r\n    static isHTMLCollection(obj) {\r\n        return Object.prototype.toString.call(obj) === '[object HTMLCollection]';\r\n    }\r\n\r\n    static isArray(arr) {\r\n        return Array.isArray(arr) || Object.prototype.toString.call(arr) === '[object Array]';\r\n    }\r\n\r\n    static isObject(obj) {\r\n        return Object.prototype.toString.call(obj) === '[object Object]';\r\n    }\r\n\r\n    static parseData(str, dataObj) {\r\n        const _list = str.split('.');\r\n        let _data;\r\n        let p = [];\r\n\r\n        _list.forEach((key, index) => {\r\n            if (index === 0) {\r\n                _data = dataObj[key];\r\n                p.push(key);\r\n            } else {\r\n                _data = _data[key];\r\n                p.push(key);\r\n            }\r\n        });\r\n\r\n        return {\r\n            path: p,\r\n            data: _data\r\n        };\r\n    };\r\n\r\n    bindShow(el) {\r\n        const modelName = el.getAttribute('bp-show');\r\n        const model = Ballpen.parseData(modelName, this.dataList);\r\n        const elStyle = el.style;\r\n\r\n        (!model.data ? elStyle.display = 'none' : (elStyle.removeProperty ? elStyle.removeProperty('display') : elStyle.removeAttribute('display')));\r\n\r\n        this.register(this.dataList, model.path, (yetVal, nowVal) => {\r\n            (!nowVal ? elStyle.display = 'none' : (elStyle.removeProperty ? elStyle.removeProperty('display') : elStyle.removeAttribute('display')));\r\n        });\r\n    }\r\n\r\n    bindModel(el) {\r\n        const modelName = el.getAttribute('bp-model');\r\n        const model = Ballpen.parseData(modelName, this.dataList);\r\n\r\n        (el.tagName === 'INPUT' ? el.value = model.data : el.innerText = model.data);\r\n\r\n        this.register(this.dataList, model.path, (yetVal, nowVal) => {\r\n            (el.tagName === 'INPUT' ? el.value = nowVal : el.innerText = nowVal);\r\n        });\r\n    };\r\n\r\n    bindClass(el) {\r\n        const modelName = el.getAttribute('bp-class');\r\n        const model = Ballpen.parseData(modelName, this.dataList);\r\n\r\n        if (!el.classList.contains(model.data)) {\r\n            el.classList.add(model.data);\r\n        }\r\n\r\n        this.register(this.dataList, model.path, (yetVal, nowVal) => {\r\n            if (!el.classList.contains(nowVal)) {\r\n                el.classList.add(nowVal);\r\n            }\r\n        });\r\n    };\r\n\r\n    bindEvent(el, _fnName, _fnType) {\r\n        // Update global event list\r\n        this.eventList[_fnName]['type'] = _fnType;\r\n        \r\n        // Bind listener, set callback fn to global data context\r\n        el.addEventListener(_fnType, () => {\r\n            this.eventList[_fnName]['fn'].call(this.dataList, el);\r\n        });\r\n    };\r\n\r\n    bindFor(el) {\r\n        const modelName = el.getAttribute('bp-for');\r\n        console.log(modelName);\r\n        const model = Ballpen.parseData(modelName, this.dataList);\r\n\r\n        let parentNode = el.parentNode;\r\n        let virtualDiv = document.createDocumentFragment();\r\n\r\n        for (let i = 0; i < model.data.length; i++) {\r\n            let div = el.cloneNode(true);\r\n            let _dataPath = `${modelName}.${i}`;\r\n\r\n            div.removeAttribute('bp-for');\r\n\r\n            virtualDiv.appendChild(this.bindForItems(div, _dataPath));\r\n        }\r\n\r\n        parentNode.appendChild(virtualDiv);\r\n\r\n        // Set register\r\n        this.register(this.dataList, model.path, (yetVal, nowVal) => {\r\n            let virtualDiv = document.createDocumentFragment();\r\n\r\n            for (let i = 0; i < nowVal.length; i++) {\r\n                let div = el.cloneNode(true);\r\n                let _dataPath = `${modelName}.${i}`;\r\n\r\n                virtualDiv.appendChild(this.bindForItems(div, _dataPath));\r\n            }\r\n\r\n            while (parentNode.firstChild) {\r\n                parentNode.removeChild(parentNode.firstChild);\r\n            }\r\n\r\n            parentNode.appendChild(virtualDiv);\r\n        });\r\n\r\n        el.remove();\r\n    };\r\n\r\n    bindForItemsRecursion(el, data) {\r\n        let child = true;\r\n\r\n        if (!Ballpen.isHTMLCollection(el)) {\r\n            child = false;\r\n        }\r\n\r\n        for (let j = 0; j < (child ? el.length : 1); j++) {\r\n            const _thisNode = (child ? el[j] : el);\r\n\r\n            if (!_thisNode.hasAttributes()) {\r\n                continue;\r\n            }\r\n\r\n            // Replace for tag to normal render tag\r\n            let _attrsFake = _thisNode.attributes;\r\n            \r\n            for (let i = 0; i < _attrsFake.length; i++) {\r\n                const _attr = _attrsFake.item(i);\r\n\r\n                if (_attr.name === 'bp-for-show') {\r\n                    let _thisSubModel = _thisNode.getAttribute('bp-for-show');\r\n                    let _thisSubModelAbs = data + `.${_thisSubModel}`;\r\n\r\n                    _thisNode.setAttribute('bp-show', _thisSubModelAbs);\r\n                    _thisNode.removeAttribute('bp-for-show');\r\n                }\r\n\r\n                if (_attr.name === 'bp-for-class') {\r\n                    let _thisSubModel = _thisNode.getAttribute('bp-for-class');\r\n                    let _thisSubModelAbs = data + `.${_thisSubModel}`;\r\n\r\n                    _thisNode.setAttribute('bp-class', _thisSubModelAbs);\r\n                    _thisNode.removeAttribute('bp-for-class');\r\n                }\r\n\r\n                if (_attr.name === 'bp-for-model') {\r\n                    let _thisSubModel = _thisNode.getAttribute('bp-for-model');\r\n\r\n                    let _thisSubModelAbs;\r\n\r\n                    if (/^@\\./ig.test(_thisSubModel)) {\r\n                        let _subModel = _thisSubModel.split('.')[1];\r\n                        _thisSubModelAbs = data + `.${_subModel}`;\r\n                    } else if (/^@$/ig.test(_thisSubModel)) {\r\n                        _thisSubModelAbs = data + i.toString();\r\n                        console.log(_thisSubModelAbs);\r\n                    }\r\n\r\n                    _thisNode.setAttribute('bp-model', _thisSubModelAbs);\r\n                    _thisNode.removeAttribute('bp-for-model');\r\n                }\r\n            }\r\n\r\n            // Bind normal render tag\r\n            let _attrsMain = _thisNode.attributes;\r\n            \r\n            for (let i = 0; i < _attrsMain.length; i++) {\r\n                const _attr = _attrsMain.item(i);\r\n\r\n                if (_attr.name === 'bp-class') {\r\n                    this.bindClass(_thisNode);\r\n                }\r\n\r\n                if (/bp-event:/ig.test(_attr.name)) {\r\n                    let _fnType = _attr.name.split(':')[1];\r\n                    let _fnName = _attr.value;\r\n                    this.bindEvent(_thisNode, _fnName, _fnType);\r\n                }\r\n\r\n                if (_attr.name === 'bp-model') {\r\n                    this.bindModel(_thisNode);\r\n                }\r\n\r\n                if (_attr.name === 'bp-show') {\r\n                    this.bindShow(_thisNode);\r\n                }\r\n\r\n                // Render 'for' list in another 'for' had not been implemented yet\r\n            }\r\n\r\n            if (_thisNode.children.length > 0) {\r\n                this.bindForItemsRecursion(_thisNode.children, data);\r\n            }\r\n        }\r\n    };\r\n\r\n    bindForItems(el, data) {\r\n        this.bindForItemsRecursion(el, data);\r\n        return el;\r\n    }\r\n\r\n    observePath(obj, paths, fns) {\r\n        if (Ballpen.isArray(paths)) {\r\n            let _path = obj;\r\n            let _key;\r\n\r\n            paths.forEach((key, index) => {\r\n                if (/^\\d+$/.test(key)) {\r\n                    key = parseInt(key);\r\n                }\r\n\r\n                if (index < paths.length - 1) {\r\n                    _path = _path[key];\r\n                } else {    \r\n                    _key = key;\r\n                }\r\n            });\r\n\r\n            this.observeKey(_path, _key, fns);\r\n        }\r\n    };\r\n\r\n    observeKey(obj, key, fns = false) {\r\n        if (Ballpen.isArray(key)) {\r\n            this.observePath(obj, key, fns);\r\n        } else {\r\n            let yetVal = obj[key];\r\n            if (Ballpen.isObject(yetVal)) {\r\n                Object.keys(yetVal).forEach((key) => {\r\n                    this.observeKey(yetVal, key, fns);\r\n                });\r\n            } else if (Ballpen.isArray(yetVal)) {\r\n                this.observeArray(yetVal, fns);\r\n            } else {\r\n                Object.defineProperty(obj, key, {\r\n                    get: () => {\r\n                        return yetVal;\r\n                    },\r\n                    set: (nowVal) => {  \r\n                        if (nowVal !== yetVal) {\r\n                            fns && fns.forEach((fn) => {\r\n                                fn.call(this, yetVal, nowVal);\r\n                            });\r\n                        }\r\n\r\n                        yetVal = nowVal;\r\n                    },\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n            }\r\n        }\r\n    };\r\n    \r\n    observeArray(arr, fns = false) {\r\n        const mutatorMethods = ['copyWithin', 'fill', 'pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'];\r\n        const arrayProto = Array.prototype;\r\n\r\n        // Prevent from polluting the global 'Array.prototype'\r\n        const hijackProto = Object.create(arrayProto);\r\n\r\n        mutatorMethods.forEach((method) => {\r\n            Object.defineProperty(hijackProto, method, {\r\n                enumerable: true,\r\n                configurable: true,\r\n                writable: true,\r\n                value: (...args) => {\r\n                    let yetVal = arr.slice();\r\n                    let resultVal = arrayProto[method].call(arr, ...args);\r\n                    let nowVal = arr;\r\n                    // Callback\r\n                    fns && fns.forEach((fn) => {\r\n                        fn.call(this, yetVal, nowVal);\r\n                    }); \r\n\r\n                    return resultVal;\r\n                } \r\n            });\r\n        });\r\n        /* eslint-disable */\r\n        arr.__proto__ = hijackProto;\r\n        arr.__proto__.__proto__ === Array.prototype; // true\r\n    };\r\n\r\n    register(obj, key, fn) {\r\n        const register = this.registers.find((item) => {\r\n            if (Object.is(item.obj, obj) && (item.key === key || item.key.toString() === key.toString())) {\r\n                return item;\r\n            }\r\n        });\r\n\r\n        if (register) {\r\n            register.fns.push(fn);\r\n        } else {\r\n            this.registers.push({\r\n                obj: obj,\r\n                key: key,\r\n                fns: [fn]\r\n            });\r\n        }\r\n    };\r\n\r\n    attach() {\r\n        this.registers.forEach((register) => {\r\n            this.observeKey(register.obj, register.key, register.fns);\r\n        });\r\n    };\r\n}\r\n\r\nexport default Ballpen;\r\n"],"names":["Ballpen","el","dataModel","init","scan","this","document","querySelector","Error","event","eventList","initEventList","data","dataList","modelList","registers","_thisEventObject","item","type","fn","i","children","length","_thisNode","log","bind","attach","hasAttributes","_attrs","attributes","_attr","name","bindModel","bindClass","test","_fnType","split","_fnName","value","bindEvent","bindFor","bindShow","modelName","getAttribute","model","parseData","elStyle","style","removeProperty","removeAttribute","display","register","path","yetVal","nowVal","tagName","innerText","classList","contains","add","addEventListener","call","_this","parentNode","virtualDiv","createDocumentFragment","div","cloneNode","_dataPath","appendChild","bindForItems","_this2","firstChild","removeChild","remove","child","isHTMLCollection","j","_attrsFake","_thisSubModel","_thisSubModelAbs","setAttribute","_subModel","toString","_attrsMain","bindForItemsRecursion","obj","paths","fns","isArray","_path","_key","forEach","key","index","parseInt","observeKey","observePath","isObject","keys","observeArray","defineProperty","arr","mutatorMethods","arrayProto","Array","prototype","hijackProto","Object","create","method","args","slice","resultVal","__proto__","find","is","push","str","dataObj","_list","_data","p"],"mappings":"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"}