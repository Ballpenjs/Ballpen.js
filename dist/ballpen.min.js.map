{"version":3,"file":"ballpen.min.js","sources":["../src/ballpen-util.js","../src/ballpen.js"],"sourcesContent":["class BallpenUtil {\r\n    static findReferenceNode(obj, map = new Map(), root = '') {\r\n        let _root = root;\r\n\r\n        if (BallpenUtil.isObject(obj)) {\r\n            for (let _i in obj) {\r\n                if (BallpenUtil.isObject(obj[_i]) || BallpenUtil.isArray(obj[_i])) {\r\n                    _root += `${_i}.`;\r\n\r\n                    map.set(_root.slice(0, -1), []);\r\n\r\n                    BallpenUtil.findReferenceNode(obj[_i], map, _root);\r\n                }\r\n            }\r\n        } else if (BallpenUtil.isArray(obj)) {\r\n            obj.forEach((_i, _index) => {\r\n                if (BallpenUtil.isObject(_i) || BallpenUtil.isArray(_i)) {\r\n                    _root += `${_index}.`;\r\n\r\n                    map.set(_root.slice(0, -1), []);\r\n\r\n                    BallpenUtil.findReferenceNode(_i, map, _root);\r\n                }\r\n            });\r\n        }\r\n\r\n        return map;\r\n    }\r\n    \r\n\tstatic isHTMLCollection(obj) {\r\n        return Object.prototype.toString.call(obj) === '[object HTMLCollection]';\r\n    };\r\n\r\n    static isArray(arr) {\r\n        return Array.isArray(arr) || Object.prototype.toString.call(arr) === '[object Array]';\r\n    };\r\n\r\n    static toArray(collection) {\r\n        return Array.prototype.slice.call(collection);\r\n    }\r\n\r\n    static isObject(obj) {\r\n        return Object.prototype.toString.call(obj) === '[object Object]';\r\n    };\r\n\r\n    static isReferenceType(obj) {\r\n        return BallpenUtil.isObject(obj) || BallpenUtil.isArray(obj);\r\n    }\r\n\r\n    static renderObjectValueByPath(obj, path, val) {\r\n        let _paths = path.split('.');\r\n\r\n        if (typeof BallpenUtil.parseData(path, obj).data === 'undefined') {\r\n            BallpenUtil.throwError(`Find an invalid watcher path when initializing Ballpen.js -> \"${path}\"`, 'Please make sure the watcher path you set is exist and valid.');  \r\n        }\r\n\r\n        if (_paths.length === 1) {\r\n            obj[_paths[0]] = val;\r\n        } else {\r\n            for (let i = 0; i < _paths.length - 1; i++) {\r\n                obj = obj[_paths[i]];\r\n                if (!obj) {\r\n                    BallpenUtil.throwError(`Find an invalid watcher path when initializing Ballpen.js -> \"${path}\"`, 'Please make sure the watcher path you set is exist and valid.');  \r\n                }\r\n\r\n                if (i === _paths.length - 2) {\r\n                    obj[_paths[_paths.length - 1]] = val;\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    static parseData(str, dataObj) {\r\n        const _list = str.split('.');\r\n        let _data = dataObj;\r\n        let p = [];\r\n\r\n        _list.forEach((key, index) => {\r\n            if (index === 0) {\r\n                _data = dataObj[key];\r\n                p.push(key);\r\n            } else {\r\n                _data = _data[key];\r\n                p.push(key);\r\n            }\r\n        });\r\n\r\n        return {\r\n            path: p,\r\n            data: _data\r\n        };\r\n    };\r\n\r\n    static ignoreInnerDirectives(directiveValue, exceptList, fn, ...args) {\r\n        exceptList.forEach((regexp) => {\r\n            if (regexp.test(directiveValue)) {\r\n                fn && fn.call(this, ...args);\r\n            }\r\n        });\r\n\r\n        if (!/^@/ig.test(directiveValue)) {\r\n            fn && fn.call(this, ...args);\r\n        }\r\n    };\r\n\r\n    static clone(obj) {\r\n        let copy;\r\n\r\n        if (obj === null || typeof obj !== 'object') return obj;\r\n\r\n        if (obj instanceof Date) {\r\n            copy = new Date();\r\n            copy.setTime(obj.getTime());\r\n            return copy;\r\n        }\r\n\r\n        if (obj instanceof Array) {\r\n            copy = [];\r\n            for (var i = 0, len = obj.length; i < len; i++) {\r\n                copy[i] = BallpenUtil.clone(obj[i]);\r\n            }\r\n            return copy;\r\n        }\r\n\r\n        if (obj instanceof Object) {\r\n            copy = {};\r\n            for (var attr in obj) {\r\n                if (obj.hasOwnProperty(attr)) copy[attr] = BallpenUtil.clone(obj[attr]);\r\n            }\r\n            return copy;\r\n        }\r\n\r\n        BallpenUtil.throwError('Internal error, unable to copy object, type is not supported.', 'Please contact the author to fix this issue.');  \r\n    };\r\n\r\n    static wrapAbsPath(rootPath, relPath) {\r\n        return (BallpenUtil.isArray(rootPath) && rootPath.length > 0 ? (rootPath.join('.') + '.') : (rootPath.toString().length > 0 ? (rootPath.toString() + '.') : '')) + \r\n        (BallpenUtil.isArray(relPath) && relPath.length > 0 ? relPath.join('.') : (relPath.toString().length > 0 ? relPath.toString() : ''));\r\n    };\r\n\r\n    static throwError(err, desc) {\r\n        let _e = new Error(`[Ballpen Parser Error] \\n\\n [Message] \\n\\n - ${err} \\n\\n [Description] \\n\\n - ${desc} \\n`); \r\n        _e.name = 'BallpenError';     \r\n\r\n        throw _e;           \r\n    };\r\n    \r\n    static randomSequence(n) {\r\n        let chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\r\n        let res = '';\r\n\r\n        for (let i = 0; i < n; i++) {\r\n            let id = Math.ceil(Math.random() * 35);\r\n            res += chars[id];\r\n        }\r\n\r\n        return res;\r\n    }\r\n}\r\n\r\nexport default BallpenUtil;\r\n","import BallpenUtil from './ballpen-util.js';\r\n\r\nclass Ballpen {\r\n\r\n    constructor(el, dataModel) { \r\n        // Init EventList\r\n        this.init(el, dataModel);\r\n        // Scan directives\r\n        this.scan(this.$el);\r\n    };\r\n\r\n    init(el, dataModel) {\r\n        this.$el = document.querySelector(el);\r\n\r\n        // Handle invalid root element\r\n        if (!this.$el) {\r\n            BallpenUtil.throwError(`Find an invalid root element when initializing Ballpen.js -> \"${el}\"`, 'Well, you should set a valid root element for Ballpen.js first constructor parameter, eg: \"#app\", \"#container\".');  \r\n        }\r\n\r\n        if (dataModel.events) {\r\n            this.$eventList = {};\r\n            this.initEventList(dataModel.events);\r\n        }\r\n\r\n        if (dataModel.data) {\r\n            // Set proxy to global data payload\r\n            this.$dataListPure = dataModel.data;\r\n            // Set an alias for pure data\r\n            this.data = this.$dataListPure;\r\n\r\n            this.$dataList = BallpenUtil.clone(dataModel.data);\r\n        }\r\n\r\n        if (dataModel.watchers) {\r\n            // Find every reference node in datalist\r\n            this.watchersHook = BallpenUtil.findReferenceNode(this.$dataList);\r\n\r\n            let _watchers = dataModel.watchers;\r\n\r\n            for (let _watcher in _watchers) {\r\n                const _watcherEntity = {\r\n                    root: _watcher,\r\n                    handler: _watchers[_watcher].handler\r\n                };\r\n\r\n                this.watchersHook.forEach((watcherQueue, path) => {\r\n                    if (new RegExp('^' + _watcher, 'ig').test(path)) {\r\n                        watcherQueue.push(_watcherEntity);\r\n                    }\r\n                });\r\n            }\r\n\r\n            // Mount watchers\r\n            this.watchersHook.forEach((watcherQueue, path) => {\r\n                BallpenUtil.renderObjectValueByPath(this.$dataList, path, this.setProxy(path, watcherQueue));\r\n            });\r\n        }\r\n\r\n        // Other initializations\r\n        this.$registers = [];\r\n    };\r\n\r\n    setProxy(path, watcherQueue) {\r\n        let _dist = BallpenUtil.parseData(path, this.$dataList).data;\r\n        let _oldVal = BallpenUtil.parseData(path, this.$dataListPure).data;\r\n\r\n        let handler = {\r\n            get: (_target, _property) => {\r\n                // Run callback\r\n                watcherQueue.forEach((entity) => {\r\n                    let _fn = entity.handler;\r\n                    let _path = entity.root;\r\n\r\n                    // _fn && _fn.call(this, BallpenUtil.parseData(_path, this.$dataListPure).data, BallpenUtil.parseData(_path, this.$dataList).data);\r\n                });\r\n                \r\n                return _target[_property];\r\n            },\r\n            set: (_target, _property, _value, receiver) => {\r\n                // Run callback\r\n                if (_value !== _oldVal[_property]) {\r\n                    let _pureVal;\r\n\r\n                    if (BallpenUtil.isReferenceType(_value)) {\r\n                        _oldVal[_property] = BallpenUtil.clone(_value);\r\n                        _pureVal = BallpenUtil.clone(_value);\r\n                    } else {\r\n                        _oldVal[_property] = _value;\r\n                        _pureVal = _value;\r\n                    }\r\n\r\n                    // Update pure data\r\n                    BallpenUtil.renderObjectValueByPath(this.$dataListPure, `${path}.${_property}`, _pureVal);\r\n                    \r\n                    _target[_property] = _value;\r\n\r\n                    watcherQueue.forEach((entity) => {\r\n                        let _fn = entity.handler;\r\n                        let _path = entity.root;\r\n\r\n                        _fn && _fn.call(this, BallpenUtil.parseData(_path, this.$dataListPure).data, BallpenUtil.parseData(_path, this.$dataList).data);\r\n                    });\r\n                }\r\n\r\n                // Return true to accept the changes\r\n                return true;\r\n            },\r\n            defineProperty: (target, prop, descriptor) => {\r\n                return Reflect.defineProperty(target, prop, descriptor);\r\n            }\r\n        };\r\n\r\n        // Can not set a proxy on a single value (!! need to be fixed !!)\r\n        return new Proxy(_dist, handler);\r\n    };\r\n\r\n    initEventList(eventList) {\r\n        if (eventList) {\r\n            let _thisEventObject = eventList;\r\n            for (let item in _thisEventObject) {\r\n                this.$eventList[item]      = {};\r\n                this.$eventList[item].type = '';\r\n                this.$eventList[item].fn   = _thisEventObject[item];\r\n            }\r\n        }\r\n    };\r\n\r\n    scan(el, init = true) {\r\n        for (let i = 0; i < el.children.length; i++) {\r\n            let _thisNode = el.children[i];\r\n     \r\n            // Bind\r\n            if (_thisNode.hasAttributes()) {\r\n                let _attrs = _thisNode.attributes;\r\n                let _attrsArr = [];\r\n\r\n                for (let i = 0; i < _attrs.length; i++) {\r\n                    const _attr = _attrs.item(i);\r\n                    _attrsArr.push(_attr.name);\r\n\r\n                    if (/bp-event/ig.test(_attr.name)) {\r\n                        _thisNode.removeAttribute(_attr.name);\r\n\r\n                        let eventBindedList = [];\r\n                        let _i = _attr;\r\n\r\n                        if (/bp-event:/ig.test(_i.name)) {\r\n                            // Single event\r\n                            eventBindedList.push({\r\n                                _fnType: _i.name.split(':')[1],\r\n                                _fnName: _i.value \r\n                            });\r\n                        } else {\r\n                            // Multi events\r\n                            let bindArrs = _i.value.match(/[a-zA-Z]+:[a-zA-Z0-9_$]+/ig);\r\n                            bindArrs.forEach((binder) => {\r\n                                eventBindedList.push({\r\n                                    _fnType: binder.split(':')[0],\r\n                                    _fnName: binder.split(':')[1] \r\n                                });\r\n                            });\r\n                        }\r\n\r\n                        eventBindedList.forEach((eventBinded) => {\r\n                            let _fnType = eventBinded._fnType;\r\n                            let _fnName = eventBinded._fnName;\r\n\r\n                            this.bindEvent(_thisNode, _fnName, _fnType, this.$dataList, {});\r\n                        });\r\n                    }\r\n\r\n                    if (/bp-bind/ig.test(_attr.name)) {\r\n                        _thisNode.removeAttribute(_attr.name);\r\n\r\n                        let attrsBindedList = [];\r\n                        let _i = _attr;\r\n\r\n                        if (/bp-bind:/ig.test(_i.name)) {\r\n                            // Single event\r\n                            attrsBindedList.push({\r\n                                _bindKey: _i.name.split(':')[1],\r\n                                _thisSubModelAbs: _i.value \r\n                            });\r\n                        } else {\r\n                            // Multi events\r\n                            let bindArrs = _i.value.match(/[a-zA-Z0-9_$-]+:[a-zA-Z0-9_$.]+/ig);\r\n                            bindArrs.forEach((binder) => {\r\n                                attrsBindedList.push({\r\n                                    _bindKey: binder.split(':')[0],\r\n                                    _thisSubModelAbs: binder.split(':')[1] \r\n                                });\r\n                            });\r\n                        }\r\n\r\n                        attrsBindedList.forEach((attrsBinded) => {\r\n                            let _bindKey = attrsBinded._bindKey;\r\n                            let _thisSubModelAbs = attrsBinded._thisSubModelAbs;\r\n\r\n                            this.bindBind(_thisNode, _thisSubModelAbs, _bindKey);\r\n                        });\r\n                    }\r\n                }\r\n\r\n                if (_attrsArr.includes('bp-pre')) {\r\n                    this.bindPre(_thisNode);\r\n                    continue;\r\n                }\r\n\r\n                if (_attrsArr.includes('bp-for')) {\r\n                    this.bindFor(_thisNode);\r\n                    continue;\r\n                }\r\n\r\n                if (_attrsArr.includes('bp-model')) {\r\n                    this.bindModel(_thisNode);\r\n                }\r\n\r\n                if (_attrsArr.includes('bp-class')) {\r\n                    this.bindClass(_thisNode);\r\n                }\r\n\r\n                if (_attrsArr.includes('bp-show')) {\r\n                    this.bindShow(_thisNode);\r\n                }\r\n            }\r\n\r\n            // Moustache binding\r\n            let childNodes = _thisNode.childNodes;\r\n            childNodes.forEach((item, key) => {\r\n                if (item.nodeType === Node.TEXT_NODE) {\r\n                    this.bindMoustache(_thisNode, item);\r\n                }\r\n            });\r\n\r\n            // Recursion\r\n            if (_thisNode.children.length > 0) {\r\n                this.scan(_thisNode, false);\r\n            }\r\n        }\r\n\r\n        if (init) {\r\n            // Attach observers\r\n            this.attach();\r\n            // Show rendered view\r\n            this.$el.removeAttribute('bp-shade');\r\n        }   \r\n    };\r\n\r\n    bindShow(el, rootPath = []) {\r\n        const modelName = BallpenUtil.wrapAbsPath(rootPath, el.getAttribute('bp-show')); \r\n\r\n        BallpenUtil.ignoreInnerDirectives(modelName, [], (el) => {\r\n            const model = BallpenUtil.parseData(modelName, this.$dataList);\r\n\r\n            const elStyle = el.style;\r\n \r\n            (!model.data ? elStyle.display = 'none' : (elStyle.removeProperty ? elStyle.removeProperty('display') : elStyle.removeAttribute('display')));\r\n\r\n            this.register(this.$dataList, this.$dataListPure, model.path, (yetVal, nowVal) => {\r\n                (!nowVal ? elStyle.display = 'none' : (elStyle.removeProperty ? elStyle.removeProperty('display') : elStyle.removeAttribute('display')));\r\n            });\r\n        }, el);\r\n\r\n        el.removeAttribute('bp-show');\r\n    };\r\n\r\n    bindModel(el, rootPath = []) {\r\n        const modelName = BallpenUtil.wrapAbsPath(rootPath, el.getAttribute('bp-model'));\r\n\r\n        BallpenUtil.ignoreInnerDirectives(modelName, [/^@{([\\d]+)}$/ig], (el) => {\r\n            // Handel 'for' list index\r\n            if (/^@{([\\d]+)}$/ig.test(modelName)) {\r\n                let index = modelName.match(/^@{([\\d]+)}$/)[1];\r\n\r\n                (el.tagName === 'INPUT' ? el.value = index : el.innerText = index);\r\n            } else {\r\n                const model = BallpenUtil.parseData(modelName, this.$dataList);\r\n\r\n                (el.tagName === 'INPUT' ? el.value = model.data : el.innerText = model.data);\r\n\r\n                this.register(this.$dataList, this.$dataListPure, model.path, (yetVal, nowVal) => {\r\n                    (el.tagName === 'INPUT' ? el.value = nowVal : el.innerText = nowVal);\r\n                });\r\n            }\r\n        }, el);\r\n\r\n        el.removeAttribute('bp-model');\r\n    };\r\n\r\n    bindMoustache(el, subTextNode, rootPath = []) {\r\n        let subTextNodeValuePure = subTextNode.nodeValue;\r\n        let subTextNodeValueRendered = subTextNode.nodeValue;\r\n        let subPatterns = subTextNodeValueRendered.match(/{{.*?}}/ig);\r\n        let modelsMapper = {};\r\n\r\n        if (BallpenUtil.isArray(subPatterns) && subPatterns.length > 0) {\r\n            subPatterns.forEach((pattern) => {\r\n                let modelName = pattern.slice(2, -2).trim();\r\n\r\n                if (/^@{([\\d]+)}$/ig.test(modelName)) {\r\n                    modelsMapper[pattern] = modelName.match(/^@{([\\d]+)}$/)[1];\r\n                } else {\r\n                    let model = BallpenUtil.parseData(BallpenUtil.wrapAbsPath(rootPath, modelName), this.$dataList);\r\n                    modelsMapper[pattern] = model.data;\r\n\r\n                    this.register(this.$dataList, this.$dataListPure, model.path, (yetVal, nowVal) => {\r\n                        modelsMapper[`{{ ${model.path.join('.')} }}`] = nowVal;\r\n                        for (let pattern in modelsMapper) {\r\n                            subTextNodeValueRendered = subTextNodeValuePure.replace(pattern, modelsMapper[pattern]);\r\n                        }\r\n\r\n                        subTextNode.nodeValue = subTextNodeValueRendered;\r\n                    });\r\n                }\r\n            });\r\n            \r\n            for (let pattern in modelsMapper) {\r\n                subTextNodeValueRendered = subTextNodeValuePure.replace(pattern, modelsMapper[pattern]);\r\n            }      \r\n        }\r\n\r\n        subTextNode.nodeValue = subTextNodeValueRendered;\r\n    };\r\n\r\n    bindClass(el, rootPath = []) {\r\n        const modelName = BallpenUtil.wrapAbsPath(rootPath, el.getAttribute('bp-class'));\r\n\r\n        BallpenUtil.ignoreInnerDirectives(modelName, [], (el) => {\r\n            const model = BallpenUtil.parseData(modelName, this.$dataList);\r\n\r\n            if (!el.classList.contains(model.data)) {\r\n                el.classList.add(model.data);\r\n            }\r\n\r\n            this.register(this.$dataList, this.$dataListPure, model.path, (yetVal, nowVal) => {\r\n                el.classList.remove(yetVal);\r\n                if (!el.classList.contains(nowVal)) {\r\n                    el.classList.add(nowVal);\r\n                }\r\n            });\r\n        }, el);\r\n\r\n        el.removeAttribute('bp-class');\r\n    };\r\n\r\n    bindPre(el) {\r\n        el.removeAttribute('bp-pre');\r\n    }\r\n\r\n    bindEvent(el, _fnName, _fnType, context, args = {}) {\r\n        BallpenUtil.ignoreInnerDirectives(_fnName, [], (el, _fnName, _fnType, context) => {\r\n            // Update global event list\r\n            this.$eventList[_fnName]['type'] = _fnType;\r\n            \r\n            // Bind listener, set callback fn to global data context\r\n            el.addEventListener(_fnType, () => {\r\n                this.$eventList[_fnName]['fn'].call(this.$dataList, el, context, args);\r\n            });\r\n        }, el, _fnName, _fnType, context, args);\r\n    };\r\n\r\n    bindBind(el, _bindValue, _bindKey, rootPath = []) {\r\n        BallpenUtil.ignoreInnerDirectives(_bindValue, [], (el, _bindValue, _bindKey) => {\r\n            const modelName = BallpenUtil.wrapAbsPath(rootPath, _bindValue);\r\n            const model = BallpenUtil.parseData(modelName, this.$dataList);\r\n\r\n            // Set customized attribute\r\n            el.setAttribute(_bindKey, model.data);\r\n            \r\n            // Bind listener, set callback fn to global data context\r\n            this.register(this.$dataList, this.$dataListPure, model.path, (yetVal, nowVal) => {\r\n                el.setAttribute(_bindKey, nowVal);\r\n            });\r\n        }, el, _bindValue, _bindKey);\r\n    };\r\n\r\n    bindFor(el, scope = {}, indexStack = {}) {\r\n        const modelPaths = el.getAttribute('bp-for').split(/\\s+in\\s+/);\r\n        const _pScope = modelPaths[1];\r\n        const _cScope = modelPaths[0];\r\n        const _identifyKey = BallpenUtil.randomSequence(12);\r\n\r\n        if (!/^@/ig.test(_cScope)) {\r\n            BallpenUtil.throwError(`Invalid alias name when initializing a \"bp-for\" condition -> \"${_cScope}\".`, 'Please make sure the alias name is start with a \"@\" symbol.');  \r\n        }\r\n        \r\n        // Update scope array\r\n        if (/\\./ig.test(_pScope)) {\r\n            const _t = _pScope.split('.');\r\n            scope[_pScope] = scope[_t[0]] + '.' + _t[1];\r\n        } else {\r\n            scope[_pScope] = _pScope;\r\n        }\r\n\r\n        // Set closure variables\r\n        let closureScope = BallpenUtil.clone(scope);\r\n        let closureIndexStack = BallpenUtil.clone(indexStack);\r\n\r\n        const model = BallpenUtil.parseData(scope[_pScope], this.$dataList);\r\n        \r\n        let parentNode = el.parentNode;\r\n        let virtualDiv = document.createDocumentFragment();\r\n\r\n        for (let i = 0; i < model.data.length; i++) {\r\n            let _div = el.cloneNode(true);\r\n            let _dataPath = `${scope[_pScope]}.${i}`;\r\n\r\n            // Update current scope chain\r\n            scope[_cScope] = _dataPath;\r\n\r\n            // Update current index chain\r\n            indexStack[_cScope] = i;\r\n\r\n            _div.removeAttribute('bp-for');\r\n            _div.setAttribute('bp-for-rendered-id', _identifyKey);\r\n\r\n            this.bindForItemsRecursion(_div, scope, indexStack, _dataPath, i, true, (el) => {\r\n                virtualDiv.appendChild(el);\r\n            });\r\n        }\r\n\r\n        parentNode.replaceChild(virtualDiv, el);\r\n\r\n        // Set register\r\n        this.register(this.$dataList, this.$dataListPure, model.path, (yetVal, nowVal) => {\r\n            let virtualDiv = document.createDocumentFragment();\r\n\r\n            for (let i = 0; i < nowVal.length; i++) {\r\n                let _div = el.cloneNode(true);\r\n                let _dataPath = `${closureScope[_pScope]}.${i}`;\r\n\r\n                // Update current scope chain\r\n                closureScope[_cScope] = _dataPath;\r\n\r\n                // Update current index chain\r\n                closureIndexStack[_cScope] = i;\r\n\r\n                _div.removeAttribute('bp-for');\r\n                _div.setAttribute('bp-for-rendered-id', _identifyKey);\r\n\r\n                this.bindForItemsRecursion(_div, closureScope, closureIndexStack, _dataPath, i, true, (el) => {\r\n                    virtualDiv.appendChild(el);\r\n                });\r\n            }\r\n\r\n            let replaceChilds = parentNode.querySelectorAll(`[bp-for-rendered-id='${_identifyKey}']`);\r\n            for (let i = 0; i < replaceChilds.length; i++) {\r\n                if (i === 0) {\r\n                    parentNode.replaceChild(virtualDiv, replaceChilds.item(i));\r\n                } else {\r\n                    replaceChilds.item(i).remove();\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    bindForItemsRecursion(el, scope, indexStack, data, itemIndex, isInit = false, fn = false) {\r\n        let child = !!BallpenUtil.isHTMLCollection(el);\r\n\r\n        for (let j = 0; j < (child ? el.length : 1); j++) {\r\n            const _thisNode = (child ? el[j] : el);\r\n\r\n            // Render moustache\r\n            let childNodes = _thisNode.childNodes;\r\n            childNodes.forEach((item, key) => {\r\n                if (item.nodeType === Node.TEXT_NODE) {\r\n                    let subTextNodeValuePure = item.nodeValue;\r\n                    let subTextNodeValueRendered = item.nodeValue;\r\n\r\n                    let subPatterns = subTextNodeValueRendered.match(/{{.*?}}/ig);\r\n                    let modelsMapper = {};\r\n\r\n                    if (BallpenUtil.isArray(subPatterns) && subPatterns.length > 0) {\r\n                        subPatterns.forEach((pattern) => {\r\n                            let _thisSubModel = pattern.slice(2, -2).trim();\r\n                            let _thisSubModelAbs = _thisSubModel;\r\n\r\n                            if (/^@/ig.test(_thisSubModel)) {\r\n                            // Get index\r\n                                if (/\\[\\[index\\]\\]/ig.test(_thisSubModel)) {\r\n                                    _thisSubModelAbs = '@{' + `${indexStack[_thisSubModel.match(/^(.*)\\[\\[index\\]\\]$/)[1]]}` + '}';\r\n                                } else {\r\n                                    _thisSubModelAbs = _thisSubModel.replace(/^@[a-z0-9A-Z_]*/, scope[_thisSubModel.split('.')[0]]);  \r\n                                }\r\n                            }\r\n\r\n                            modelsMapper[pattern] = `{{ ${_thisSubModelAbs} }}`;\r\n                        });\r\n                        \r\n                        for (let pattern in modelsMapper) {\r\n                            subTextNodeValueRendered = subTextNodeValuePure.replace(pattern, modelsMapper[pattern]);\r\n                        }      \r\n                    }\r\n\r\n                    item.nodeValue = subTextNodeValueRendered;\r\n\r\n                    this.bindMoustache(_thisNode, item);\r\n                }\r\n            });\r\n\r\n            if (!_thisNode.hasAttributes() && child) {\r\n                if (_thisNode.children.length > 0) {\r\n                    this.bindForItemsRecursion(_thisNode.children, scope, indexStack, data, itemIndex);\r\n                }\r\n                continue;\r\n            }\r\n\r\n            // Bind normal render tag\r\n            let _attrsMain = _thisNode.attributes;\r\n            let _attrsArr = [];\r\n\r\n            for (let i = 0; i < _attrsMain.length; i++) {\r\n                let _i = _attrsMain.item(i);\r\n                _attrsArr.push(_i.name);\r\n\r\n                // Bind event\r\n                if (/bp-event/ig.test(_i.name)) {\r\n                    let eventBindedList = [];\r\n\r\n                    if (/bp-event:/ig.test(_i.name)) {\r\n                        // Single event\r\n                        eventBindedList.push({\r\n                            _fnType: _i.name.split(':')[1],\r\n                            _fnName: _i.value \r\n                        });\r\n                    } else {\r\n                        // Multi events\r\n                        let bindArrs = _i.value.match(/[a-zA-Z]+:[a-zA-Z0-9_$]+/ig);\r\n                        bindArrs.forEach((binder) => {\r\n                            eventBindedList.push({\r\n                                _fnType: binder.split(':')[0],\r\n                                _fnName: binder.split(':')[1] \r\n                            });\r\n                        });\r\n                    }\r\n\r\n                    eventBindedList.forEach((eventBinded) => {\r\n                        let _fnType = eventBinded._fnType;\r\n                        let _fnName = eventBinded._fnName;\r\n\r\n                        if (/^@:/ig.test(_fnName)) {\r\n                            this.bindEvent(_thisNode, _fnName.split(':')[1], _fnType, this.$dataList, {\r\n                                index: itemIndex\r\n                            });\r\n                        } else {\r\n                            this.bindEvent(_thisNode, _fnName, _fnType, this.$dataList, {});\r\n                        }\r\n                    });\r\n                }\r\n\r\n                if (/bp-bind/ig.test(_i.name)) {\r\n                    let attrsBindedList = [];\r\n\r\n                    if (/bp-bind:/ig.test(_i.name)) {\r\n                        // Single event\r\n                        attrsBindedList.push({\r\n                            _bindKey: _i.name.split(':')[1],\r\n                            _thisSubModelAbs: _i.value \r\n                        });\r\n                    } else {\r\n                        // Multi events\r\n                        let bindArrs = _i.value.match(/[a-zA-Z0-9_$-]+:[a-zA-Z0-9_$.]+/ig);\r\n                        bindArrs.forEach((binder) => {\r\n                            attrsBindedList.push({\r\n                                _bindKey: binder.split(':')[0],\r\n                                _thisSubModelAbs: binder.split(':')[1] \r\n                            });\r\n                        });\r\n                    }\r\n\r\n                    attrsBindedList.forEach((attrsBinded) => {\r\n                        let _bindKey = attrsBinded._bindKey;\r\n                        let _thisSubModelAbs = attrsBinded._thisSubModelAbs;\r\n\r\n                        if (/^@/ig.test(_thisSubModelAbs)) {\r\n                            _thisSubModelAbs = _thisSubModelAbs.replace(/^@[a-z0-9A-Z_]*/, scope[_thisSubModelAbs.split('.')[0]]);\r\n                        }\r\n\r\n                        this.bindBind(_thisNode, _thisSubModelAbs, _bindKey);\r\n                    });\r\n                }\r\n            }\r\n\r\n            // Render 'for' list in another 'for' list\r\n            if (_attrsArr.includes('bp-for')) {\r\n                this.bindFor(_thisNode, scope, indexStack);\r\n                continue;\r\n            }\r\n\r\n            if (_attrsArr.includes('bp-class')) {\r\n                let _thisSubModel = _thisNode.getAttribute('bp-class');  \r\n                let _thisSubModelAbs = _thisSubModel;\r\n\r\n                if (/^@/ig.test(_thisSubModel)) {\r\n                    _thisSubModelAbs = _thisSubModel.replace(/^@[a-z0-9A-Z_]*/, scope[_thisSubModel.split('.')[0]]);\r\n                }\r\n\r\n                if (_thisSubModelAbs !== _thisSubModel) {\r\n                    _thisNode.setAttribute('bp-class', _thisSubModelAbs);\r\n                }\r\n\r\n                this.bindClass(_thisNode);\r\n            }\r\n\r\n            if (_attrsArr.includes('bp-model')) {\r\n                let _thisSubModel = _thisNode.getAttribute('bp-model');\r\n                let _thisSubModelAbs = _thisSubModel;\r\n\r\n                if (/^@/ig.test(_thisSubModel)) {\r\n                    // Get index\r\n                    if (/\\[\\[index\\]\\]/ig.test(_thisSubModel)) {\r\n                        _thisSubModelAbs = '@{' + `${indexStack[_thisSubModel.match(/^(.*)\\[\\[index\\]\\]$/)[1]]}` + '}';\r\n                    } else if (/@{\\d+}/ig.test(_thisSubModel)) {\r\n                        _thisSubModelAbs = _thisSubModel;\r\n                    } else {\r\n                        _thisSubModelAbs = _thisSubModel.replace(/^@[a-z0-9A-Z_]*/, scope[_thisSubModel.split('.')[0]]);  \r\n                    }\r\n                }\r\n                \r\n                if (_thisSubModelAbs !== _thisSubModel) {\r\n                    _thisNode.setAttribute('bp-model', _thisSubModelAbs);\r\n                }\r\n\r\n                this.bindModel(_thisNode);\r\n            }\r\n\r\n            if (_attrsArr.includes('bp-show')) {\r\n                let _thisSubModel = _thisNode.getAttribute('bp-show');\r\n                let _thisSubModelAbs = _thisSubModel;\r\n\r\n                if (/^@/ig.test(_thisSubModel)) {\r\n                    _thisSubModelAbs = _thisSubModel.replace(/^@[a-z0-9A-Z_]*/, scope[_thisSubModel.split('.')[0]]);\r\n                }\r\n\r\n                if (_thisSubModelAbs !== _thisSubModel) {\r\n                    _thisNode.setAttribute('bp-show', _thisSubModelAbs);\r\n                }\r\n\r\n                this.bindShow(_thisNode);\r\n            }\r\n\r\n            if (_thisNode.children.length > 0) {\r\n                this.bindForItemsRecursion(_thisNode.children, scope, indexStack, data, itemIndex);\r\n            }\r\n        }\r\n\r\n        if (isInit) {\r\n            fn && fn.call(this, el);\r\n        }\r\n    };\r\n\r\n    observePath(obj, rootPath, paths, fns) {\r\n        if (BallpenUtil.isArray(paths)) {\r\n            let _path = obj;\r\n            let _key;\r\n\r\n            paths.forEach((key, index) => {\r\n                if (/^\\d+$/.test(key)) {\r\n                    key = parseInt(key);\r\n                }\r\n\r\n                if (index < paths.length - 1) {\r\n                    _path = _path[key];\r\n                } else {    \r\n                    _key = key;\r\n                }\r\n            });\r\n\r\n            rootPath = paths.join('.');\r\n\r\n            this.observeKey(_path, rootPath, _key, fns);\r\n        }\r\n    };\r\n\r\n    observeKey(obj, rootPath, key, fns = false) {            \r\n        if (BallpenUtil.isArray(key)) {\r\n            this.observePath(obj, rootPath, key, fns);\r\n        } else {\r\n            let yetVal = obj[key];\r\n            const currentPath = rootPath;\r\n           \r\n            if (BallpenUtil.isObject(yetVal)) {\r\n                Object.defineProperty(obj, key, {\r\n                    get: () => {\r\n                        return yetVal;\r\n                    },\r\n                    set: (nowVal) => {  \r\n                        if (nowVal !== yetVal) {\r\n                            fns && fns.forEach((fn) => {\r\n                                fn.call(this, yetVal, nowVal);\r\n                            });\r\n\r\n                            yetVal = nowVal;\r\n\r\n                            BallpenUtil.renderObjectValueByPath(this.$dataListPure, currentPath, nowVal);\r\n                        }\r\n                    },\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n\r\n                Object.keys(yetVal).forEach((key) => {\r\n                    this.observeKey(yetVal, currentPath + '.' + key, key, fns);\r\n                });\r\n            } else if (BallpenUtil.isArray(yetVal)) {\r\n                Object.defineProperty(obj, key, {\r\n                    get: () => {\r\n                        return yetVal;\r\n                    },\r\n                    set: (nowVal) => {  \r\n                        if (nowVal !== yetVal) {\r\n                            fns && fns.forEach((fn) => {\r\n                                fn.call(this, yetVal, nowVal);\r\n                            });\r\n\r\n                            yetVal = nowVal;\r\n\r\n                            BallpenUtil.renderObjectValueByPath(this.$dataListPure, currentPath, nowVal);\r\n                        }\r\n                    },\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n\r\n                this.observeArray(yetVal, currentPath, fns);\r\n            } else {\r\n                Object.defineProperty(obj, key, {\r\n                    get: () => {\r\n                        return yetVal;\r\n                    },\r\n                    set: (nowVal) => {  \r\n                        if (nowVal !== yetVal) {\r\n                            fns && fns.forEach((fn) => {\r\n                                fn.call(this, yetVal, nowVal);\r\n                            });\r\n\r\n                            yetVal = nowVal;\r\n\r\n                            BallpenUtil.renderObjectValueByPath(this.$dataListPure, currentPath, nowVal);\r\n                        }\r\n                    },\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n            }\r\n        }\r\n    };\r\n    \r\n    observeArray(arr, rootPath, fns = false) {\r\n        const mutatorMethods = ['copyWithin', 'fill', 'pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'];\r\n        const arrayProto = Array.prototype;\r\n\r\n        // Prevent from polluting the global 'Array.prototype'\r\n        const hijackProto = Object.create(arrayProto);\r\n\r\n        const currentPath = rootPath;\r\n\r\n        mutatorMethods.forEach((method) => {\r\n            Object.defineProperty(hijackProto, method, {\r\n                enumerable: true,\r\n                configurable: true,\r\n                writable: true,\r\n                value: (...args) => {\r\n                    let yetVal = arr.slice();\r\n                    let resultVal = arrayProto[method].call(arr, ...args);\r\n                    let nowVal = arr;\r\n\r\n                    BallpenUtil.renderObjectValueByPath(this.$dataListPure, currentPath, nowVal);\r\n                    // Callback\r\n                    fns && fns.forEach((fn) => {\r\n                        fn.call(this, yetVal, nowVal);\r\n                    }); \r\n\r\n                    return resultVal;\r\n                } \r\n            });\r\n        });\r\n        /* eslint-disable */\r\n        arr.__proto__ = hijackProto;\r\n        // arr.__proto__.__proto__ === Array.prototype; // true\r\n    };\r\n\r\n    register(obj, objPure, key, fn) {\r\n        const register = this.$registers.find((item) => {\r\n            if (Object.is(item.obj, obj) && (item.key === key || item.key.toString() === key.toString())) {\r\n                return item;\r\n            }\r\n        });\r\n\r\n        if (register) {\r\n            register.fns.push(fn);\r\n        } else {\r\n            this.$registers.push({\r\n                obj: obj,\r\n                rootPath: [],\r\n                key: key,\r\n                fns: [fn]\r\n            });\r\n        }\r\n    };\r\n\r\n    attach() {\r\n        this.$registers.forEach((register) => {\r\n            this.observeKey(register.obj, register.rootPath, register.key, register.fns);\r\n        });\r\n    };\r\n\r\n}\r\n\r\nexport default Ballpen;\r\n"],"names":["BallpenUtil","obj","map","Map","root","_root","isObject","_i","isArray","set","slice","findReferenceNode","forEach","_index","Object","prototype","toString","call","arr","Array","collection","path","val","_paths","split","parseData","data","throwError","length","i","str","dataObj","_list","_data","p","key","index","push","directiveValue","exceptList","fn","args","regexp","test","this","copy","Date","setTime","getTime","len","clone","attr","hasOwnProperty","rootPath","relPath","join","err","desc","_e","Error","name","n","chars","res","id","Math","ceil","random","Ballpen","el","dataModel","init","scan","$el","document","querySelector","events","$eventList","initEventList","$dataListPure","$dataList","watchers","watchersHook","_watchers","_watcher","_watcherEntity","handler","watcherQueue","RegExp","renderObjectValueByPath","_this","setProxy","$registers","_dist","_oldVal","_target","_property","entity","_value","receiver","_pureVal","isReferenceType","_this2","_fn","_path","target","prop","descriptor","Reflect","defineProperty","Proxy","eventList","_thisEventObject","item","type","_thisNode","children","hasAttributes","_attrs","attributes","_attrsArr","_attr","removeAttribute","eventBindedList","value","bindArrs","match","binder","eventBinded","_fnType","_fnName","bindEvent","_this3","attrsBindedList","attrsBinded","_bindKey","_thisSubModelAbs","bindBind","includes","bindPre","bindFor","bindModel","bindClass","bindShow","childNodes","nodeType","Node","TEXT_NODE","bindMoustache","attach","modelName","wrapAbsPath","getAttribute","ignoreInnerDirectives","model","_this4","elStyle","style","removeProperty","display","register","yetVal","nowVal","tagName","innerText","_this5","subTextNode","subTextNodeValuePure","nodeValue","subTextNodeValueRendered","subPatterns","modelsMapper","pattern","trim","_this6","replace","_this7","classList","contains","add","remove","context","addEventListener","_this8","_bindValue","_this9","setAttribute","scope","indexStack","modelPaths","_pScope","_cScope","_identifyKey","randomSequence","_t","closureScope","closureIndexStack","parentNode","virtualDiv","createDocumentFragment","_div","cloneNode","_dataPath","bindForItemsRecursion","appendChild","replaceChild","replaceChilds","querySelectorAll","itemIndex","isInit","child","isHTMLCollection","j","_thisSubModel","_attrsMain","_this11","paths","fns","_key","parseInt","observeKey","observePath","currentPath","_this13","keys","observeArray","mutatorMethods","arrayProto","hijackProto","create","method","resultVal","_this14","__proto__","objPure","find","is"],"mappings":"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"}