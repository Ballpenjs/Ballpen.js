{"version":3,"file":"ballpen.min.js","sources":["../src/ballpen.js"],"sourcesContent":["class Ballpen {\r\n\r\n    constructor(el, dataModel) { \r\n        // Init EventList\r\n        this.init(el, dataModel);\r\n        // Scan directives\r\n        this.scan(this.$el);\r\n    };\r\n\r\n    init(el, dataModel) {\r\n        this.$el = document.querySelector(el);\r\n\r\n        // Handle invalid root element\r\n        if (!this.$el) {\r\n            Ballpen.throwError(`Find an invalid root element when initializing Ballpen.js -> \"${el}\"`, 'Well, you should set a valid root element for Ballpen.js first constructor parameter, eg: \"#app\", \"#container\".');  \r\n        }\r\n\r\n        if (dataModel.events) {\r\n            this.$eventList = {};\r\n            this.initEventList(dataModel.events);\r\n        }\r\n\r\n        if (dataModel.data) {\r\n            // Set proxy to global data payload\r\n            this.$dataListPure = dataModel.data;\r\n            this.$dataList = Ballpen.clone(dataModel.data);\r\n        }\r\n\r\n        if (dataModel.watchers) {\r\n            this.watchersHook = new Map();\r\n\r\n            let _watchers = dataModel.watchers;\r\n\r\n            for (let watcher in _watchers) {\r\n                const _dataPath = watcher;\r\n                const _dataHook = _watchers[watcher].handler;\r\n\r\n                this.watchersHook.set(_dataPath, _dataHook);\r\n            }\r\n\r\n            this.watchersHook.forEach((watcherFn, path) => {\r\n                Ballpen.renderObjectValueByPath(this.$dataList, path, this.setProxy(Ballpen.parseData(path, this.$dataList).data, path, watcherFn, watcherFn));\r\n            });\r\n        }\r\n\r\n        // Other initializations\r\n        this.$registers = [];\r\n    };\r\n\r\n    setProxy(dataList, path, fnSet = false, fnGet = false) {\r\n        let _oldVal = Ballpen.parseData(path, this.$dataListPure).data;\r\n\r\n        let handler = {\r\n            get: (target, property) => {\r\n                // Run callback\r\n                fnGet && fnGet.call(this, Ballpen.parseData(path, this.$dataListPure).data, Ballpen.parseData(path, this.$dataList).data);\r\n                return target[property];\r\n            },\r\n            set: (target, property, value, receiver) => {\r\n                let realProperty;\r\n                if (/^\\$/ig.test(property)) {\r\n                    realProperty = property.substring(1);\r\n                } else {\r\n                    realProperty = property;\r\n                }\r\n\r\n                target[realProperty] = value;\r\n                // Run callback\r\n                if (realProperty === property) {\r\n                    fnSet && fnSet.call(this, Ballpen.parseData(path, this.$dataListPure).data, Ballpen.parseData(path, this.$dataList).data);\r\n                }\r\n                \r\n                // Return true to accept the changes\r\n                return true;\r\n            },\r\n            defineProperty: (target, prop, descriptor) => {\r\n                return Reflect.defineProperty(target, prop, descriptor);\r\n            }\r\n        };\r\n\r\n        // Can not set a proxy on a single value (!! need to be fixed !!)\r\n        return new Proxy(dataList, handler);\r\n    };\r\n\r\n    initEventList(eventList) {\r\n        if (eventList) {\r\n            let _thisEventObject = eventList;\r\n            for (let item in _thisEventObject) {\r\n                this.$eventList[item]      = {};\r\n                this.$eventList[item].type = '';\r\n                this.$eventList[item].fn   = _thisEventObject[item];\r\n            }\r\n        }\r\n    };\r\n\r\n    scan(el, init = true) {\r\n        for (let i = 0; i < el.children.length; i++) {\r\n            let _thisNode = el.children[i];\r\n     \r\n            // Bind\r\n            if (_thisNode.hasAttributes()) {\r\n                let _attrs = _thisNode.attributes;\r\n                let _attrsArr = [];\r\n\r\n                for (let i = 0; i < _attrs.length; i++) {\r\n                    const _attr = _attrs.item(i);\r\n                    _attrsArr.push(_attr.name);\r\n\r\n                    if (/bp-event:/ig.test(_attr.name)) {\r\n                        let _fnType = _attr.name.split(':')[1];\r\n                        let _fnName = _attr.value;\r\n                        this.bindEvent(_thisNode, _fnName, _fnType, this.$dataList);\r\n                    }\r\n\r\n                    if (/bp-bind:/ig.test(_attr.name)) {\r\n                        let _bindKey   = _attr.name.split(':')[1];\r\n                        let _bindValue = _attr.value;\r\n                        this.bindBind(_thisNode, _bindValue, _bindKey);\r\n                    }\r\n                }\r\n\r\n                if (_attrsArr.includes('bp-pre')) {\r\n                    continue;\r\n                }\r\n\r\n                if (_attrsArr.includes('bp-for')) {\r\n                    this.bindFor(_thisNode);\r\n                    continue;\r\n                }\r\n\r\n                if (_attrsArr.includes('bp-model')) {\r\n                    this.bindModel(_thisNode);\r\n                }\r\n\r\n                if (_attrsArr.includes('bp-class')) {\r\n                    this.bindClass(_thisNode);\r\n                }\r\n\r\n                if (_attrsArr.includes('bp-show')) {\r\n                    this.bindShow(_thisNode);\r\n                }\r\n            }\r\n\r\n            // Moustache binding\r\n            let childNodes = _thisNode.childNodes;\r\n            childNodes.forEach((item, key) => {\r\n                if (item.nodeType === Node.TEXT_NODE) {\r\n                    this.bindMoustache(_thisNode, item);\r\n                }\r\n            });\r\n\r\n            // Recursion\r\n            if (_thisNode.children.length > 0) {\r\n                this.scan(_thisNode, false);\r\n            }\r\n        }\r\n\r\n        if (init) {\r\n            // Attach observers\r\n            this.attach();\r\n            // Show rendered view\r\n            this.$el.removeAttribute('bp-shade');\r\n        }   \r\n    };\r\n\r\n    static isHTMLCollection(obj) {\r\n        return Object.prototype.toString.call(obj) === '[object HTMLCollection]';\r\n    };\r\n\r\n    static isArray(arr) {\r\n        return Array.isArray(arr) || Object.prototype.toString.call(arr) === '[object Array]';\r\n    };\r\n\r\n    static toArray(collection) {\r\n        return Array.prototype.slice.call(collection);\r\n    }\r\n\r\n    static isObject(obj) {\r\n        return Object.prototype.toString.call(obj) === '[object Object]';\r\n    };\r\n\r\n    static renderObjectValueByPath(obj, path, val) {\r\n        let _paths = path.split('.');\r\n\r\n        if (typeof Ballpen.parseData(path, obj).data === 'undefined') {\r\n            Ballpen.throwError(`Find an invalid watcher path when initializing Ballpen.js -> \"${path}\"`, 'Please make sure the watcher path you set is exist and valid.');  \r\n        }\r\n\r\n        if (_paths.length === 1) {\r\n            obj[_paths[0]] = val;\r\n        } else {\r\n            for (let i = 0; i < _paths.length - 1; i++) {\r\n                obj = obj[_paths[i]];\r\n                if (!obj) {\r\n                    Ballpen.throwError(`Find an invalid watcher path when initializing Ballpen.js -> \"${path}\"`, 'Please make sure the watcher path you set is exist and valid.');  \r\n                }\r\n\r\n                if (i === _paths.length - 2) {\r\n                    obj[_paths[_paths.length - 1]] = val;\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    static parseData(str, dataObj) {\r\n        const _list = str.split('.');\r\n        let _data = dataObj;\r\n        let p = [];\r\n\r\n        _list.forEach((key, index) => {\r\n            if (index === 0) {\r\n                _data = dataObj[key];\r\n                p.push(key);\r\n            } else {\r\n                _data = _data[key];\r\n                p.push(key);\r\n            }\r\n        });\r\n\r\n        return {\r\n            path: p,\r\n            data: _data\r\n        };\r\n    };\r\n\r\n    static ignoreInnerDirectives(directiveValue, exceptList, fn, ...args) {\r\n        exceptList.forEach((regexp) => {\r\n            if (regexp.test(directiveValue)) {\r\n                fn && fn.call(this, ...args);\r\n            }\r\n        });\r\n\r\n        if (!/^@/ig.test(directiveValue)) {\r\n            fn && fn.call(this, ...args);\r\n        }\r\n    };\r\n\r\n    static clone(obj) {\r\n        let copy;\r\n\r\n        if (obj === null || typeof obj !== 'object') return obj;\r\n\r\n        if (obj instanceof Date) {\r\n            copy = new Date();\r\n            copy.setTime(obj.getTime());\r\n            return copy;\r\n        }\r\n\r\n        if (obj instanceof Array) {\r\n            copy = [];\r\n            for (var i = 0, len = obj.length; i < len; i++) {\r\n                copy[i] = Ballpen.clone(obj[i]);\r\n            }\r\n            return copy;\r\n        }\r\n\r\n        if (obj instanceof Object) {\r\n            copy = {};\r\n            for (var attr in obj) {\r\n                if (obj.hasOwnProperty(attr)) copy[attr] = Ballpen.clone(obj[attr]);\r\n            }\r\n            return copy;\r\n        }\r\n\r\n        Ballpen.throwError('Internal error, unable to copy object, type is not supported.', 'Please contact the author to fix this issue.');  \r\n    };\r\n\r\n    static wrapAbsPath(rootPath, relPath) {\r\n        return (Ballpen.isArray(rootPath) && rootPath.length > 0 ? (rootPath.join('.') + '.') : (rootPath.toString().length > 0 ? (rootPath.toString() + '.') : '')) + \r\n        (Ballpen.isArray(relPath) && relPath.length > 0 ? relPath.join('.') : (relPath.toString().length > 0 ? relPath.toString() : ''));\r\n    };\r\n\r\n    static throwError(err, desc) {\r\n        let _e = new Error(`[Ballpen Parser Error] \\n\\n [Message] \\n\\n - ${err} \\n\\n [Description] \\n\\n - ${desc} \\n`); \r\n        _e.name = 'BallpenError';     \r\n\r\n        throw _e;           \r\n    };\r\n    \r\n    static randomSequence(n) {\r\n        let chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\r\n        let res = '';\r\n\r\n        for (let i = 0; i < n; i++) {\r\n            let id = Math.ceil(Math.random() * 35);\r\n            res += chars[id];\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    bindShow(el, rootPath = []) {\r\n        const modelName = Ballpen.wrapAbsPath(rootPath, el.getAttribute('bp-show')); \r\n\r\n        Ballpen.ignoreInnerDirectives(modelName, [], (el) => {\r\n            const model = Ballpen.parseData(modelName, this.$dataList);\r\n\r\n            const elStyle = el.style;\r\n \r\n            (!model.data ? elStyle.display = 'none' : (elStyle.removeProperty ? elStyle.removeProperty('display') : elStyle.removeAttribute('display')));\r\n\r\n            this.register(this.$dataList, this.$dataListPure, model.path, (yetVal, nowVal) => {\r\n                (!nowVal ? elStyle.display = 'none' : (elStyle.removeProperty ? elStyle.removeProperty('display') : elStyle.removeAttribute('display')));\r\n            });\r\n        }, el);\r\n    };\r\n\r\n    bindModel(el, rootPath = []) {\r\n        const modelName = Ballpen.wrapAbsPath(rootPath, el.getAttribute('bp-model'));\r\n\r\n        Ballpen.ignoreInnerDirectives(modelName, [/^@{([\\d]+)}$/ig], (el) => {\r\n            // Handel 'for' list index\r\n            if (/^@{([\\d]+)}$/ig.test(modelName)) {\r\n                let index = modelName.match(/^@{([\\d]+)}$/)[1];\r\n\r\n                (el.tagName === 'INPUT' ? el.value = index : el.innerText = index);\r\n            } else {\r\n                const model = Ballpen.parseData(modelName, this.$dataList);\r\n\r\n                (el.tagName === 'INPUT' ? el.value = model.data : el.innerText = model.data);\r\n\r\n                this.register(this.$dataList, this.$dataListPure, model.path, (yetVal, nowVal) => {\r\n                    (el.tagName === 'INPUT' ? el.value = nowVal : el.innerText = nowVal);\r\n                });\r\n            }\r\n        }, el);\r\n    };\r\n\r\n    bindMoustache(el, subTextNode, rootPath = []) {\r\n        let subTextNodeValuePure = subTextNode.nodeValue;\r\n        let subTextNodeValueRendered = subTextNode.nodeValue;\r\n        let subPatterns = subTextNodeValueRendered.match(/{{.*?}}/ig);\r\n        let modelsMapper = {};\r\n\r\n        if (Ballpen.isArray(subPatterns) && subPatterns.length > 0) {\r\n            subPatterns.forEach((pattern) => {\r\n                let modelName = pattern.slice(2, -2).trim();\r\n\r\n                if (/^@{([\\d]+)}$/ig.test(modelName)) {\r\n                    modelsMapper[pattern] = modelName.match(/^@{([\\d]+)}$/)[1];\r\n                } else {\r\n                    let model = Ballpen.parseData(Ballpen.wrapAbsPath(rootPath, modelName), this.$dataList);\r\n                    modelsMapper[pattern] = model.data;\r\n\r\n                    this.register(this.$dataList, this.$dataListPure, model.path, (yetVal, nowVal) => {\r\n                        modelsMapper[`{{ ${model.path.join('.')} }}`] = nowVal;\r\n                        for (let pattern in modelsMapper) {\r\n                            subTextNodeValueRendered = subTextNodeValuePure.replace(pattern, modelsMapper[pattern]);\r\n                        }\r\n\r\n                        subTextNode.nodeValue = subTextNodeValueRendered;\r\n                    });\r\n                }\r\n            });\r\n            \r\n            for (let pattern in modelsMapper) {\r\n                subTextNodeValueRendered = subTextNodeValuePure.replace(pattern, modelsMapper[pattern]);\r\n            }      \r\n        }\r\n\r\n        subTextNode.nodeValue = subTextNodeValueRendered;\r\n    };\r\n\r\n    bindClass(el, rootPath = []) {\r\n        const modelName = Ballpen.wrapAbsPath(rootPath, el.getAttribute('bp-class'));\r\n\r\n        Ballpen.ignoreInnerDirectives(modelName, [], (el) => {\r\n            const model = Ballpen.parseData(modelName, this.$dataList);\r\n\r\n            if (!el.classList.contains(model.data)) {\r\n                el.classList.add(model.data);\r\n            }\r\n\r\n            this.register(this.$dataList, this.$dataListPure, model.path, (yetVal, nowVal) => {\r\n                el.classList.remove(yetVal);\r\n                if (!el.classList.contains(nowVal)) {\r\n                    el.classList.add(nowVal);\r\n                }\r\n            });\r\n        }, el);\r\n    };\r\n\r\n    bindEvent(el, _fnName, _fnType, context, args = {}) {\r\n        Ballpen.ignoreInnerDirectives(_fnName, [], (el, _fnName, _fnType, context) => {\r\n            // Update global event list\r\n            this.$eventList[_fnName]['type'] = _fnType;\r\n            \r\n            // Bind listener, set callback fn to global data context\r\n            el.addEventListener(_fnType, () => {\r\n                this.$eventList[_fnName]['fn'].call(this.$dataList, el, context, args);\r\n            });\r\n        }, el, _fnName, _fnType, context, args);\r\n    };\r\n\r\n    bindBind(el, _bindValue, _bindKey, rootPath = []) {\r\n        Ballpen.ignoreInnerDirectives(_bindValue, [], (el, _bindValue, _bindKey) => {\r\n            const modelName = Ballpen.wrapAbsPath(rootPath, _bindValue);\r\n            const model = Ballpen.parseData(modelName, this.$dataList);\r\n\r\n            // Set customized attribute\r\n            el.setAttribute(_bindKey, model.data);\r\n            \r\n            // Bind listener, set callback fn to global data context\r\n            this.register(this.$dataList, this.$dataListPure, model.path, (yetVal, nowVal) => {\r\n                el.setAttribute(_bindKey, nowVal);\r\n            });\r\n        }, el, _bindValue, _bindKey);\r\n    };\r\n\r\n    bindFor(el, scope = {}, indexStack = {}) {\r\n        const modelPaths = el.getAttribute('bp-for').split(/\\s+in\\s+/);\r\n        const _pScope = modelPaths[1];\r\n        const _cScope = modelPaths[0];\r\n        const _identifyKey = Ballpen.randomSequence(12);\r\n\r\n        if (!/^@/ig.test(_cScope)) {\r\n            Ballpen.throwError(`Invalid alias name when initializing a \"bp-for\" condition -> \"${_cScope}\".`, 'Please make sure the alias name is start with a \"@\" symbol.');  \r\n        }\r\n        \r\n        // Update scope array\r\n        if (/\\./ig.test(_pScope)) {\r\n            const _t = _pScope.split('.');\r\n            scope[_pScope] = scope[_t[0]] + '.' + _t[1];\r\n        } else {\r\n            scope[_pScope] = _pScope;\r\n        }\r\n\r\n        // Set closure variables\r\n        let closureScope = Ballpen.clone(scope);\r\n        let closureIndexStack = Ballpen.clone(indexStack);\r\n\r\n        const model = Ballpen.parseData(scope[_pScope], this.$dataList);\r\n        \r\n        let parentNode = el.parentNode;\r\n        let virtualDiv = document.createDocumentFragment();\r\n\r\n        for (let i = 0; i < model.data.length; i++) {\r\n            let _div = el.cloneNode(true);\r\n            let _dataPath = `${scope[_pScope]}.${i}`;\r\n\r\n            // Update current scope chain\r\n            scope[_cScope] = _dataPath;\r\n\r\n            // Update current index chain\r\n            indexStack[_cScope] = i;\r\n\r\n            _div.removeAttribute('bp-for');\r\n            _div.setAttribute('bp-for-rendered-id', _identifyKey);\r\n\r\n            this.bindForItemsRecursion(_div, scope, indexStack, _dataPath, i, true, (el) => {\r\n                virtualDiv.appendChild(el);\r\n            });\r\n        }\r\n\r\n        parentNode.replaceChild(virtualDiv, el);\r\n\r\n        // Set register\r\n        this.register(this.$dataList, this.$dataListPure, model.path, (yetVal, nowVal) => {\r\n            let virtualDiv = document.createDocumentFragment();\r\n\r\n            for (let i = 0; i < nowVal.length; i++) {\r\n                let _div = el.cloneNode(true);\r\n                let _dataPath = `${closureScope[_pScope]}.${i}`;\r\n\r\n                // Update current scope chain\r\n                closureScope[_cScope] = _dataPath;\r\n\r\n                // Update current index chain\r\n                closureIndexStack[_cScope] = i;\r\n\r\n                _div.removeAttribute('bp-for');\r\n                _div.setAttribute('bp-for-rendered-id', _identifyKey);\r\n\r\n                this.bindForItemsRecursion(_div, closureScope, closureIndexStack, _dataPath, i, true, (el) => {\r\n                    virtualDiv.appendChild(el);\r\n                });\r\n            }\r\n\r\n            let replaceChilds = parentNode.querySelectorAll(`[bp-for-rendered-id='${_identifyKey}']`);\r\n            for (let i = 0; i < replaceChilds.length; i++) {\r\n                if (i === 0) {\r\n                    parentNode.replaceChild(virtualDiv, replaceChilds.item(i));\r\n                } else {\r\n                    replaceChilds.item(i).remove();\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    bindForItemsRecursion(el, scope, indexStack, data, itemIndex, isInit = false, fn = false) {\r\n        let child = !!Ballpen.isHTMLCollection(el);\r\n\r\n        for (let j = 0; j < (child ? el.length : 1); j++) {\r\n            const _thisNode = (child ? el[j] : el);\r\n\r\n            // Render moustache\r\n            let childNodes = _thisNode.childNodes;\r\n            childNodes.forEach((item, key) => {\r\n                if (item.nodeType === Node.TEXT_NODE) {\r\n                    let subTextNodeValuePure = item.nodeValue;\r\n                    let subTextNodeValueRendered = item.nodeValue;\r\n\r\n                    let subPatterns = subTextNodeValueRendered.match(/{{.*?}}/ig);\r\n                    let modelsMapper = {};\r\n\r\n                    if (Ballpen.isArray(subPatterns) && subPatterns.length > 0) {\r\n                        subPatterns.forEach((pattern) => {\r\n                            let _thisSubModel = pattern.slice(2, -2).trim();\r\n                            let _thisSubModelAbs = _thisSubModel;\r\n\r\n                            if (/^@/ig.test(_thisSubModel)) {\r\n                            // Get index\r\n                                if (/\\[\\[index\\]\\]/ig.test(_thisSubModel)) {\r\n                                    _thisSubModelAbs = '@{' + `${indexStack[_thisSubModel.match(/^(.*)\\[\\[index\\]\\]$/)[1]]}` + '}';\r\n                                } else {\r\n                                    _thisSubModelAbs = _thisSubModel.replace(/^@[a-z0-9A-Z_]*/, scope[_thisSubModel.split('.')[0]]);  \r\n                                }\r\n                            }\r\n\r\n                            modelsMapper[pattern] = `{{ ${_thisSubModelAbs} }}`;\r\n                        });\r\n                        \r\n                        for (let pattern in modelsMapper) {\r\n                            subTextNodeValueRendered = subTextNodeValuePure.replace(pattern, modelsMapper[pattern]);\r\n                        }      \r\n                    }\r\n\r\n                    item.nodeValue = subTextNodeValueRendered;\r\n\r\n                    this.bindMoustache(_thisNode, item);\r\n                }\r\n            });\r\n\r\n            if (!_thisNode.hasAttributes() && child) {\r\n                if (_thisNode.children.length > 0) {\r\n                    this.bindForItemsRecursion(_thisNode.children, scope, indexStack, data, itemIndex);\r\n                }\r\n                continue;\r\n            }\r\n\r\n            // Bind normal render tag\r\n            let _attrsMain = _thisNode.attributes;\r\n            let _attrsArr = [];\r\n\r\n            for (let i = 0; i < _attrsMain.length; i++) {\r\n                let _i = _attrsMain.item(i);\r\n                _attrsArr.push(_i.name);\r\n\r\n                // Bind event\r\n                if (/bp-event:/ig.test(_i.name)) {\r\n                    let _fnType = _i.name.split(':')[1];\r\n                    let _fnName = _i.value;\r\n\r\n                    if (/^@:/ig.test(_fnName)) {\r\n                        this.bindEvent(_thisNode, _fnName.split(':')[1], _fnType, this.$dataList, {\r\n                            index: itemIndex\r\n                        });\r\n                    } else {\r\n                        this.bindEvent(_thisNode, _fnName, _fnType, this.$dataList, {});\r\n                    }\r\n                }\r\n\r\n                if (/bp-bind:/ig.test(_i.name)) {\r\n                    let _bindKey = _i.name.split(':')[1];\r\n                    let _thisSubModelAbs = _i.value;\r\n\r\n                    if (/^@/ig.test(_thisSubModelAbs)) {\r\n                        _thisSubModelAbs = _thisSubModelAbs.replace(/^@[a-z0-9A-Z_]*/, scope[_thisSubModelAbs.split('.')[0]]);\r\n                    }\r\n\r\n                    this.bindBind(_thisNode, _thisSubModelAbs, _bindKey);\r\n                }\r\n            }\r\n\r\n            // Render 'for' list in another 'for' list\r\n            if (_attrsArr.includes('bp-for')) {\r\n                this.bindFor(_thisNode, scope, indexStack);\r\n                continue;\r\n            }\r\n\r\n            if (_attrsArr.includes('bp-class')) {\r\n                let _thisSubModel = _thisNode.getAttribute('bp-class');  \r\n                let _thisSubModelAbs = _thisSubModel;\r\n\r\n                if (/^@/ig.test(_thisSubModel)) {\r\n                    _thisSubModelAbs = _thisSubModel.replace(/^@[a-z0-9A-Z_]*/, scope[_thisSubModel.split('.')[0]]);\r\n                }\r\n\r\n                if (_thisSubModelAbs !== _thisSubModel) {\r\n                    _thisNode.setAttribute('bp-class', _thisSubModelAbs);\r\n                }\r\n\r\n                this.bindClass(_thisNode);\r\n            }\r\n\r\n            if (_attrsArr.includes('bp-model')) {\r\n                let _thisSubModel = _thisNode.getAttribute('bp-model');\r\n                let _thisSubModelAbs = _thisSubModel;\r\n\r\n                if (/^@/ig.test(_thisSubModel)) {\r\n                    // Get index\r\n                    if (/\\[\\[index\\]\\]/ig.test(_thisSubModel)) {\r\n                        _thisSubModelAbs = '@{' + `${indexStack[_thisSubModel.match(/^(.*)\\[\\[index\\]\\]$/)[1]]}` + '}';\r\n                    } else if (/@{\\d+}/ig.test(_thisSubModel)) {\r\n                        _thisSubModelAbs = _thisSubModel;\r\n                    } else {\r\n                        _thisSubModelAbs = _thisSubModel.replace(/^@[a-z0-9A-Z_]*/, scope[_thisSubModel.split('.')[0]]);  \r\n                    }\r\n                }\r\n                \r\n                if (_thisSubModelAbs !== _thisSubModel) {\r\n                    _thisNode.setAttribute('bp-model', _thisSubModelAbs);\r\n                }\r\n\r\n                this.bindModel(_thisNode);\r\n            }\r\n\r\n            if (_attrsArr.includes('bp-show')) {\r\n                let _thisSubModel = _thisNode.getAttribute('bp-show');\r\n                let _thisSubModelAbs = _thisSubModel;\r\n\r\n                if (/^@/ig.test(_thisSubModel)) {\r\n                    _thisSubModelAbs = _thisSubModel.replace(/^@[a-z0-9A-Z_]*/, scope[_thisSubModel.split('.')[0]]);\r\n                }\r\n\r\n                if (_thisSubModelAbs !== _thisSubModel) {\r\n                    _thisNode.setAttribute('bp-show', _thisSubModelAbs);\r\n                }\r\n\r\n                this.bindShow(_thisNode);\r\n            }\r\n\r\n            if (_thisNode.children.length > 0) {\r\n                this.bindForItemsRecursion(_thisNode.children, scope, indexStack, data, itemIndex);\r\n            }\r\n        }\r\n\r\n        if (isInit) {\r\n            fn && fn.call(this, el);\r\n        }\r\n    };\r\n\r\n    observePath(obj, rootPath, paths, fns) {\r\n        if (Ballpen.isArray(paths)) {\r\n            let _path = obj;\r\n            let _key;\r\n\r\n            paths.forEach((key, index) => {\r\n                if (/^\\d+$/.test(key)) {\r\n                    key = parseInt(key);\r\n                }\r\n\r\n                if (index < paths.length - 1) {\r\n                    _path = _path[key];\r\n                } else {    \r\n                    _key = key;\r\n                }\r\n            });\r\n\r\n            rootPath = paths.join('.');\r\n\r\n            this.observeKey(_path, rootPath, _key, fns);\r\n        }\r\n    };\r\n\r\n    observeKey(obj, rootPath, key, fns = false) {            \r\n        if (Ballpen.isArray(key)) {\r\n            this.observePath(obj, rootPath, key, fns);\r\n        } else {\r\n            let yetVal = obj[key];\r\n            const currentPath = rootPath;\r\n           \r\n            if (Ballpen.isObject(yetVal)) {\r\n                Object.defineProperty(obj, key, {\r\n                    get: () => {\r\n                        return yetVal;\r\n                    },\r\n                    set: (nowVal) => {  \r\n                        if (nowVal !== yetVal) {\r\n                            fns && fns.forEach((fn) => {\r\n                                fn.call(this, yetVal, nowVal);\r\n                            });\r\n\r\n                            yetVal = nowVal;\r\n\r\n                            Ballpen.renderObjectValueByPath(this.$dataListPure, currentPath, nowVal);\r\n                        }\r\n                    },\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n\r\n                Object.keys(yetVal).forEach((key) => {\r\n                    this.observeKey(yetVal, currentPath + '.' + key, key, fns);\r\n                });\r\n            } else if (Ballpen.isArray(yetVal)) {\r\n                Object.defineProperty(obj, key, {\r\n                    get: () => {\r\n                        return yetVal;\r\n                    },\r\n                    set: (nowVal) => {  \r\n                        if (nowVal !== yetVal) {\r\n                            fns && fns.forEach((fn) => {\r\n                                fn.call(this, yetVal, nowVal);\r\n                            });\r\n\r\n                            yetVal = nowVal;\r\n\r\n                            Ballpen.renderObjectValueByPath(this.$dataListPure, currentPath, nowVal);\r\n                        }\r\n                    },\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n\r\n                this.observeArray(yetVal, currentPath, fns);\r\n            } else {\r\n                Object.defineProperty(obj, key, {\r\n                    get: () => {\r\n                        return yetVal;\r\n                    },\r\n                    set: (nowVal) => {  \r\n                        if (nowVal !== yetVal) {\r\n                            fns && fns.forEach((fn) => {\r\n                                fn.call(this, yetVal, nowVal);\r\n                            });\r\n\r\n                            yetVal = nowVal;\r\n\r\n                            Ballpen.renderObjectValueByPath(this.$dataListPure, currentPath, nowVal);\r\n                        }\r\n                    },\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n            }\r\n        }\r\n    };\r\n    \r\n    observeArray(arr, rootPath, fns = false) {\r\n        const mutatorMethods = ['copyWithin', 'fill', 'pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'];\r\n        const arrayProto = Array.prototype;\r\n\r\n        // Prevent from polluting the global 'Array.prototype'\r\n        const hijackProto = Object.create(arrayProto);\r\n\r\n        const currentPath = rootPath;\r\n\r\n        mutatorMethods.forEach((method) => {\r\n            Object.defineProperty(hijackProto, method, {\r\n                enumerable: true,\r\n                configurable: true,\r\n                writable: true,\r\n                value: (...args) => {\r\n                    let yetVal = arr.slice();\r\n                    let resultVal = arrayProto[method].call(arr, ...args);\r\n                    let nowVal = arr;\r\n\r\n                    Ballpen.renderObjectValueByPath(this.$dataListPure, currentPath, nowVal);\r\n                    // Callback\r\n                    fns && fns.forEach((fn) => {\r\n                        fn.call(this, yetVal, nowVal);\r\n                    }); \r\n\r\n                    return resultVal;\r\n                } \r\n            });\r\n        });\r\n        /* eslint-disable */\r\n        arr.__proto__ = hijackProto;\r\n        // arr.__proto__.__proto__ === Array.prototype; // true\r\n    };\r\n\r\n    register(obj, objPure, key, fn) {\r\n        const register = this.$registers.find((item) => {\r\n            if (Object.is(item.obj, obj) && (item.key === key || item.key.toString() === key.toString())) {\r\n                return item;\r\n            }\r\n        });\r\n\r\n        if (register) {\r\n            register.fns.push(fn);\r\n        } else {\r\n            this.$registers.push({\r\n                obj: obj,\r\n                rootPath: [],\r\n                key: key,\r\n                fns: [fn]\r\n            });\r\n        }\r\n    };\r\n\r\n    attach() {\r\n        this.$registers.forEach((register) => {\r\n            this.observeKey(register.obj, register.rootPath, register.key, register.fns);\r\n        });\r\n    };\r\n\r\n}\r\n\r\nexport default Ballpen;\r\n"],"names":["Ballpen","el","dataModel","init","scan","this","$el","document","querySelector","throwError","events","$eventList","initEventList","data","$dataListPure","$dataList","clone","watchers","watchersHook","Map","_watchers","watcher","_dataPath","_dataHook","handler","set","forEach","watcherFn","path","renderObjectValueByPath","_this","setProxy","parseData","$registers","dataList","fnSet","fnGet","target","property","call","_this2","value","receiver","realProperty","test","substring","prop","descriptor","Reflect","defineProperty","Proxy","eventList","_thisEventObject","item","type","fn","i","_thisNode","children","hasAttributes","_attrs","attributes","_attrsArr","length","_attr","push","name","_fnType","split","_fnName","bindEvent","_this3","_bindKey","_bindValue","bindBind","includes","bindFor","bindModel","bindClass","bindShow","childNodes","key","nodeType","Node","TEXT_NODE","bindMoustache","attach","removeAttribute","rootPath","modelName","wrapAbsPath","getAttribute","ignoreInnerDirectives","model","_this4","elStyle","style","removeProperty","display","register","yetVal","nowVal","index","match","tagName","innerText","_this5","subTextNode","subTextNodeValuePure","nodeValue","subTextNodeValueRendered","subPatterns","modelsMapper","isArray","pattern","slice","trim","_this6","join","replace","_this7","classList","contains","add","remove","context","args","addEventListener","_this8","_this9","setAttribute","scope","indexStack","modelPaths","_pScope","_cScope","_identifyKey","randomSequence","_t","closureScope","closureIndexStack","parentNode","virtualDiv","createDocumentFragment","_div","cloneNode","bindForItemsRecursion","appendChild","replaceChild","replaceChilds","querySelectorAll","itemIndex","isInit","child","isHTMLCollection","j","_thisSubModel","_thisSubModelAbs","_attrsMain","_i","_this11","obj","paths","fns","_path","_key","parseInt","observeKey","observePath","currentPath","isObject","_this13","keys","observeArray","arr","mutatorMethods","arrayProto","Array","prototype","hijackProto","Object","create","method","resultVal","_this14","__proto__","objPure","find","is","toString","collection","val","_paths","str","dataObj","_list","_data","p","directiveValue","exceptList","regexp","copy","Date","setTime","getTime","len","attr","hasOwnProperty","relPath","err","desc","_e","Error","n","chars","res","id","Math","ceil","random"],"mappings":"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"}