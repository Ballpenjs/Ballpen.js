{"version":3,"file":"ballpen.min.js","sources":["../src/ballpen-filter.js","../src/ballpen-error.js","../src/ballpen-util.js","../src/ballpen-observer.js","../src/ballpen-proxy.js","../src/ballpen-decorator.js","../src/ballpen-wasm.js","../src/ballpen-global-wrapper.js","../src/ballpen.js"],"sourcesContent":["class BallpenFilter {\n    static filterParams (fnStr) {\n        let parmsPath = [];\n        let parm = fnStr.match(/\\(([a-zA-Z0-9_$]*?)\\)/i)[1];\n        if (parm) {\n            /* eslint-disable */\n            let rawPathes = fnStr.match(new RegExp(`${parm}(\\[\"[a-zA-Z0-9_$]+\"\\]|\\['[a-zA-Z0-9_$]+'\\]|\\[[0-9]+\\]|\\.[a-zA-Z0-9_$]+)*`, 'ig'));\n            if (rawPathes.length > 0) {\n                let resultSet = new Set();\n\n                rawPathes.forEach((value, key) => {\n                    if (key > 0) {\n                        resultSet.add(BallpenFilter._parseObjectToPath(value));\n                    }\n                });\n\n                return Array.from(resultSet);\n            }\n        }\n\n        return parmsPath;\n    };\n\n    static _parseObjectToPath(ObjStr) {\n        return ObjStr.match(new RegExp(`[0-9A-Za-z]+`, 'ig')).splice(1).join('.');\n    }\n}\n\nexport default BallpenFilter;\n","class BallpenError {\n    static errorEntity(aim) {\n        return {\n            INIT_INVALID_ROOT: {\n                err: `Find an invalid root element when initializing Ballpen.js -> \"${aim}\"`,\n                desc: 'Well, you should set a valid root element for Ballpen.js first constructor parameter, eg: \"#app\", \"#container\".'\n            },\n            INVALID_RENDER_PATH: {\n                err: `Find an invalid watcher path when initializing Ballpen.js -> \"${aim}\"`,\n                desc: 'Please make sure the watcher path you set is exist and valid.'\n            },\n            BIND_FOR_INVALID_ALIAS: {\n                err: `Invalid alias name when initializing a \"bp-for\" condition -> \"${aim}\".`,\n                desc: 'Please make sure the alias name is start with a \"@\" symbol.'\n            },\n            INTERNEL_INVALID_CLONE: {\n                err: 'Internal error, unable to copy object, type is not supported.',\n                desc: 'Please contact the author to fix this issue.'\n            }\n        };\n    };\n\n    static throw(entity) {\n        let err = entity.err;\n        let desc = entity.desc;\n        let _e = new Error(`[Ballpen Parser Error] \\n\\n [Message] \\n\\n - ${err} \\n\\n [Description] \\n\\n - ${desc} \\n`); \n        _e.name = 'BallpenError';     \n\n        throw _e;           \n    };\n\n    static trigger(type, aim = '') {\n        BallpenError.throw(BallpenError.errorEntity(aim)[type]);\n    };\n}\n\nexport default BallpenError;\n","import BallpenFilter from './ballpen-filter.js';\nimport BallpenError from './ballpen-error.js';\n\nclass BallpenUtil {\n    static findReferenceNode(obj, map = new Map(), root = '') {\n        let _root = root;\n\n        if (BallpenUtil.isObject(obj)) {\n            for (let _i in obj) {\n                if (BallpenUtil.isObject(obj[_i]) || BallpenUtil.isArray(obj[_i])) {\n                    _root += `${_i}.`;\n\n                    map.set(_root.slice(0, -1), []);\n\n                    BallpenUtil.findReferenceNode(obj[_i], map, _root);\n                }\n            }\n        } else if (BallpenUtil.isArray(obj)) {\n            obj.forEach((_i, _index) => {\n                if (BallpenUtil.isObject(_i) || BallpenUtil.isArray(_i)) {\n                    _root += `${_index}.`;\n\n                    map.set(_root.slice(0, -1), []);\n\n                    BallpenUtil.findReferenceNode(_i, map, _root);\n                }\n            });\n        }\n\n        return map;\n    };\n    \n\tstatic isHTMLCollection(obj) {\n        return Object.prototype.toString.call(obj) === '[object HTMLCollection]';\n    };\n\n    static isArray(arr) {\n        return Array.isArray(arr) || Object.prototype.toString.call(arr) === '[object Array]';\n    };\n\n    static toArray(collection) {\n        return Array.prototype.slice.call(collection);\n    };\n\n    static isObject(obj) {\n        return Object.prototype.toString.call(obj) === '[object Object]';\n    };\n\n    static isNumber(obj) {\n        return Object.prototype.toString.call(obj) === '[object Number]';\n    };\n\n    static isReferenceType(obj) {\n        return BallpenUtil.isObject(obj) || BallpenUtil.isArray(obj);\n    };\n\n    static renderObjectValueByPath(obj, path, val) {\n        let _paths = path.split('.');\n\n        if (typeof BallpenUtil.parseData(path, obj).data === 'undefined') {\n            BallpenError.trigger('INVALID_RENDER_PATH', path);\n        }\n\n        if (_paths.length === 1) {\n            obj[_paths[0]] = val;\n        } else {\n            for (let i = 0; i < _paths.length - 1; i++) {\n                obj = obj[_paths[i]];\n                if (!obj) {\n                    BallpenError.trigger('INVALID_RENDER_PATH', path);\n                }\n\n                if (i === _paths.length - 2) {\n                    obj[_paths[_paths.length - 1]] = val;\n                }\n            }\n        }\n    };\n\n    static parseData(str, dataObj, comObj = {}) {\n        if (str.charAt(0) === '*') {\n            let _data = {\n                path: {\n                    real: str,\n                    base: comObj['_reference'][str.substring(1)]\n                },\n                data: comObj[str.substring(1)]\n            };\n\n            // For mustache\n            _data.path.join = (splitter) => {\n                return _data.path.real;\n            };\n\n            return _data;\n        }\n\n        const _list = str.split('.');\n        let _data = dataObj;\n        let p = [];\n\n        _list.forEach((key, index) => {\n            if (index === 0) {\n                _data = dataObj[key];\n                p.push(key);\n            } else {\n                _data = _data[key];\n                p.push(key);\n            }\n        });\n\n        return {\n            path: p,\n            data: _data\n        };\n    };\n\n    static ignoreInnerDirectives(directiveValue, exceptList, fn) {\n        exceptList.forEach((regexp) => {\n            if (regexp.test(directiveValue)) {\n                fn && fn.call(this);\n            }\n        });\n\n        if (!/^@/ig.test(directiveValue)) {\n            fn && fn.call(this);\n        }\n    };\n\n    static clone(obj) {\n        let copy;\n\n        if (obj === null || typeof obj !== 'object') return obj;\n\n        if (obj instanceof Date) {\n            copy = new Date();\n            copy.setTime(obj.getTime());\n            return copy;\n        }\n\n        if (obj instanceof Array) {\n            copy = [];\n            for (var i = 0, len = obj.length; i < len; i++) {\n                copy[i] = BallpenUtil.clone(obj[i]);\n            }\n            return copy;\n        }\n\n        if (obj instanceof Object) {\n            copy = {};\n            for (var attr in obj) {\n                if (obj.hasOwnProperty(attr)) copy[attr] = BallpenUtil.clone(obj[attr]);\n            }\n            return copy;\n        }\n\n        BallpenError.trigger('INTERNEL_INVALID_CLONE');\n    };\n\n    static wrapAbsPath(rootPath, relPath) {\n        return (BallpenUtil.isArray(rootPath) && rootPath.length > 0 ? (rootPath.join('.') + '.') : (rootPath.toString().length > 0 ? (rootPath.toString() + '.') : '')) + \n        (BallpenUtil.isArray(relPath) && relPath.length > 0 ? relPath.join('.') : (relPath.toString().length > 0 ? relPath.toString() : ''));\n    };\n\n    static randomSequence(n) {\n        let chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n        let res = '';\n\n        for (let i = 0; i < n; i++) {\n            let id = Math.ceil(Math.random() * 35);\n            res += chars[id];\n        }\n\n        return res;\n    };\n\n    static analyzeComputedReference(fnString, dataObj) {\n        let pathes = BallpenFilter.filterParams(fnString);\n        let references = [];\n\n        pathes.forEach((value, key) => {\n            references.push(value);\n        });\n\n        return references;\n    };\n}\n\nexport default BallpenUtil;\n","import BallpenUtil from './ballpen-util.js';\n\nclass Observer {\n\tstatic observePath(obj, objPure, rootPath, paths, fns) {\n        if (BallpenUtil.isArray(paths)) {\n            let _path = obj;\n            let _key;\n\n            paths.forEach((key, index) => {\n                if (/^\\d+$/.test(key)) {\n                    key = parseInt(key);\n                }\n\n                if (index < paths.length - 1) {\n                    _path = _path[key];\n                } else {    \n                    _key = key;\n                }\n            });\n\n            rootPath = paths.join('.');\n\n            Observer.observeKey(_path, objPure, rootPath, _key, fns);\n        }\n    };\n\n    static observeKey(obj, objPure, rootPath, key, fns = false) {            \n        if (BallpenUtil.isArray(key)) {\n            Observer.observePath(obj, objPure, rootPath, key, fns);\n        } else {\n            // Normal attribtues or computed attributes\n            let isComputed = obj['_reference'] && obj['_fn'];\n            let yetVal = obj[key];\n            const currentPath = rootPath;\n\n            if (BallpenUtil.isObject(yetVal)) {\n                Object.defineProperty(obj, key, {\n                    get: () => {\n                        return yetVal;\n                    },\n                    set: (nowVal) => {  \n                        if (nowVal !== yetVal) {\n                            // Disabled when update a computed attribute\n                            if (!isComputed) {\n                                BallpenUtil.renderObjectValueByPath(objPure, currentPath, nowVal);\n                            }\n\n                            fns && fns.forEach((fn) => {\n                                fn.call(this, yetVal, nowVal);\n                            });\n\n                            yetVal = nowVal;\n                        }\n                    },\n                    enumerable: true,\n                    configurable: true\n                });\n\n                Object.keys(yetVal).forEach((key) => {\n                    Observer.observeKey(yetVal, currentPath + '.' + key, key, fns);\n                });\n            } else if (BallpenUtil.isArray(yetVal)) {\n                Object.defineProperty(obj, key, {\n                    get: () => {\n                        return yetVal;\n                    },\n                    set: (nowVal) => {  \n                        if (nowVal !== yetVal) {\n                            if (!isComputed) {\n                                BallpenUtil.renderObjectValueByPath(objPure, currentPath, nowVal);\n                            }\n\n                            fns && fns.forEach((fn) => {\n                                fn.call(this, yetVal, nowVal);\n                            });\n\n                            yetVal = nowVal;\n                        }\n                    },\n                    enumerable: true,\n                    configurable: true\n                });\n\n                Observer.observeArray(yetVal, objPure, currentPath, fns);\n            } else {\n                Object.defineProperty(obj, key, {\n                    get: () => {\n                        return yetVal;\n                    },\n                    set: (nowVal) => {  \n                        if (nowVal !== yetVal) {\n                            if (!isComputed) {\n                                BallpenUtil.renderObjectValueByPath(objPure, currentPath, nowVal);\n                            }\n\n                            fns && fns.forEach((fn) => {\n                                fn.call(this, yetVal, nowVal);\n                            });\n\n                            yetVal = nowVal;\n                        }\n                    },\n                    enumerable: true,\n                    configurable: true\n                });\n            }\n        }\n    };\n    \n    static observeArray(arr, objPure, rootPath, fns = false) {\n        const mutatorMethods = ['copyWithin', 'fill', 'pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'];\n        const arrayProto = Array.prototype;\n\n        // Prevent from polluting the global 'Array.prototype'\n        const hijackProto = Object.create(arrayProto);\n\n        const currentPath = rootPath;\n\n        mutatorMethods.forEach((method) => {\n            Object.defineProperty(hijackProto, method, {\n                enumerable: true,\n                configurable: true,\n                writable: true,\n                value: (...args) => {\n                    let yetVal = arr.slice();\n                    let resultVal = arrayProto[method].call(arr, ...args);\n                    let nowVal = arr;\n\n                    BallpenUtil.renderObjectValueByPath(objPure, currentPath, nowVal);\n                    // Callback\n                    fns && fns.forEach((fn) => {\n                        fn.call(this, yetVal, nowVal);\n                    }); \n\n                    return resultVal;\n                } \n            });\n        });\n        /* eslint-disable */\n        arr.__proto__ = hijackProto;\n        // arr.__proto__.__proto__ === Array.prototype; // true\n    };\n\n    static register(registers, obj, objCompute, objPure, key, fn) {\n        // Computed \n        if (BallpenUtil.isObject(key)) {\n            const _rn = key.real.substring(1);\n            // For computed attributes\n            const register = registers.find((item) => {\n                if (Object.is(item.obj, objCompute) && (item.key === key.real || item.key.toString() === key.real.toString())) {\n                    return item;\n                }\n            });\n\n            if (register) {\n                register.fns.push(fn);\n            } else {\n                registers.push({\n                    obj: objCompute,\n                    path: _rn.join('.'),\n                    rootPath: '',\n                    key: _rn,  // Remove '*' at the top of computed attribute\n                    fns: [fn]\n                });\n            }\n\n            // Set setter/getter on inner children\n            key.base.forEach((_k) => {\n                const register = registers.find((item) => {\n                    if (Object.is(item.obj, obj) && (item.key === _k || item.key.toString() === _k.toString())) {\n                        return item;\n                    }\n                });\n\n                let fn = (yetVal, nowVal) => {\n                    if (nowVal !== yetVal) { \n                        // Update all referenced computed attributes \n                        objCompute[_rn] = objCompute['_fn'][_rn].call(this, objPure);\n                    }\n                };\n\n                if (register) {\n                    register.fns.push(fn);\n                } else {\n                    let key = BallpenUtil.parseData(_k, obj).path;\n                    registers.push({\n                        obj: obj,\n                        objPure: objPure,\n                        path: key.join('.'),\n                        rootPath: '',\n                        key: key,\n                        fns: [fn]\n                    });\n                }\n            });\n        } else if (BallpenUtil.isArray(key)) {\n            const register = registers.find((item) => {\n                if (Object.is(item.obj, obj) && (item.key === key || item.key.toString() === key.toString())) {\n                    return item;\n                }\n            });\n\n            if (register) {\n                register.fns.push(fn);\n            } else {\n                registers.push({\n                    obj: obj,\n                    objPure: objPure,\n                    path: key.join('.'),\n                    rootPath: '',\n                    key: key,\n                    fns: [fn]\n                });\n            }\n        }\n    };\n\n    static attach(registers) {\n        registers.forEach((register) => {\n            Observer.observeKey(register.obj, register.objPure, register.rootPath, register.key, register.fns);\n        });\n    };\n}\n\nexport default Observer;\n","import BallpenUtil from './ballpen-util.js';\n\nclass BallpenProxy {\n\tstatic setProxy(path, watcherQueue, dataList, dataListPure) {\n        let _dist = BallpenUtil.parseData(path, dataList).data;\n        let _ov = BallpenUtil.parseData(path, dataListPure).data;\n\n        let handler = {\n            get: (_target, _property) => {\n                return _target[_property];\n            },\n            set: (_target, _property, _v, receiver) => {\n                // Run callback\n                if (_v !== _ov[_property]) {\n                    let _pv;\n\n                    if (BallpenUtil.isReferenceType(_v)) {\n                        _ov[_property] = BallpenUtil.clone(_v);\n                        _pv = BallpenUtil.clone(_v);\n                    } else {\n                        _ov[_property] = _v;\n                        _pv = _v;\n                    }\n\n                    // Update pure data\n                    BallpenUtil.renderObjectValueByPath(dataListPure, `${path}.${_property}`, _pv);\n                    \n                    _target[_property] = _v;\n\n                    watcherQueue.forEach((entity) => {\n                        let _fn = entity.handler;\n                        let _path = entity.root;\n\n                        _fn && _fn.call(this, BallpenUtil.parseData(_path, dataListPure).data, BallpenUtil.parseData(_path, dataList).data);\n                    });\n                }\n\n                // Return true to accept the changes\n                return true;\n            },\n            defineProperty: (target, prop, descriptor) => {\n                return Reflect.defineProperty(target, prop, descriptor);\n            }\n        };\n\n        // Can not set a proxy on a single value (!! need to be fixed !!)\n        return new Proxy(_dist, handler);\n    };\n}\n\nexport default BallpenProxy;\n","import BallpenUtil from './ballpen-util.js';\n\nclass BallpenDecorator  {\n\tstatic analyzeDecoratorDependency(str) {\n\t\tconst _t = str.split('->:');\n\t\treturn {\n\t\t\tdecorators: _t.slice(1),\n\t\t\tmodelPath: _t[0]\n\t\t};\n\t}\n\n    static analyzeDecorators(str) {\n        return {\n            decorators: str.split('->:').slice(1)\n        };\n    }\n\n    static decorate(globalDecoratorList, decoratorsList, value, clone = true) {\n        // Prevent data pollution\n        let _f = value;\n        if (clone) {\n            let _f = BallpenUtil.clone(value);\n        } \n\n        // Deal with decorators\n        decoratorsList.decorators.forEach((_v) => {\n            _f = globalDecoratorList[_v].call(this, _f);\n        });\n\n        return _f;\n    }\n}\n\nexport default BallpenDecorator;\n","class Wasm {\n    static load(path, imports = {}) {\n        return fetch(path)\n          .then(response => response.arrayBuffer())\n          .then(buffer => WebAssembly.compile(buffer))\n          .then(module => {\n              imports.env = imports.env || {};\n\n              imports.env.memoryBase = imports.env.memoryBase || 0;\n              if (!imports.env.memory) {\n                  imports.env.memory = new WebAssembly.Memory({ initial: 256 });\n              }\n\n              imports.env.tableBase = imports.env.tableBase || 0;\n              if (!imports.env.table) {\n                  imports.env.table = new WebAssembly.Table({ initial: 0, element: 'anyfunc' });\n              }\n\n              return new WebAssembly.Instance(module, imports);\n\n              /**\n                  C++ Name Demangler: https://demangler.com/\n               */\n        });\n    };\n\n    static loadAll(path) {\n\n    };\n}\n\nexport default Wasm;\n","// Ballpen wasm loader\nimport Wasm from './ballpen-wasm.js';\n\nclass BallpenGlobalWrapper {\n    static set(Ballpen) {\n        Ballpen.registerPlugin = BallpenGlobalWrapper.registerPlugin;\n\n        // Global variables\n        Ballpen.$refs = {};\n\n        // Others\n        if (window.WebAssembly && Ballpen.wasmPath) {\n            Ballpen.wasmCore = {}; \n            Ballpen.wasmCore = Wasm.loadAll(Ballpen.wasmPath);\n        }\n    }\n\n    static registerPlugin(alias, pluginEntity) {\n        Ballpen[`$${alias}`] = pluginEntity;\n    }\n}\n\nexport default BallpenGlobalWrapper;\n","import BallpenUtil from './ballpen-util.js';\nimport BallpenObserver from './ballpen-observer.js';\nimport BallpenProxy from './ballpen-proxy.js';\nimport BallpenDecorator from './ballpen-decorator.js';\nimport BallpenError from './ballpen-error.js';\nimport BallpenGlobalWrapper from './ballpen-global-wrapper.js';\n\nclass Ballpen {\n\n    constructor(el, dataModel) { \n        this.$dataModel = dataModel;\n\n        // Save instance identifier\n        this.$id = this.$dataModel.name ? this.$dataModel.name.trim() : BallpenUtil.randomSequence(6);\n\n        // Set wasm path\n        if (this.$dataModel.wasmPath) {\n            Ballpen.wasmPath = this.$dataModel.wasmPath.trim();\n        }\n\n        // Set $refs, $http, etc those global sets before initializaiton\n        BallpenGlobalWrapper.set(Ballpen);\n\n        // Set a global bus including all instances\n        if (!Ballpen.bus) {\n            Ballpen.bus = {};\n        }\n\n        Ballpen.bus[this.$id] = this.$dataModel;\n\n        this.lifecycleHookPoint('beforeRender', this.$dataModel, () => {\n            // Init EventList\n            this.init(el, this.$dataModel);\n            // Scan directives\n            this.scan(this.$el);\n        });\n    };\n\n    lifecycleHookPoint(type, dataModel, fn = null) {\n        let rawData = dataModel.data;\n\n        if (dataModel.lifecycle) {\n             if (dataModel.lifecycle.beforeRender && type === 'beforeRender') {\n                new Promise((resolve, reject) => {\n                    return dataModel.lifecycle.beforeRender.call(this, resolve, reject, rawData);\n                }).then(() => {\n                    fn && fn.call(this, dataModel);\n                }).catch((err) => {});\n            } else if (dataModel.lifecycle.afterRneder && type === 'afterRender') {\n                dataModel.lifecycle.afterRender.call(this, rawData);\n            } else {\n                fn && fn.call(this, dataModel);\n            }\n        } else {\n            fn && fn.call(this, dataModel);\n        }\n    };\n\n    init(el, dataModel) {\n        this.$el = document.querySelector(el);\n\n        // Handle invalid root element\n        if (!this.$el) {\n            BallpenError.trigger('INIT_INVALID_ROOT', el);\n        }\n\n\n        // Init core features\n        if (dataModel.data) {\n            // Set proxy to global data payload\n            this.$dataListPure = dataModel.data;\n            // Set an alias for pure data\n            this.data = this.$dataListPure;\n\n            this.$dataList = BallpenUtil.clone(dataModel.data);\n\n            // Save observer data to global bus\n            Ballpen.bus[this.$id]['_obs'] = this.$dataList;\n        }\n\n        // Events\n        if (dataModel.events) {\n            this.$eventList = {};\n            this.initEventList(dataModel.events);\n        }\n        \n        // Watchers\n        if (dataModel.watchers) {\n            // Find every reference node in datalist\n            this.watchersHook = BallpenUtil.findReferenceNode(this.$dataList);\n\n            let _watchers = dataModel.watchers;\n\n            for (let _watcher in _watchers) {\n                const _watcherEntity = {\n                    root: _watcher,\n                    handler: _watchers[_watcher].handler\n                };\n\n                this.watchersHook.forEach((watcherQueue, path) => {\n                    if (new RegExp('^' + _watcher, 'ig').test(path)) {\n                        watcherQueue.push(_watcherEntity);\n                    }\n                });\n            }\n\n            // Mount watchers\n            this.watchersHook.forEach((watcherQueue, path) => {\n                BallpenUtil.renderObjectValueByPath(this.$dataList, path, BallpenProxy.setProxy(path, watcherQueue, this.$dataList, this.$dataListPure));\n            });\n        }\n\n        // Computed\n        if (dataModel.computed) {\n            this.$computedList = {};\n            for (let key in dataModel.computed) {\n                this.$computedList[key] = {};\n                this.$computedList['_reference'] = {};\n                this.$computedList['_fn'] = {};\n                this.$computedList['_reference'][key] = BallpenUtil.analyzeComputedReference(dataModel.computed[key].toString(), this.$dataListPure);\n                this.$computedList['_fn'][key] = dataModel.computed[key];\n                this.$computedList[key] = dataModel.computed[key].call(this, this.$dataListPure);\n            }\n        }\n\n        // Decorators\n        if (dataModel.decorators) {\n            let _decoratorsModel = dataModel.decorators;\n            this.$decoratorList = {};\n            for (let key in _decoratorsModel) {\n                this.$decoratorList[key] = _decoratorsModel[key];\n            }\n        }\n\n        // Components\n        if (dataModel.components) {\n            \n        }\n\n        // Other initializations\n        this.$registers = [];\n    };\n\n    initEventList(eventList) {\n        if (eventList) {\n            let _thisEventObject = eventList;\n            for (let item in _thisEventObject) {\n                this.$eventList[item]      = {};\n                this.$eventList[item].type = '';\n                this.$eventList[item].fn   = _thisEventObject[item];\n            }\n        }\n    };\n\n    scan(el, init = true) {\n        for (let i = 0; i < el.children.length; i++) {\n            let _thisNode = el.children[i];\n     \n            // Bind\n            if (_thisNode.hasAttributes()) {\n                let _attrs = _thisNode.attributes;\n                let _attrsArr = [];\n\n                for (let i = 0; i < _attrs.length; i++) {\n                    const _attr = _attrs.item(i);\n                    _attrsArr.push(_attr.name);\n\n                    if (/bp-event/ig.test(_attr.name)) {\n                        _thisNode.removeAttribute(_attr.name);\n\n                        let eventBindedList = [];\n                        let _i = _attr;\n\n                        if (/bp-event:/ig.test(_i.name)) {\n                            // Single event\n                            eventBindedList.push({\n                                _fnType: _i.name.split(':')[1],\n                                _fnName: _i.value \n                            });\n                        } else {\n                            // Multi events\n                            let bindArrs = _i.value.match(/[a-zA-Z]+:[a-zA-Z0-9_$]+/ig);\n                            bindArrs.forEach((binder) => {\n                                eventBindedList.push({\n                                    _fnType: binder.split(':')[0],\n                                    _fnName: binder.split(':')[1] \n                                });\n                            });\n                        }\n\n                        eventBindedList.forEach((eventBinded) => {\n                            let _fnType = eventBinded._fnType;\n                            let _fnName = eventBinded._fnName;\n\n                            this.bindEvent(_thisNode, _fnName, _fnType, this.$dataList, {});\n                        });\n                    }\n\n                    if (/bp-bind/ig.test(_attr.name)) {\n                        _thisNode.removeAttribute(_attr.name);\n\n                        let attrsBindedList = [];\n                        let _i = _attr;\n\n                        if (/bp-bind:/ig.test(_i.name)) {\n                            // Single bind\n                            attrsBindedList.push({\n                                _bindKey: _i.name.split(':')[1],\n                                _thisSubModelAbs: _i.value \n                            });\n                        } else {\n                            // Multi bind\n                            let bindArrs = _i.value.match(/[a-zA-Z0-9_$-]+:[a-zA-Z0-9_$.\\->:()]+/ig);\n                            bindArrs.forEach((binder) => {\n                                const _t = binder.split(/:+?/);\n                                attrsBindedList.push({\n                                    _bindKey: _t[0],\n                                    _thisSubModelAbs: _t.slice(1).join(':') \n                                });\n                            });\n                        }\n\n                        attrsBindedList.forEach((attrsBinded) => {\n                            let _bindKey = attrsBinded._bindKey;\n                            let _thisSubModelAbs = attrsBinded._thisSubModelAbs;\n\n                            this.bindBind(_thisNode, _thisSubModelAbs, _bindKey);\n                        });\n                    }\n                }\n\n                if (_attrsArr.includes('bp-pre')) {\n                    this.bindPre(_thisNode);\n                    continue;\n                }\n\n                if (_attrsArr.includes('bp-for')) {\n                    this.bindFor(_thisNode);\n                    continue;\n                }\n\n                if (_attrsArr.includes('bp-model')) {\n                    this.bindModel(_thisNode);\n                }\n\n                if (_attrsArr.includes('bp-class')) {\n                    this.bindClass(_thisNode);\n                }\n\n                if (_attrsArr.includes('bp-show')) {\n                    this.bindShow(_thisNode);\n                }\n\n                if (_attrsArr.includes('bp-ref')) {\n                    this.bindRef(_thisNode);\n                }\n            }\n\n            // Moustache binding\n            let childNodes = _thisNode.childNodes;\n            childNodes.forEach((item, key) => {\n                if (item.nodeType === Node.TEXT_NODE) {\n                    this.bindMoustache(_thisNode, item);\n                }\n            });\n\n            // Recursion\n            if (_thisNode.children.length > 0) {\n                this.scan(_thisNode, false);\n            }\n        }\n\n        if (init) {\n            // Attach observers\n            BallpenObserver.attach(this.$registers);\n            // Show rendered view\n            this.$el.removeAttribute('bp-shade');\n\n            // Lifecycle hook\n            this.lifecycleHookPoint('afterRender', this.$dataModel);\n        }   \n    };\n\n    bindRef(el) {\n        let key = el.getAttribute('bp-ref');\n\n        if (BallpenUtil.isArray(Ballpen.$refs[key])) {\n            Ballpen.$refs[key].push(el);\n        } else {\n            Ballpen.$refs[key] = [];\n            Ballpen.$refs[key].push(el);\n        }\n\n        el.removeAttribute('bp-ref');\n    };\n\n    bindShow(el, rootPath = []) {\n        let _t = el.getAttribute('bp-show');\n        // Get relatived decorators\n        const decorators = BallpenDecorator.analyzeDecoratorDependency(_t);\n\n        // Get absolute path of the model\n        const modelName = BallpenUtil.wrapAbsPath(rootPath, decorators.modelPath); \n\n        BallpenUtil.ignoreInnerDirectives(modelName, [], () => {\n            const model = BallpenUtil.parseData(modelName, this.$dataList, this.$computedList);\n            \n            // Decoration\n            let _v = BallpenDecorator.decorate(this.$decoratorList, decorators, model.data);\n\n            const _es = el.style;\n            \n            // Init view\n            (!_v ? _es.display = 'none' : (_es.removeProperty ? _es.removeProperty('display') : _es.removeAttribute('display')));\n\n            BallpenObserver.register(this.$registers, this.$dataList, this.$computedList, this.$dataListPure, model.path, (yetVal, nowVal) => {\n                // Decoration\n                let _v = BallpenDecorator.decorate(this.$decoratorList, decorators, nowVal);\n\n                // Update view\n                (!_v ? _es.display = 'none' : (_es.removeProperty ? _es.removeProperty('display') : _es.removeAttribute('display')));\n            });\n        });\n\n        el.removeAttribute('bp-show');\n    };\n\n    bindModel(el, rootPath = []) {\n        let _t = el.getAttribute('bp-model');\n        // Get relatived decorators\n        const decorators = BallpenDecorator.analyzeDecoratorDependency(_t);\n\n        // Get absolute path of the model\n        const modelName = BallpenUtil.wrapAbsPath(rootPath, decorators.modelPath);\n\n        BallpenUtil.ignoreInnerDirectives(modelName, [], () => {\n            // Handel 'for' list index\n            if (/^@{([\\d]+)}$/ig.test(modelName)) {\n                let index = modelName.match(/^@{([\\d]+)}$/)[1];\n\n                (el.tagName === 'INPUT' ? el.value = index : el.innerText = index);\n            } else {\n                const model = BallpenUtil.parseData(modelName, this.$dataList, this.$computedList);\n            \n                // Decoration\n                let _v = BallpenDecorator.decorate(this.$decoratorList, decorators, model.data);\n\n                (el.tagName === 'INPUT' ? el.value = _v : el.innerText = _v);\n\n                BallpenObserver.register(this.$registers, this.$dataList, this.$computedList, this.$dataListPure, model.path, (yetVal, nowVal) => {\n                    // Decoration\n                    let _v = BallpenDecorator.decorate(this.$decoratorList, decorators, nowVal);\n\n                    (el.tagName === 'INPUT' ? el.value = _v : el.innerText = _v);\n                });\n            }\n        });\n\n        el.removeAttribute('bp-model');\n    };\n\n    bindMoustache(el, subTextNode, rootPath = []) {\n        let subTextNodeValuePure = subTextNode.nodeValue;\n        let subTextNodeValueRendered = subTextNode.nodeValue;\n        let subPatterns = subTextNodeValueRendered.match(/{{.*?}}/ig);\n        let modelsMapper = {};\n\n        if (BallpenUtil.isArray(subPatterns) && subPatterns.length > 0) {\n            subPatterns.forEach((pattern) => {\n                let _t = pattern.slice(2, -2).trim();\n\n                // Get relatived decorators\n                const decorators = BallpenDecorator.analyzeDecoratorDependency(_t);\n\n                if (/^@{([\\d]+)}$/ig.test(decorators.modelPath)) {\n                    modelsMapper[pattern] = decorators.modelPath.match(/^@{([\\d]+)}$/)[1];\n                } else {\n                     // Get absolute path of the model\n                    let model = BallpenUtil.parseData(BallpenUtil.wrapAbsPath(rootPath, decorators.modelPath), this.$dataList, this.$computedList);\n\n                    // Decoration\n                    let _v = BallpenDecorator.decorate(this.$decoratorList, decorators, model.data);\n\n                    modelsMapper[pattern] = _v;\n\n                    BallpenObserver.register(this.$registers, this.$dataList, this.$computedList, this.$dataListPure, model.path, (yetVal, nowVal) => {\n                        // Decoration\n                        let _v = BallpenDecorator.decorate(this.$decoratorList, decorators, nowVal);\n                        let _k = model.path.join('.');\n\n                        decorators.decorators.forEach((value) => {\n                            _k += (`->:${value}`);\n                        });\n\n                        modelsMapper[`{{ ${_k} }}`] = _v;\n\n                        for (let pattern in modelsMapper) {\n                            subTextNodeValueRendered = subTextNodeValueRendered.replace(pattern, modelsMapper[pattern]);\n                        }\n\n                        subTextNode.nodeValue = subTextNodeValueRendered;\n                        subTextNodeValueRendered = subTextNodeValuePure;\n                    });\n                }\n            });\n            \n            for (let pattern in modelsMapper) {\n                subTextNodeValueRendered = subTextNodeValueRendered.replace(pattern, modelsMapper[pattern]);\n            }      \n        }\n\n        subTextNode.nodeValue = subTextNodeValueRendered;\n        subTextNodeValueRendered = subTextNodeValuePure;\n    };\n\n    bindClass(el, rootPath = []) {\n        let _t = el.getAttribute('bp-class');\n\n        // Get relatived decorators\n        const decorators = BallpenDecorator.analyzeDecoratorDependency(_t);\n\n        // Get absolute path of the model\n        const modelName = BallpenUtil.wrapAbsPath(rootPath, decorators.modelPath);\n\n        BallpenUtil.ignoreInnerDirectives(modelName, [], () => {\n            const model = BallpenUtil.parseData(modelName, this.$dataList, this.$computedList);\n\n            // Decoration\n            let _v = BallpenDecorator.decorate(this.$decoratorList, decorators, model.data);\n\n            if (!el.classList.contains(_v)) {\n                el.classList.add(_v);\n            }\n\n            BallpenObserver.register(this.$registers, this.$dataList, this.$computedList, this.$dataListPure, model.path, (yetVal, nowVal) => {\n                // Decoration\n                let _y = BallpenDecorator.decorate(this.$decoratorList, decorators, yetVal);\n                let _v = BallpenDecorator.decorate(this.$decoratorList, decorators, nowVal);\n\n                el.classList.remove(_y);\n                if (!el.classList.contains(_v)) {\n                    el.classList.add(_v);\n                }\n            });\n        });\n\n        el.removeAttribute('bp-class');\n    };\n\n    bindPre(el) {\n        el.removeAttribute('bp-pre');\n    }\n\n    bindEvent(el, _fnName, _fnType, context, args = {}) {\n        BallpenUtil.ignoreInnerDirectives(_fnName, [], () => {\n            // Update global event list\n            this.$eventList[_fnName]['type'] = _fnType;\n            \n            // Bind listener, set callback fn to global data context\n            el.addEventListener(_fnType, () => {\n                this.$eventList[_fnName]['fn'].call(this.$dataList, el, context, args);\n            });\n        });\n    };\n\n    bindBind(el, _bindValue, _bindKey, rootPath = []) {\n        BallpenUtil.ignoreInnerDirectives(_bindValue, [], () => {\n            // Get relatived decorators\n            const decorators = BallpenDecorator.analyzeDecoratorDependency(_bindValue);\n\n            // Get absolute path of the model\n            const modelName = BallpenUtil.wrapAbsPath(rootPath, decorators.modelPath); \n\n            const model = BallpenUtil.parseData(modelName, this.$dataList, this.$computedList);\n\n            // Decoration\n            let _v = BallpenDecorator.decorate(this.$decoratorList, decorators, model.data);\n\n            // Set customized attribute\n            el.setAttribute(_bindKey, _v);\n            \n            // Bind listener, set callback fn to global data context\n            BallpenObserver.register(this.$registers, this.$dataList, this.$computedList, this.$dataListPure, model.path, (yetVal, nowVal) => {\n                // Decoration\n                let _v = BallpenDecorator.decorate(this.$decoratorList, decorators, nowVal);\n\n                el.setAttribute(_bindKey, _v);\n            });\n        });\n    };\n\n    bindFor(el, scope = {}, indexStack = {}) {\n        const modelPaths = el.getAttribute('bp-for').split(/\\s+in\\s+/);\n        const _pScope = modelPaths[1].split(/->:/i)[0];\n        const _cScope = modelPaths[0];\n        const _identifyKey = BallpenUtil.randomSequence(12);\n\n        if (!/^@/ig.test(_cScope)) {\n            BallpenError.trigger('BIND_FOR_INVALID_ALIAS', _cScope);\n        }\n        \n        // Update scope array\n        if (/\\./ig.test(_pScope)) {\n            const _t = _pScope.split('.');\n            scope[_pScope] = scope[_t[0]] + '.' + _t[1];\n        } else {\n            scope[_pScope] = _pScope;\n        }\n\n        // Set closure variables\n        let closureScope = BallpenUtil.clone(scope);\n        let closureIndexStack = BallpenUtil.clone(indexStack);\n\n        // Only get relatived decorators, without data path\n        const decorators = BallpenDecorator.analyzeDecorators(modelPaths[1]);\n\n        // Render data model from analyzed bundle \"scope[_pScope]\", not from parent scope directly\n        const model = BallpenUtil.parseData(scope[_pScope], this.$dataList, this.$computedList);\n\n        // Decoration\n        let _v = BallpenDecorator.decorate(this.$decoratorList, decorators, model.data, false);\n\n        let parentNode = el.parentNode;\n        let virtualDiv = document.createDocumentFragment();\n\n        // Parent scope is a native number -> model.data\n        const iterateCount = _v.length ? _v.length : _v;\n        for (let i = 0; i < iterateCount; i++) {\n            let _div = el.cloneNode(true);\n            let _dataPath = `${scope[_pScope]}.${i}`;\n\n            // Update current scope chain\n            scope[_cScope] = _dataPath;\n\n            // Update current index chain (start with 1)\n            indexStack[_cScope] = i + 1;\n\n            _div.removeAttribute('bp-for');\n            _div.setAttribute('bp-for-rendered-id', _identifyKey);\n\n            this.bindForItemsRecursion(_div, scope, indexStack, _dataPath, i, true, (el) => {\n                virtualDiv.appendChild(el);\n            });\n        }\n\n        parentNode.replaceChild(virtualDiv, el);\n\n        // Set register\n        BallpenObserver.register(this.$registers, this.$dataList, this.$computedList, this.$dataListPure, model.path, (yetVal, nowVal) => {\n            let virtualDiv = document.createDocumentFragment();\n\n            // Parent scope is a native number -> nowVal\n            const iterateCount = nowVal.length ? nowVal.length : nowVal;\n            for (let i = 0; i < iterateCount; i++) {\n                let _div = el.cloneNode(true);\n                let _dataPath = `${closureScope[_pScope]}.${i}`;\n\n                // Update current scope chain\n                closureScope[_cScope] = _dataPath;\n\n                // Update current index chain\n                closureIndexStack[_cScope] = i;\n\n                _div.removeAttribute('bp-for');\n                _div.setAttribute('bp-for-rendered-id', _identifyKey);\n\n                this.bindForItemsRecursion(_div, closureScope, closureIndexStack, _dataPath, i, true, (el) => {\n                    virtualDiv.appendChild(el);\n                });\n            }\n\n            let replaceChilds = parentNode.querySelectorAll(`[bp-for-rendered-id='${_identifyKey}']`);\n            for (let i = 0; i < replaceChilds.length; i++) {\n                if (i === 0) {\n                    parentNode.replaceChild(virtualDiv, replaceChilds.item(i));\n                } else {\n                    replaceChilds.item(i).remove();\n                }\n            }\n        });\n    };\n\n    bindForItemsRecursion(el, scope, indexStack, data, itemIndex, isInit = false, fn = false) {\n        let child = !!BallpenUtil.isHTMLCollection(el);\n\n        for (let j = 0; j < (child ? el.length : 1); j++) {\n            const _thisNode = (child ? el[j] : el);\n\n            // Render moustache\n            let childNodes = _thisNode.childNodes;\n            childNodes.forEach((item, key) => {\n                if (item.nodeType === Node.TEXT_NODE) {\n                    let subTextNodeValueRendered = item.nodeValue;\n                    let subTextNodeValuePure = item.nodeValue;\n\n                    let subPatterns = subTextNodeValueRendered.match(/{{.*?}}/ig);\n                    let modelsMapper = {};\n\n                    if (BallpenUtil.isArray(subPatterns) && subPatterns.length > 0) {\n                        subPatterns.forEach((pattern) => {\n                            let _thisSubModel = pattern.slice(2, -2).trim();\n                            let _thisSubModelAbs = _thisSubModel;\n\n                            if (/^@/ig.test(_thisSubModel)) {\n                                // Get index\n                                if (/\\[\\[index\\]\\]/ig.test(_thisSubModel)) {\n                                    _thisSubModelAbs = '@{' + `${indexStack[_thisSubModel.match(/^(.*)\\[\\[index\\]\\]$/)[1]]}` + '}';\n                                } else {\n                                    _thisSubModelAbs = _thisSubModel.replace(/^@[a-z0-9A-Z_]*/, scope[_thisSubModel.split('.')[0]]);  \n                                }\n                            }\n\n                            modelsMapper[pattern] = `{{ ${_thisSubModelAbs} }}`;\n                        });\n                   \n                        for (let pattern in modelsMapper) {\n                            subTextNodeValueRendered = subTextNodeValueRendered.replace(pattern, modelsMapper[pattern]);\n                        }      \n                    }\n\n                    item.nodeValue = subTextNodeValueRendered;\n                    subTextNodeValueRendered = subTextNodeValuePure;\n\n                    this.bindMoustache(_thisNode, item);\n                }\n            });\n\n            if (!_thisNode.hasAttributes() && child) {\n                if (_thisNode.children.length > 0) {\n                    this.bindForItemsRecursion(_thisNode.children, scope, indexStack, data, itemIndex);\n                }\n                continue;\n            }\n\n            // Bind normal render tag\n            let _attrsMain = _thisNode.attributes;\n            let _attrsArr = [];\n\n            for (let i = 0; i < _attrsMain.length; i++) {\n                let _i = _attrsMain.item(i);\n                _attrsArr.push(_i.name);\n\n                // Bind event\n                if (/bp-event/ig.test(_i.name)) {\n                    let eventBindedList = [];\n\n                    if (/bp-event:/ig.test(_i.name)) {\n                        // Single event\n                        eventBindedList.push({\n                            _fnType: _i.name.split(':')[1],\n                            _fnName: _i.value \n                        });\n                    } else {\n                        // Multi events\n                        let bindArrs = _i.value.match(/[a-zA-Z]+:[a-zA-Z0-9_$]+/ig);\n                        bindArrs.forEach((binder) => {\n                            eventBindedList.push({\n                                _fnType: binder.split(':')[0],\n                                _fnName: binder.split(':')[1] \n                            });\n                        });\n                    }\n\n                    eventBindedList.forEach((eventBinded) => {\n                        let _fnType = eventBinded._fnType;\n                        let _fnName = eventBinded._fnName;\n\n                        if (/^@:/ig.test(_fnName)) {\n                            this.bindEvent(_thisNode, _fnName.split(':')[1], _fnType, this.$dataList, {\n                                index: itemIndex\n                            });\n                        } else {\n                            this.bindEvent(_thisNode, _fnName, _fnType, this.$dataList, {});\n                        }\n                    });\n\n                    _thisNode.removeAttribute(_i.name);\n                }\n\n                if (/bp-bind/ig.test(_i.name)) {\n                    let attrsBindedList = [];\n\n                    if (/bp-bind:/ig.test(_i.name)) {\n                        // Single bind\n                        attrsBindedList.push({\n                            _bindKey: _i.name.split(':')[1],\n                            _thisSubModelAbs: _i.value \n                        });\n                    } else {\n                        // Multi bind\n                        let bindArrs = _i.value.match(/[a-zA-Z0-9_$-]+:[a-zA-Z0-9_$.\\->:()]+/ig);\n                        bindArrs.forEach((binder) => {\n                            const _t = binder.split(/:+?/);\n                            attrsBindedList.push({\n                                _bindKey: _t[0],\n                                _thisSubModelAbs: _t.slice(1).join(':') \n                            });\n                        });\n                    }\n\n                    attrsBindedList.forEach((attrsBinded) => {\n                        let _bindKey = attrsBinded._bindKey;\n                        let _thisSubModelAbs = attrsBinded._thisSubModelAbs;\n\n                        if (/^@/ig.test(_thisSubModelAbs)) {\n                            _thisSubModelAbs = _thisSubModelAbs.replace(/^@[a-z0-9A-Z_]*/, scope[_thisSubModelAbs.split('.')[0]]);\n                        }\n\n                        this.bindBind(_thisNode, _thisSubModelAbs, _bindKey);\n                    });\n\n                    _thisNode.removeAttribute(_i.name);\n                }\n            }\n\n            // Render 'for' list in another 'for' list\n            if (_attrsArr.includes('bp-for')) {\n                this.bindFor(_thisNode, scope, indexStack);\n                continue;\n            }\n\n            if (_attrsArr.includes('bp-ref')) {\n                this.bindRef(_thisNode);\n            }\n\n            if (_attrsArr.includes('bp-class')) {\n                let _thisSubModel = _thisNode.getAttribute('bp-class');  \n                let _thisSubModelAbs = _thisSubModel;\n\n                if (/^@/ig.test(_thisSubModel)) {\n                    _thisSubModelAbs = _thisSubModel.replace(/^@[a-z0-9A-Z_]*/, scope[_thisSubModel.split('.')[0]]);\n                }\n\n                if (_thisSubModelAbs !== _thisSubModel) {\n                    _thisNode.setAttribute('bp-class', _thisSubModelAbs);\n                }\n\n                this.bindClass(_thisNode);\n            }\n\n            if (_attrsArr.includes('bp-model')) {\n                let _thisSubModel = _thisNode.getAttribute('bp-model');\n                let _thisSubModelAbs = _thisSubModel;\n\n                if (/^@/ig.test(_thisSubModel)) {\n                    // Get index\n                    if (/\\[\\[index\\]\\]/ig.test(_thisSubModel)) {\n                        _thisSubModelAbs = '@{' + `${indexStack[_thisSubModel.match(/^(.*)\\[\\[index\\]\\]$/)[1]]}` + '}';\n                    } else if (/@{\\d+}/ig.test(_thisSubModel)) {\n                        _thisSubModelAbs = _thisSubModel;\n                    } else {\n                        _thisSubModelAbs = _thisSubModel.replace(/^@[a-z0-9A-Z_]*/, scope[_thisSubModel.split('.')[0]]);  \n                    }\n                }\n                \n                if (_thisSubModelAbs !== _thisSubModel) {\n                    _thisNode.setAttribute('bp-model', _thisSubModelAbs);\n                }\n\n                this.bindModel(_thisNode);\n            }\n\n            if (_attrsArr.includes('bp-show')) {\n                let _thisSubModel = _thisNode.getAttribute('bp-show');\n                let _thisSubModelAbs = _thisSubModel;\n\n                if (/^@/ig.test(_thisSubModel)) {\n                    _thisSubModelAbs = _thisSubModel.replace(/^@[a-z0-9A-Z_]*/, scope[_thisSubModel.split('.')[0]]);\n                }\n\n                if (_thisSubModelAbs !== _thisSubModel) {\n                    _thisNode.setAttribute('bp-show', _thisSubModelAbs);\n                }\n\n                this.bindShow(_thisNode);\n            }\n\n            if (_thisNode.children.length > 0) {\n                this.bindForItemsRecursion(_thisNode.children, scope, indexStack, data, itemIndex);\n            }\n        }\n\n        if (isInit) {\n            fn && fn.call(this, el);\n        }\n    };\n}\n\nexport default Ballpen;\n"],"names":["BallpenFilter","fnStr","parmsPath","parm","match","rawPathes","RegExp","length","resultSet","Set","forEach","value","key","add","_parseObjectToPath","Array","from","ObjStr","splice","join","BallpenError","aim","entity","err","desc","_e","Error","name","type","throw","errorEntity","BallpenUtil","obj","map","Map","root","_root","isObject","_i","isArray","set","slice","findReferenceNode","_index","Object","prototype","toString","call","arr","collection","path","val","_paths","split","parseData","data","trigger","i","str","dataObj","comObj","charAt","_data","substring","splitter","real","_list","p","index","push","directiveValue","exceptList","fn","regexp","test","this","copy","Date","setTime","getTime","len","clone","attr","hasOwnProperty","rootPath","relPath","n","chars","res","Math","ceil","random","fnString","pathes","filterParams","references","Observer","objPure","paths","fns","_path","_key","parseInt","observeKey","observePath","isComputed","yetVal","currentPath","defineProperty","nowVal","renderObjectValueByPath","keys","observeArray","mutatorMethods","arrayProto","hijackProto","create","method","args","resultVal","__proto__","registers","objCompute","_rn","register","find","item","is","base","_k","BallpenProxy","watcherQueue","dataList","dataListPure","_dist","_ov","handler","_target","_property","_v","receiver","_pv","isReferenceType","_fn","target","prop","descriptor","Reflect","Proxy","BallpenDecorator","_t","globalDecoratorList","decoratorsList","_f","decorators","Wasm","imports","fetch","then","response","arrayBuffer","WebAssembly","compile","buffer","env","memoryBase","memory","Memory","initial","tableBase","table","Table","element","Instance","module","BallpenGlobalWrapper","Ballpen","registerPlugin","$refs","window","wasmPath","wasmCore","loadAll","alias","pluginEntity","el","dataModel","$dataModel","$id","trim","randomSequence","bus","lifecycleHookPoint","init","_this","scan","$el","rawData","lifecycle","beforeRender","Promise","resolve","reject","catch","afterRneder","afterRender","document","querySelector","$dataListPure","$dataList","events","$eventList","initEventList","watchers","watchersHook","_watchers","_watcher","_watcherEntity","_this3","setProxy","computed","$computedList","analyzeComputedReference","_decoratorsModel","$decoratorList","components","$registers","eventList","_thisEventObject","children","_thisNode","hasAttributes","_attrs","attributes","_attrsArr","_attr","removeAttribute","eventBindedList","binder","eventBinded","_fnType","_fnName","bindEvent","_this4","attrsBindedList","attrsBinded","_bindKey","_thisSubModelAbs","bindBind","includes","bindPre","bindFor","bindModel","bindClass","bindShow","bindRef","childNodes","nodeType","Node","TEXT_NODE","bindMoustache","attach","getAttribute","analyzeDecoratorDependency","modelName","wrapAbsPath","modelPath","ignoreInnerDirectives","model","_this5","decorate","_es","style","removeProperty","display","tagName","innerText","_this6","subTextNode","subTextNodeValuePure","nodeValue","subTextNodeValueRendered","subPatterns","modelsMapper","pattern","_this7","replace","_this8","classList","contains","_y","remove","context","addEventListener","_this9","_bindValue","_this10","setAttribute","scope","indexStack","modelPaths","_pScope","_cScope","_identifyKey","closureScope","closureIndexStack","analyzeDecorators","parentNode","virtualDiv","createDocumentFragment","iterateCount","_div","cloneNode","_dataPath","bindForItemsRecursion","appendChild","replaceChild","replaceChilds","querySelectorAll","itemIndex","isInit","child","isHTMLCollection","j","_thisSubModel","_attrsMain","_this12"],"mappings":"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"}