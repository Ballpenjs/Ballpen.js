{"version":3,"file":"ballpen.min.js","sources":["../src/ballpen.js"],"sourcesContent":["class Ballpen {\r\n\r\n    constructor(el, dataModel) { \r\n        // Init EventList\r\n        this.init(el, dataModel);\r\n        // Scan directives\r\n        this.scan(this.el);\r\n    };\r\n\r\n    init(el, dataModel) {\r\n        this.el = document.querySelector(el);\r\n\r\n        // Handle invalid root element\r\n        if (!this.el) {\r\n            throw new Error('[Ballpen] Invalid root element!');    \r\n        }\r\n\r\n        this.dataModel = dataModel;\r\n\r\n        if (dataModel.event) {\r\n            this.eventList = {};\r\n            this.initEventList(dataModel.event);\r\n        }\r\n\r\n        if (dataModel.data) {\r\n            // Set proxy to global data payload\r\n            this.dataListPure = dataModel.data;\r\n            this.dataList = Ballpen.clone(dataModel.data);\r\n            this.modelList = {};\r\n        }\r\n\r\n        if (dataModel.watchers) {\r\n            this.watchersHook = new Map();\r\n\r\n            let _watchers = dataModel.watchers;\r\n\r\n            for (let watcher in _watchers) {\r\n                const _dataPath = watcher;\r\n                const _dataHook = _watchers[watcher].handler;\r\n\r\n                this.watchersHook.set(_dataPath, _dataHook);\r\n            }\r\n\r\n            this.watchersHook.forEach((watcherFn, path) => {\r\n                let _model = Ballpen.parseData(path, this.dataList);\r\n                let _pathes = path.split('.');\r\n                let _dataBundle = this.dataList;\r\n\r\n                if (!_model.data) {\r\n                    throw new Error('[Ballpen] \"' + path + '\" is an invalid watch path.');\r\n                }\r\n\r\n                if (_pathes.length === 1) {\r\n                    this.dataList[_pathes[0]] = this.setProxy(_model.data, path, watcherFn, watcherFn);\r\n                } else {\r\n                    for (let i = 0; i < _pathes.length - 1; i++) {\r\n                        _dataBundle = _dataBundle[_pathes[i]];\r\n                        if (!_dataBundle) {\r\n                            throw new Error('[Ballpen] \"' + path + '\" is an invalid watch path.');\r\n                        }\r\n\r\n                        if (i === _pathes.length - 2) {\r\n                            _dataBundle[_pathes[_pathes.length - 1]] = this.setProxy(_model.data, path, watcherFn, watcherFn);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        // Other initializations\r\n        this.registers = [];\r\n        this.removedChildNodes = [];\r\n    };\r\n\r\n    setProxy(dataList, path, fnSet = false, fnGet = false) {\r\n        let handler = {\r\n            get: (target, property) => {\r\n                // Run callback\r\n                fnGet && fnGet.call(this, Ballpen.parseData(path, this.dataListPure).data);\r\n                return target[property];\r\n            },\r\n            set: (target, property, value, receiver) => {\r\n                target[property] = value;\r\n                // Run callback\r\n                fnSet && fnSet.call(this, Ballpen.parseData(path, this.dataListPure).data);\r\n                // Return true to accept the changes\r\n                return true;\r\n            },\r\n            defineProperty: (target, prop, descriptor) => {\r\n                return Reflect.defineProperty(target, prop, descriptor);\r\n            }\r\n        };\r\n\r\n        return new Proxy(dataList, handler);\r\n    };\r\n\r\n    initEventList(eventList) {\r\n        if (eventList) {\r\n            let _thisEventObject = eventList;\r\n            for (let item in _thisEventObject) {\r\n                this.eventList[item]      = {};\r\n                this.eventList[item].type = '';\r\n                this.eventList[item].fn   = _thisEventObject[item];\r\n            }\r\n        }\r\n    };\r\n\r\n    scan(el, init = true) {\r\n        for (let i = 0; i < el.children.length; i++) {\r\n            let _thisNode = el.children[i];\r\n            let innerText = el.innerHTML;\r\n     \r\n            // Bind\r\n            this.bind(_thisNode);\r\n\r\n            // Recursion\r\n            if (_thisNode.children.length > 0) {\r\n                this.scan(_thisNode, false);\r\n            }\r\n        }\r\n\r\n        if (init) {\r\n            // Update view\r\n            this.update();\r\n            // Attach observers\r\n            this.attach();\r\n        }   \r\n    };\r\n\r\n    update() {\r\n        this.removedChildNodes.forEach((node) => {\r\n            node.remove();\r\n        });\r\n    }\r\n\r\n    bind(el) {\r\n        if (!el.hasAttributes()) {\r\n            return;\r\n        }\r\n\r\n        let _attrs = el.attributes;\r\n\r\n        for (let i = 0; i < _attrs.length; i++) {\r\n            const _attr = _attrs.item(i);\r\n\r\n            if (_attr.name === 'bp-model') {\r\n                this.bindModel(el);\r\n            }\r\n\r\n            if (_attr.name === 'bp-class') {\r\n                this.bindClass(el);\r\n            }\r\n\r\n            if (/bp-event:/ig.test(_attr.name)) {\r\n                let _fnType = _attr.name.split(':')[1];\r\n                let _fnName = _attr.value;\r\n                this.bindEvent(el, _fnName, _fnType, this.dataList);\r\n            }\r\n\r\n            if (/bp-bind:/ig.test(_attr.name)) {\r\n                let _bindKey   = _attr.name.split(':')[1];\r\n                let _bindValue = _attr.value;\r\n                this.bindBind(el, _bindValue, _bindKey);\r\n            }\r\n\r\n            if (_attr.name === 'bp-for') {\r\n                this.bindFor(el);\r\n            }\r\n\r\n            if (_attr.name === 'bp-show') {\r\n                this.bindShow(el);\r\n            }\r\n        }\r\n    };\r\n\r\n    static isHTMLCollection(obj) {\r\n        return Object.prototype.toString.call(obj) === '[object HTMLCollection]';\r\n    };\r\n\r\n    static isArray(arr) {\r\n        return Array.isArray(arr) || Object.prototype.toString.call(arr) === '[object Array]';\r\n    };\r\n\r\n    static isObject(obj) {\r\n        return Object.prototype.toString.call(obj) === '[object Object]';\r\n    };\r\n\r\n    static parseData(str, dataObj) {\r\n        const _list = str.split('.');\r\n        let _data = dataObj;\r\n        let p = [];\r\n\r\n        _list.forEach((key, index) => {\r\n            if (index === 0) {\r\n                _data = dataObj[key];\r\n                p.push(key);\r\n            } else {\r\n                _data = _data[key];\r\n                p.push(key);\r\n            }\r\n        });\r\n\r\n        return {\r\n            path: p,\r\n            data: _data\r\n        };\r\n    };\r\n\r\n    static ignoreInnerDirectives(directiveValue, exceptList, fn, ...args) {\r\n        exceptList.forEach((regexp) => {\r\n            if (regexp.test(directiveValue)) {\r\n                fn && fn.call(this, ...args);\r\n            }\r\n        });\r\n\r\n        if (!/^@/ig.test(directiveValue)) {\r\n            fn && fn.call(this, ...args);\r\n        }\r\n    }\r\n\r\n    static clone(obj) {\r\n        let copy;\r\n\r\n        if (obj === null || typeof obj !== 'object') return obj;\r\n\r\n        if (obj instanceof Date) {\r\n            copy = new Date();\r\n            copy.setTime(obj.getTime());\r\n            return copy;\r\n        }\r\n\r\n        if (obj instanceof Array) {\r\n            copy = [];\r\n            for (var i = 0, len = obj.length; i < len; i++) {\r\n                copy[i] = Ballpen.clone(obj[i]);\r\n            }\r\n            return copy;\r\n        }\r\n\r\n        if (obj instanceof Object) {\r\n            copy = {};\r\n            for (var attr in obj) {\r\n                if (obj.hasOwnProperty(attr)) copy[attr] = Ballpen.clone(obj[attr]);\r\n            }\r\n            return copy;\r\n        }\r\n\r\n        throw new Error('[Ballpen] Unable to copy object, type is not supported.');\r\n    }\r\n\r\n    bindShow(el) {\r\n        const modelName = el.getAttribute('bp-show');\r\n\r\n        Ballpen.ignoreInnerDirectives(modelName, [], (el) => {\r\n            const model = Ballpen.parseData(modelName, this.dataList);\r\n\r\n            const elStyle = el.style;\r\n \r\n            (!model.data ? elStyle.display = 'none' : (elStyle.removeProperty ? elStyle.removeProperty('display') : elStyle.removeAttribute('display')));\r\n\r\n            this.register(this.dataList, this.dataListPure, model.path, (yetVal, nowVal) => {\r\n                (!nowVal ? elStyle.display = 'none' : (elStyle.removeProperty ? elStyle.removeProperty('display') : elStyle.removeAttribute('display')));\r\n            });\r\n        }, el);\r\n    };\r\n\r\n    bindModel(el) {\r\n        const modelName = el.getAttribute('bp-model');\r\n\r\n        Ballpen.ignoreInnerDirectives(modelName, [/^@{([\\d]+)}$/ig], (el) => {\r\n            // Handel 'for' list index\r\n            if (/^@{([\\d]+)}$/ig.test(modelName)) {\r\n                let index = modelName.match(/^@{([\\d]+)}$/)[1];\r\n\r\n                (el.tagName === 'INPUT' ? el.value = index : el.innerText = index);\r\n            } else {\r\n                const model = Ballpen.parseData(modelName, this.dataList);\r\n\r\n                (el.tagName === 'INPUT' ? el.value = model.data : el.innerText = model.data);\r\n\r\n                this.register(this.dataList, this.dataListPure, model.path, (yetVal, nowVal) => {\r\n                    (el.tagName === 'INPUT' ? el.value = nowVal : el.innerText = nowVal);\r\n                });\r\n            }\r\n        }, el);\r\n    };\r\n\r\n    bindClass(el) {\r\n        const modelName = el.getAttribute('bp-class');\r\n\r\n        Ballpen.ignoreInnerDirectives(modelName, [], (el) => {\r\n            const model = Ballpen.parseData(modelName, this.dataList);\r\n\r\n            if (!el.classList.contains(model.data)) {\r\n                el.classList.add(model.data);\r\n            }\r\n\r\n            this.register(this.dataList, this.dataListPure, model.path, (yetVal, nowVal) => {\r\n                if (!el.classList.contains(nowVal)) {\r\n                    el.classList.add(nowVal);\r\n                }\r\n            });\r\n        }, el);\r\n    };\r\n\r\n    bindEvent(el, _fnName, _fnType, context, args = {}) {\r\n        Ballpen.ignoreInnerDirectives(_fnName, [], (el, _fnName, _fnType, context) => {\r\n            // Update global event list\r\n            this.eventList[_fnName]['type'] = _fnType;\r\n            \r\n            // Bind listener, set callback fn to global data context\r\n            el.addEventListener(_fnType, () => {\r\n                this.eventList[_fnName]['fn'].call(this.dataList, el, context, args);\r\n            });\r\n        }, el, _fnName, _fnType, context, args);\r\n    };\r\n\r\n    bindBind(el, _bindValue, _bindKey) {\r\n        Ballpen.ignoreInnerDirectives(_bindValue, [], (el, _bindValue, _bindKey) => {\r\n            const model = Ballpen.parseData(_bindValue, this.dataList);\r\n\r\n            // Set customized attribute\r\n            el.setAttribute(_bindKey, model.data);\r\n            \r\n            // Bind listener, set callback fn to global data context\r\n            this.register(this.dataList, this.dataListPure, model.path, (yetVal, nowVal) => {\r\n                el.setAttribute(_bindKey, nowVal);\r\n            });\r\n        }, el, _bindValue, _bindKey);\r\n    }\r\n\r\n    bindFor(el) {\r\n        const modelName = el.getAttribute('bp-for');\r\n        const model = Ballpen.parseData(modelName, this.dataList);\r\n\r\n        let parentNode = el.parentNode;\r\n        let virtualDiv = document.createDocumentFragment();\r\n\r\n        for (let i = 0; i < model.data.length; i++) {\r\n            let div = el.cloneNode(true);\r\n            let _dataPath = `${modelName}.${i}`;\r\n\r\n            div.removeAttribute('bp-for');\r\n\r\n            virtualDiv.appendChild(this.bindForItems(div, _dataPath, i));\r\n        }\r\n\r\n        parentNode.appendChild(virtualDiv);\r\n\r\n        // Set register\r\n        this.register(this.dataList, this.dataListPure, model.path, (yetVal, nowVal) => {\r\n            let virtualDiv = document.createDocumentFragment();\r\n\r\n            for (let i = 0; i < nowVal.length; i++) {\r\n                let div = el.cloneNode(true);\r\n                let _dataPath = `${modelName}.${i}`;\r\n\r\n                virtualDiv.appendChild(this.bindForItems(div, _dataPath, i));\r\n            }\r\n\r\n            while (parentNode.firstChild) {\r\n                parentNode.removeChild(parentNode.firstChild);\r\n            }\r\n\r\n            parentNode.appendChild(virtualDiv);\r\n        });\r\n\r\n        this.removedChildNodes.push(el);\r\n    };\r\n\r\n    bindForItemsRecursion(el, data, itemIndex) {\r\n        let child = true;\r\n\r\n        if (!Ballpen.isHTMLCollection(el)) {\r\n            child = false;\r\n        }\r\n\r\n        for (let j = 0; j < (child ? el.length : 1); j++) {\r\n            const _thisNode = (child ? el[j] : el);\r\n\r\n            if (!_thisNode.hasAttributes() && child) {\r\n                continue;\r\n            }\r\n\r\n            // Bind normal render tag\r\n            let _attrsMain = _thisNode.attributes;\r\n            \r\n            for (let i = 0; i < _attrsMain.length; i++) {\r\n                const _attr = _attrsMain.item(i);\r\n\r\n                if (_attr.name === 'bp-class') {\r\n                    let _thisSubModel = _thisNode.getAttribute('bp-class');\r\n                    let _thisSubModelAbs = _thisSubModel;\r\n\r\n                    if (/^@\\./ig.test(_thisSubModel)) {\r\n                        let _subModel = _thisSubModel.split('.')[1];\r\n                        _thisSubModelAbs = data + `.${_subModel}`;\r\n                    } else if (/^@$/ig.test(_thisSubModel)) {\r\n                        _thisSubModelAbs = data;\r\n                    } \r\n\r\n                    if (_thisSubModelAbs !== _thisSubModel) {\r\n                        _thisNode.setAttribute('bp-class', _thisSubModelAbs);\r\n                    }\r\n\r\n                    this.bindClass(_thisNode);\r\n                }\r\n\r\n                if (/bp-event:/ig.test(_attr.name)) {\r\n                    let _fnType = _attr.name.split(':')[1];\r\n                    let _fnName = _attr.value;\r\n\r\n                    if (/^@:/ig.test(_fnName)) {\r\n                        this.bindEvent(_thisNode, _fnName.split(':')[1], _fnType, this.dataList, {\r\n                            index: itemIndex\r\n                        });\r\n                    }\r\n                }\r\n\r\n                if (_attr.name === 'bp-model') {\r\n                    let _thisSubModel = _thisNode.getAttribute('bp-model');\r\n                    let _thisSubModelAbs = _thisSubModel;\r\n\r\n                    if (/^@\\./ig.test(_thisSubModel)) {\r\n                        let _subModel = _thisSubModel.split('.')[1];\r\n                        _thisSubModelAbs = data + `.${_subModel}`;\r\n                    } else if (/^@$/ig.test(_thisSubModel)) {\r\n                        _thisSubModelAbs = data;\r\n                    } else if (/^@{index}$/ig.test(_thisSubModel)) {\r\n                        _thisSubModelAbs = `@{${itemIndex}}`;\r\n                    }\r\n\r\n                    if (_thisSubModelAbs !== _thisSubModel) {\r\n                        _thisNode.setAttribute('bp-model', _thisSubModelAbs);\r\n                    }\r\n\r\n                    this.bindModel(_thisNode);\r\n                }\r\n\r\n                if (_attr.name === 'bp-show') {\r\n                    let _thisSubModel = _thisNode.getAttribute('bp-show');\r\n                    let _thisSubModelAbs = _thisSubModel;\r\n\r\n                    if (/^@\\./ig.test(_thisSubModel)) {\r\n                        let _subModel = _thisSubModel.split('.')[1];\r\n                        _thisSubModelAbs = data + `.${_subModel}`;\r\n                    } else if (/^@$/ig.test(_thisSubModel)) {\r\n                        _thisSubModelAbs = data;\r\n                    } \r\n\r\n                    if (_thisSubModelAbs !== _thisSubModel) {\r\n                        _thisNode.setAttribute('bp-show', _thisSubModelAbs);\r\n                    }\r\n\r\n                    this.bindShow(_thisNode);\r\n                }\r\n\r\n                // Render 'for' list in another 'for' had not been implemented yet\r\n            }\r\n\r\n            if (_thisNode.children.length > 0) {\r\n                this.bindForItemsRecursion(_thisNode.children, data, itemIndex);\r\n            }\r\n        }\r\n    };\r\n\r\n    bindForItems(el, data, itemIndex) {\r\n        this.bindForItemsRecursion(el, data, itemIndex);\r\n        return el;\r\n    };\r\n\r\n    observePath(obj, objPure, paths, fns) {\r\n        if (Ballpen.isArray(paths)) {\r\n            let _path = obj;\r\n            let _pathPure = objPure;\r\n            let _key;\r\n\r\n            paths.forEach((key, index) => {\r\n                if (/^\\d+$/.test(key)) {\r\n                    key = parseInt(key);\r\n                }\r\n\r\n                if (index < paths.length - 1) {\r\n                    _path = _path[key];\r\n                    _pathPure = _pathPure[key];\r\n                } else {    \r\n                    _key = key;\r\n                }\r\n            });\r\n\r\n\r\n\r\n            this.observeKey(_path, _pathPure, _key, fns);\r\n        }\r\n    };\r\n\r\n    observeKey(obj, objPure, key, fns = false) {            \r\n        if (Ballpen.isArray(key)) {\r\n            this.observePath(obj, objPure, key, fns);\r\n        } else {\r\n            let yetVal = obj[key];\r\n            let yetValPure = objPure[key];\r\n           \r\n            if (Ballpen.isObject(yetVal)) {\r\n                Object.defineProperty(obj, key, {\r\n                    get: () => {\r\n                        return yetVal;\r\n                    },\r\n                    set: (nowVal) => {  \r\n                        if (nowVal !== yetVal) {\r\n                            fns && fns.forEach((fn) => {\r\n                                fn.call(this, yetVal, nowVal);\r\n                            });\r\n\r\n                            yetValPure = nowVal;\r\n                            yetVal = nowVal;\r\n                        }\r\n                    },\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n\r\n                Object.keys(yetVal).forEach((key) => {\r\n                    this.observeKey(yetVal, yetValPure, key, fns);\r\n                });\r\n            } else if (Ballpen.isArray(yetVal)) {\r\n                Object.defineProperty(obj, key, {\r\n                    get: () => {\r\n                        return yetVal;\r\n                    },\r\n                    set: (nowVal) => {  \r\n                        if (nowVal !== yetVal) {\r\n                            fns && fns.forEach((fn) => {\r\n                                fn.call(this, yetVal, nowVal);\r\n                            });\r\n\r\n                            yetValPure = nowVal;\r\n                            yetVal = nowVal;\r\n                        }\r\n                    },\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n\r\n                this.observeArray(yetVal, yetValPure, fns);\r\n            } else {\r\n                Object.defineProperty(obj, key, {\r\n                    get: () => {\r\n                        return yetVal;\r\n                    },\r\n                    set: (nowVal) => {  \r\n                        if (nowVal !== yetVal) {\r\n                            fns && fns.forEach((fn) => {\r\n                                fn.call(this, yetVal, nowVal);\r\n                            });\r\n\r\n                            yetValPure = nowVal;\r\n                            yetVal = nowVal;\r\n\r\n                            console.log(yetValPure);\r\n                        }\r\n                    },\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n            }\r\n        }\r\n    };\r\n    \r\n    observeArray(arr, arrPure, fns = false) {\r\n        const mutatorMethods = ['copyWithin', 'fill', 'pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'];\r\n        const arrayProto = Array.prototype;\r\n\r\n        // Prevent from polluting the global 'Array.prototype'\r\n        const hijackProto = Object.create(arrayProto);\r\n\r\n        mutatorMethods.forEach((method) => {\r\n            Object.defineProperty(hijackProto, method, {\r\n                enumerable: true,\r\n                configurable: true,\r\n                writable: true,\r\n                value: (...args) => {\r\n                    let yetVal = arr.slice();\r\n                    let resultVal = arrayProto[method].call(arr, ...args);\r\n                                    arrayProto[method].call(arrPure, ...args);\r\n                    let nowVal = arr;\r\n                    // Callback\r\n                    fns && fns.forEach((fn) => {\r\n                        fn.call(this, yetVal, nowVal);\r\n                    }); \r\n\r\n                    return resultVal;\r\n                } \r\n            });\r\n        });\r\n        /* eslint-disable */\r\n        arr.__proto__ = hijackProto;\r\n        // arr.__proto__.__proto__ === Array.prototype; // true\r\n    };\r\n\r\n    register(obj, objPure, key, fn) {\r\n        const register = this.registers.find((item) => {\r\n            if (Object.is(item.obj, obj) && (item.key === key || item.key.toString() === key.toString())) {\r\n                return item;\r\n            }\r\n        });\r\n\r\n        if (register) {\r\n            register.fns.push(fn);\r\n        } else {\r\n            this.registers.push({\r\n                obj: obj,\r\n                objPure: objPure,\r\n                key: key,\r\n                fns: [fn]\r\n            });\r\n        }\r\n    };\r\n\r\n    attach() {\r\n        this.registers.forEach((register) => {\r\n            this.observeKey(register.obj, register.objPure, register.key, register.fns);\r\n        });\r\n    };\r\n\r\n}\r\n\r\nexport default Ballpen;\r\n"],"names":["Ballpen","el","dataModel","init","scan","this","document","querySelector","Error","event","eventList","initEventList","data","dataListPure","dataList","clone","modelList","watchers","watchersHook","Map","_watchers","watcher","_dataPath","_dataHook","handler","set","forEach","watcherFn","path","_model","parseData","_this","_pathes","split","_dataBundle","length","setProxy","i","registers","removedChildNodes","fnSet","fnGet","target","property","call","_this2","value","receiver","prop","descriptor","Reflect","defineProperty","Proxy","_thisEventObject","item","type","fn","children","_thisNode","innerHTML","bind","update","attach","node","remove","hasAttributes","_attrs","attributes","_attr","name","bindModel","bindClass","test","_fnType","_fnName","bindEvent","_bindKey","_bindValue","bindBind","bindFor","bindShow","modelName","getAttribute","ignoreInnerDirectives","model","_this3","elStyle","style","removeProperty","removeAttribute","display","register","yetVal","nowVal","index","match","tagName","innerText","_this4","_this5","classList","contains","add","context","args","addEventListener","_this6","_this7","setAttribute","parentNode","virtualDiv","createDocumentFragment","div","cloneNode","appendChild","bindForItems","_this8","firstChild","removeChild","push","itemIndex","child","isHTMLCollection","j","_attrsMain","_thisSubModel","_thisSubModelAbs","_subModel","bindForItemsRecursion","obj","objPure","paths","fns","isArray","_path","_pathPure","_key","key","parseInt","observeKey","observePath","yetValPure","isObject","keys","observeArray","log","arr","arrPure","mutatorMethods","arrayProto","Array","prototype","hijackProto","Object","create","method","slice","resultVal","__proto__","find","is","toString","str","dataObj","_list","_data","p","directiveValue","exceptList","regexp","copy","Date","setTime","getTime","len","attr","hasOwnProperty"],"mappings":"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"}